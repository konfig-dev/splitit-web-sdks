# coding: utf-8

"""
    splitit-web-api-v3

    Splitit's Web API

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from splitit_client import schemas  # noqa: F401


class ReAuthorization(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            ProcessingDate = schemas.DateTimeSchema
        
            @staticmethod
            def Amount() -> typing.Type['Money']:
                return Money
            
            
            class TransactionResults(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['TransactionResult']:
                        return TransactionResult
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['TransactionResult'], typing.List['TransactionResult']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'TransactionResults':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'TransactionResult':
                    return super().__getitem__(i)
        
            @staticmethod
            def CardDetails() -> typing.Type['CardData2']:
                return CardData2
            Result = schemas.BoolSchema
            __annotations__ = {
                "ProcessingDate": ProcessingDate,
                "Amount": Amount,
                "TransactionResults": TransactionResults,
                "CardDetails": CardDetails,
                "Result": Result,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ProcessingDate"]) -> MetaOapg.properties.ProcessingDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Amount"]) -> 'Money': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["TransactionResults"]) -> MetaOapg.properties.TransactionResults: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["CardDetails"]) -> 'CardData2': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Result"]) -> MetaOapg.properties.Result: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["ProcessingDate", "Amount", "TransactionResults", "CardDetails", "Result", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ProcessingDate"]) -> typing.Union[MetaOapg.properties.ProcessingDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Amount"]) -> typing.Union['Money', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["TransactionResults"]) -> typing.Union[MetaOapg.properties.TransactionResults, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["CardDetails"]) -> typing.Union['CardData2', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Result"]) -> typing.Union[MetaOapg.properties.Result, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["ProcessingDate", "Amount", "TransactionResults", "CardDetails", "Result", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        ProcessingDate: typing.Union[MetaOapg.properties.ProcessingDate, str, datetime, schemas.Unset] = schemas.unset,
        Amount: typing.Union['Money', schemas.Unset] = schemas.unset,
        TransactionResults: typing.Union[MetaOapg.properties.TransactionResults, list, tuple, schemas.Unset] = schemas.unset,
        CardDetails: typing.Union['CardData2', schemas.Unset] = schemas.unset,
        Result: typing.Union[MetaOapg.properties.Result, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ReAuthorization':
        return super().__new__(
            cls,
            *args,
            ProcessingDate=ProcessingDate,
            Amount=Amount,
            TransactionResults=TransactionResults,
            CardDetails=CardDetails,
            Result=Result,
            _configuration=_configuration,
            **kwargs,
        )

from splitit_client.model.card_data2 import CardData2
from splitit_client.model.money import Money
from splitit_client.model.transaction_result import TransactionResult
