# coding: utf-8

"""
    splitit-web-api-v3

    Splitit's Web API

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from splitit_client import schemas  # noqa: F401


class AuthorizationModel(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by Konfig.
    Ref: https://konfigthis.com

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "Status",
        }
        
        class properties:
        
            @staticmethod
            def Status() -> typing.Type['GwAuthorizationStatus']:
                return GwAuthorizationStatus
            Date = schemas.DateTimeSchema
            SplititErrorResultCode = schemas.StrSchema
            GatewayTransactionID = schemas.StrSchema
            GatewayResultCode = schemas.StrSchema
            GatewayResultMessage = schemas.StrSchema
        
            @staticmethod
            def ThreeDSRedirect() -> typing.Type['ThreeDsRedirectDataV3']:
                return ThreeDsRedirectDataV3
            CAVV = schemas.StrSchema
            ECI = schemas.StrSchema
            __annotations__ = {
                "Status": Status,
                "Date": Date,
                "SplititErrorResultCode": SplititErrorResultCode,
                "GatewayTransactionID": GatewayTransactionID,
                "GatewayResultCode": GatewayResultCode,
                "GatewayResultMessage": GatewayResultMessage,
                "ThreeDSRedirect": ThreeDSRedirect,
                "CAVV": CAVV,
                "ECI": ECI,
            }
    
    Status: 'GwAuthorizationStatus'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Status"]) -> 'GwAuthorizationStatus': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Date"]) -> MetaOapg.properties.Date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["SplititErrorResultCode"]) -> MetaOapg.properties.SplititErrorResultCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["GatewayTransactionID"]) -> MetaOapg.properties.GatewayTransactionID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["GatewayResultCode"]) -> MetaOapg.properties.GatewayResultCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["GatewayResultMessage"]) -> MetaOapg.properties.GatewayResultMessage: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ThreeDSRedirect"]) -> 'ThreeDsRedirectDataV3': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["CAVV"]) -> MetaOapg.properties.CAVV: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ECI"]) -> MetaOapg.properties.ECI: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["Status", "Date", "SplititErrorResultCode", "GatewayTransactionID", "GatewayResultCode", "GatewayResultMessage", "ThreeDSRedirect", "CAVV", "ECI", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Status"]) -> 'GwAuthorizationStatus': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Date"]) -> typing.Union[MetaOapg.properties.Date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["SplititErrorResultCode"]) -> typing.Union[MetaOapg.properties.SplititErrorResultCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["GatewayTransactionID"]) -> typing.Union[MetaOapg.properties.GatewayTransactionID, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["GatewayResultCode"]) -> typing.Union[MetaOapg.properties.GatewayResultCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["GatewayResultMessage"]) -> typing.Union[MetaOapg.properties.GatewayResultMessage, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ThreeDSRedirect"]) -> typing.Union['ThreeDsRedirectDataV3', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["CAVV"]) -> typing.Union[MetaOapg.properties.CAVV, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ECI"]) -> typing.Union[MetaOapg.properties.ECI, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["Status", "Date", "SplititErrorResultCode", "GatewayTransactionID", "GatewayResultCode", "GatewayResultMessage", "ThreeDSRedirect", "CAVV", "ECI", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        Status: 'GwAuthorizationStatus',
        Date: typing.Union[MetaOapg.properties.Date, str, datetime, schemas.Unset] = schemas.unset,
        SplititErrorResultCode: typing.Union[MetaOapg.properties.SplititErrorResultCode, str, schemas.Unset] = schemas.unset,
        GatewayTransactionID: typing.Union[MetaOapg.properties.GatewayTransactionID, str, schemas.Unset] = schemas.unset,
        GatewayResultCode: typing.Union[MetaOapg.properties.GatewayResultCode, str, schemas.Unset] = schemas.unset,
        GatewayResultMessage: typing.Union[MetaOapg.properties.GatewayResultMessage, str, schemas.Unset] = schemas.unset,
        ThreeDSRedirect: typing.Union['ThreeDsRedirectDataV3', schemas.Unset] = schemas.unset,
        CAVV: typing.Union[MetaOapg.properties.CAVV, str, schemas.Unset] = schemas.unset,
        ECI: typing.Union[MetaOapg.properties.ECI, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AuthorizationModel':
        return super().__new__(
            cls,
            *args,
            Status=Status,
            Date=Date,
            SplititErrorResultCode=SplititErrorResultCode,
            GatewayTransactionID=GatewayTransactionID,
            GatewayResultCode=GatewayResultCode,
            GatewayResultMessage=GatewayResultMessage,
            ThreeDSRedirect=ThreeDSRedirect,
            CAVV=CAVV,
            ECI=ECI,
            _configuration=_configuration,
            **kwargs,
        )

from splitit_client.model.gw_authorization_status import GwAuthorizationStatus
from splitit_client.model.three_ds_redirect_data_v3 import ThreeDsRedirectDataV3
