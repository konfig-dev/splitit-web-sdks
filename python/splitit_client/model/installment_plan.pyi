# coding: utf-8

"""
    splitit-web-api-v3

    Splitit's Web API

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from splitit_client import schemas  # noqa: F401


class InstallmentPlan(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "IsInAutoRetry",
            "ScpFundingPercent",
            "IsFullCaptured",
            "IsChargedBack",
            "TestMode",
            "LifeTimeUrlExpirationTime",
            "AllowCardUpdateOnSplititPortals",
            "NumberOfInstallments",
            "FundingStatus",
            "CreationDateTime",
            "NumberOfProcessedInstallments",
            "ArePaymentsOnHold",
            "InstallmentsScheduleInterval",
        }
        
        class properties:
            NumberOfInstallments = schemas.Int32Schema
            NumberOfProcessedInstallments = schemas.Int32Schema
            IsFullCaptured = schemas.BoolSchema
            IsChargedBack = schemas.BoolSchema
            ArePaymentsOnHold = schemas.BoolSchema
            ScpFundingPercent = schemas.NumberSchema
        
            @staticmethod
            def FundingStatus() -> typing.Type['MoneyFlows']:
                return MoneyFlows
        
            @staticmethod
            def TestMode() -> typing.Type['TestModes']:
                return TestModes
            CreationDateTime = schemas.DateTimeSchema
            LifeTimeUrlExpirationTime = schemas.DateTimeSchema
            IsInAutoRetry = schemas.BoolSchema
            AllowCardUpdateOnSplititPortals = schemas.BoolSchema
            InstallmentsScheduleInterval = schemas.Int32Schema
            InstallmentPlanNumber = schemas.StrSchema
        
            @staticmethod
            def InstallmentPlanStatus() -> typing.Type['ReferenceEntityBase']:
                return ReferenceEntityBase
        
            @staticmethod
            def Amount() -> typing.Type['Money']:
                return Money
        
            @staticmethod
            def OutstandingAmount() -> typing.Type['Money']:
                return Money
        
            @staticmethod
            def Disputes() -> typing.Type['Disputes']:
                return Disputes
        
            @staticmethod
            def OriginalAmount() -> typing.Type['Money']:
                return Money
        
            @staticmethod
            def RefundAmount() -> typing.Type['Money']:
                return Money
        
            @staticmethod
            def Consumer() -> typing.Type['ConsumerData']:
                return ConsumerData
        
            @staticmethod
            def ActiveCard() -> typing.Type['CardData2']:
                return CardData2
        
            @staticmethod
            def FraudCheck() -> typing.Type['FraudCheck']:
                return FraudCheck
        
            @staticmethod
            def Terminal() -> typing.Type['TerminalRef']:
                return TerminalRef
        
            @staticmethod
            def Merchant() -> typing.Type['MerchantRef']:
                return MerchantRef
            RefOrderNumber = schemas.StrSchema
        
            @staticmethod
            def PurchaseMethod() -> typing.Type['ReferenceEntityBase']:
                return ReferenceEntityBase
        
            @staticmethod
            def Strategy() -> typing.Type['ReferenceEntityBase']:
                return ReferenceEntityBase
        
            @staticmethod
            def DelayResolution() -> typing.Type['ReferenceEntityBase']:
                return ReferenceEntityBase
        
            @staticmethod
            def ExtendedParams() -> typing.Type['InstallmentPlanExtendedParams']:
                return InstallmentPlanExtendedParams
            
            
            class Installments(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Installment2']:
                        return Installment2
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Installment2'], typing.List['Installment2']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'Installments':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Installment2':
                    return super().__getitem__(i)
            
            
            class SecureAuthorizations(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ReAuthorization']:
                        return ReAuthorization
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['ReAuthorization'], typing.List['ReAuthorization']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'SecureAuthorizations':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ReAuthorization':
                    return super().__getitem__(i)
            LogoUrl = schemas.StrSchema
            PaymentMethod = schemas.StrSchema
            OnHoldLastOpenDate = schemas.DateTimeSchema
            OnHoldLastOpenUserId = schemas.StrSchema
        
            @staticmethod
            def ExternalPaymentProvider() -> typing.Type['ExternalProviderTypes']:
                return ExternalProviderTypes
            __annotations__ = {
                "NumberOfInstallments": NumberOfInstallments,
                "NumberOfProcessedInstallments": NumberOfProcessedInstallments,
                "IsFullCaptured": IsFullCaptured,
                "IsChargedBack": IsChargedBack,
                "ArePaymentsOnHold": ArePaymentsOnHold,
                "ScpFundingPercent": ScpFundingPercent,
                "FundingStatus": FundingStatus,
                "TestMode": TestMode,
                "CreationDateTime": CreationDateTime,
                "LifeTimeUrlExpirationTime": LifeTimeUrlExpirationTime,
                "IsInAutoRetry": IsInAutoRetry,
                "AllowCardUpdateOnSplititPortals": AllowCardUpdateOnSplititPortals,
                "InstallmentsScheduleInterval": InstallmentsScheduleInterval,
                "InstallmentPlanNumber": InstallmentPlanNumber,
                "InstallmentPlanStatus": InstallmentPlanStatus,
                "Amount": Amount,
                "OutstandingAmount": OutstandingAmount,
                "Disputes": Disputes,
                "OriginalAmount": OriginalAmount,
                "RefundAmount": RefundAmount,
                "Consumer": Consumer,
                "ActiveCard": ActiveCard,
                "FraudCheck": FraudCheck,
                "Terminal": Terminal,
                "Merchant": Merchant,
                "RefOrderNumber": RefOrderNumber,
                "PurchaseMethod": PurchaseMethod,
                "Strategy": Strategy,
                "DelayResolution": DelayResolution,
                "ExtendedParams": ExtendedParams,
                "Installments": Installments,
                "SecureAuthorizations": SecureAuthorizations,
                "LogoUrl": LogoUrl,
                "PaymentMethod": PaymentMethod,
                "OnHoldLastOpenDate": OnHoldLastOpenDate,
                "OnHoldLastOpenUserId": OnHoldLastOpenUserId,
                "ExternalPaymentProvider": ExternalPaymentProvider,
            }
    
    IsInAutoRetry: MetaOapg.properties.IsInAutoRetry
    ScpFundingPercent: MetaOapg.properties.ScpFundingPercent
    IsFullCaptured: MetaOapg.properties.IsFullCaptured
    IsChargedBack: MetaOapg.properties.IsChargedBack
    TestMode: 'TestModes'
    LifeTimeUrlExpirationTime: MetaOapg.properties.LifeTimeUrlExpirationTime
    AllowCardUpdateOnSplititPortals: MetaOapg.properties.AllowCardUpdateOnSplititPortals
    NumberOfInstallments: MetaOapg.properties.NumberOfInstallments
    FundingStatus: 'MoneyFlows'
    CreationDateTime: MetaOapg.properties.CreationDateTime
    NumberOfProcessedInstallments: MetaOapg.properties.NumberOfProcessedInstallments
    ArePaymentsOnHold: MetaOapg.properties.ArePaymentsOnHold
    InstallmentsScheduleInterval: MetaOapg.properties.InstallmentsScheduleInterval
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["NumberOfInstallments"]) -> MetaOapg.properties.NumberOfInstallments: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["NumberOfProcessedInstallments"]) -> MetaOapg.properties.NumberOfProcessedInstallments: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["IsFullCaptured"]) -> MetaOapg.properties.IsFullCaptured: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["IsChargedBack"]) -> MetaOapg.properties.IsChargedBack: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ArePaymentsOnHold"]) -> MetaOapg.properties.ArePaymentsOnHold: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ScpFundingPercent"]) -> MetaOapg.properties.ScpFundingPercent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["FundingStatus"]) -> 'MoneyFlows': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["TestMode"]) -> 'TestModes': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["CreationDateTime"]) -> MetaOapg.properties.CreationDateTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["LifeTimeUrlExpirationTime"]) -> MetaOapg.properties.LifeTimeUrlExpirationTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["IsInAutoRetry"]) -> MetaOapg.properties.IsInAutoRetry: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["AllowCardUpdateOnSplititPortals"]) -> MetaOapg.properties.AllowCardUpdateOnSplititPortals: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["InstallmentsScheduleInterval"]) -> MetaOapg.properties.InstallmentsScheduleInterval: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["InstallmentPlanNumber"]) -> MetaOapg.properties.InstallmentPlanNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["InstallmentPlanStatus"]) -> 'ReferenceEntityBase': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Amount"]) -> 'Money': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["OutstandingAmount"]) -> 'Money': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Disputes"]) -> 'Disputes': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["OriginalAmount"]) -> 'Money': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["RefundAmount"]) -> 'Money': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Consumer"]) -> 'ConsumerData': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ActiveCard"]) -> 'CardData2': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["FraudCheck"]) -> 'FraudCheck': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Terminal"]) -> 'TerminalRef': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Merchant"]) -> 'MerchantRef': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["RefOrderNumber"]) -> MetaOapg.properties.RefOrderNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["PurchaseMethod"]) -> 'ReferenceEntityBase': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Strategy"]) -> 'ReferenceEntityBase': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["DelayResolution"]) -> 'ReferenceEntityBase': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ExtendedParams"]) -> 'InstallmentPlanExtendedParams': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Installments"]) -> MetaOapg.properties.Installments: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["SecureAuthorizations"]) -> MetaOapg.properties.SecureAuthorizations: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["LogoUrl"]) -> MetaOapg.properties.LogoUrl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["PaymentMethod"]) -> MetaOapg.properties.PaymentMethod: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["OnHoldLastOpenDate"]) -> MetaOapg.properties.OnHoldLastOpenDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["OnHoldLastOpenUserId"]) -> MetaOapg.properties.OnHoldLastOpenUserId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ExternalPaymentProvider"]) -> 'ExternalProviderTypes': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["NumberOfInstallments", "NumberOfProcessedInstallments", "IsFullCaptured", "IsChargedBack", "ArePaymentsOnHold", "ScpFundingPercent", "FundingStatus", "TestMode", "CreationDateTime", "LifeTimeUrlExpirationTime", "IsInAutoRetry", "AllowCardUpdateOnSplititPortals", "InstallmentsScheduleInterval", "InstallmentPlanNumber", "InstallmentPlanStatus", "Amount", "OutstandingAmount", "Disputes", "OriginalAmount", "RefundAmount", "Consumer", "ActiveCard", "FraudCheck", "Terminal", "Merchant", "RefOrderNumber", "PurchaseMethod", "Strategy", "DelayResolution", "ExtendedParams", "Installments", "SecureAuthorizations", "LogoUrl", "PaymentMethod", "OnHoldLastOpenDate", "OnHoldLastOpenUserId", "ExternalPaymentProvider", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["NumberOfInstallments"]) -> MetaOapg.properties.NumberOfInstallments: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["NumberOfProcessedInstallments"]) -> MetaOapg.properties.NumberOfProcessedInstallments: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["IsFullCaptured"]) -> MetaOapg.properties.IsFullCaptured: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["IsChargedBack"]) -> MetaOapg.properties.IsChargedBack: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ArePaymentsOnHold"]) -> MetaOapg.properties.ArePaymentsOnHold: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ScpFundingPercent"]) -> MetaOapg.properties.ScpFundingPercent: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["FundingStatus"]) -> 'MoneyFlows': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["TestMode"]) -> 'TestModes': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["CreationDateTime"]) -> MetaOapg.properties.CreationDateTime: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["LifeTimeUrlExpirationTime"]) -> MetaOapg.properties.LifeTimeUrlExpirationTime: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["IsInAutoRetry"]) -> MetaOapg.properties.IsInAutoRetry: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["AllowCardUpdateOnSplititPortals"]) -> MetaOapg.properties.AllowCardUpdateOnSplititPortals: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["InstallmentsScheduleInterval"]) -> MetaOapg.properties.InstallmentsScheduleInterval: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["InstallmentPlanNumber"]) -> typing.Union[MetaOapg.properties.InstallmentPlanNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["InstallmentPlanStatus"]) -> typing.Union['ReferenceEntityBase', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Amount"]) -> typing.Union['Money', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["OutstandingAmount"]) -> typing.Union['Money', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Disputes"]) -> typing.Union['Disputes', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["OriginalAmount"]) -> typing.Union['Money', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["RefundAmount"]) -> typing.Union['Money', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Consumer"]) -> typing.Union['ConsumerData', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ActiveCard"]) -> typing.Union['CardData2', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["FraudCheck"]) -> typing.Union['FraudCheck', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Terminal"]) -> typing.Union['TerminalRef', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Merchant"]) -> typing.Union['MerchantRef', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["RefOrderNumber"]) -> typing.Union[MetaOapg.properties.RefOrderNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["PurchaseMethod"]) -> typing.Union['ReferenceEntityBase', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Strategy"]) -> typing.Union['ReferenceEntityBase', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["DelayResolution"]) -> typing.Union['ReferenceEntityBase', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ExtendedParams"]) -> typing.Union['InstallmentPlanExtendedParams', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Installments"]) -> typing.Union[MetaOapg.properties.Installments, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["SecureAuthorizations"]) -> typing.Union[MetaOapg.properties.SecureAuthorizations, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["LogoUrl"]) -> typing.Union[MetaOapg.properties.LogoUrl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["PaymentMethod"]) -> typing.Union[MetaOapg.properties.PaymentMethod, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["OnHoldLastOpenDate"]) -> typing.Union[MetaOapg.properties.OnHoldLastOpenDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["OnHoldLastOpenUserId"]) -> typing.Union[MetaOapg.properties.OnHoldLastOpenUserId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ExternalPaymentProvider"]) -> typing.Union['ExternalProviderTypes', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["NumberOfInstallments", "NumberOfProcessedInstallments", "IsFullCaptured", "IsChargedBack", "ArePaymentsOnHold", "ScpFundingPercent", "FundingStatus", "TestMode", "CreationDateTime", "LifeTimeUrlExpirationTime", "IsInAutoRetry", "AllowCardUpdateOnSplititPortals", "InstallmentsScheduleInterval", "InstallmentPlanNumber", "InstallmentPlanStatus", "Amount", "OutstandingAmount", "Disputes", "OriginalAmount", "RefundAmount", "Consumer", "ActiveCard", "FraudCheck", "Terminal", "Merchant", "RefOrderNumber", "PurchaseMethod", "Strategy", "DelayResolution", "ExtendedParams", "Installments", "SecureAuthorizations", "LogoUrl", "PaymentMethod", "OnHoldLastOpenDate", "OnHoldLastOpenUserId", "ExternalPaymentProvider", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        IsInAutoRetry: typing.Union[MetaOapg.properties.IsInAutoRetry, bool, ],
        ScpFundingPercent: typing.Union[MetaOapg.properties.ScpFundingPercent, decimal.Decimal, int, float, ],
        IsFullCaptured: typing.Union[MetaOapg.properties.IsFullCaptured, bool, ],
        IsChargedBack: typing.Union[MetaOapg.properties.IsChargedBack, bool, ],
        TestMode: 'TestModes',
        LifeTimeUrlExpirationTime: typing.Union[MetaOapg.properties.LifeTimeUrlExpirationTime, str, datetime, ],
        AllowCardUpdateOnSplititPortals: typing.Union[MetaOapg.properties.AllowCardUpdateOnSplititPortals, bool, ],
        NumberOfInstallments: typing.Union[MetaOapg.properties.NumberOfInstallments, decimal.Decimal, int, ],
        FundingStatus: 'MoneyFlows',
        CreationDateTime: typing.Union[MetaOapg.properties.CreationDateTime, str, datetime, ],
        NumberOfProcessedInstallments: typing.Union[MetaOapg.properties.NumberOfProcessedInstallments, decimal.Decimal, int, ],
        ArePaymentsOnHold: typing.Union[MetaOapg.properties.ArePaymentsOnHold, bool, ],
        InstallmentsScheduleInterval: typing.Union[MetaOapg.properties.InstallmentsScheduleInterval, decimal.Decimal, int, ],
        InstallmentPlanNumber: typing.Union[MetaOapg.properties.InstallmentPlanNumber, str, schemas.Unset] = schemas.unset,
        InstallmentPlanStatus: typing.Union['ReferenceEntityBase', schemas.Unset] = schemas.unset,
        Amount: typing.Union['Money', schemas.Unset] = schemas.unset,
        OutstandingAmount: typing.Union['Money', schemas.Unset] = schemas.unset,
        Disputes: typing.Union['Disputes', schemas.Unset] = schemas.unset,
        OriginalAmount: typing.Union['Money', schemas.Unset] = schemas.unset,
        RefundAmount: typing.Union['Money', schemas.Unset] = schemas.unset,
        Consumer: typing.Union['ConsumerData', schemas.Unset] = schemas.unset,
        ActiveCard: typing.Union['CardData2', schemas.Unset] = schemas.unset,
        FraudCheck: typing.Union['FraudCheck', schemas.Unset] = schemas.unset,
        Terminal: typing.Union['TerminalRef', schemas.Unset] = schemas.unset,
        Merchant: typing.Union['MerchantRef', schemas.Unset] = schemas.unset,
        RefOrderNumber: typing.Union[MetaOapg.properties.RefOrderNumber, str, schemas.Unset] = schemas.unset,
        PurchaseMethod: typing.Union['ReferenceEntityBase', schemas.Unset] = schemas.unset,
        Strategy: typing.Union['ReferenceEntityBase', schemas.Unset] = schemas.unset,
        DelayResolution: typing.Union['ReferenceEntityBase', schemas.Unset] = schemas.unset,
        ExtendedParams: typing.Union['InstallmentPlanExtendedParams', schemas.Unset] = schemas.unset,
        Installments: typing.Union[MetaOapg.properties.Installments, list, tuple, schemas.Unset] = schemas.unset,
        SecureAuthorizations: typing.Union[MetaOapg.properties.SecureAuthorizations, list, tuple, schemas.Unset] = schemas.unset,
        LogoUrl: typing.Union[MetaOapg.properties.LogoUrl, str, schemas.Unset] = schemas.unset,
        PaymentMethod: typing.Union[MetaOapg.properties.PaymentMethod, str, schemas.Unset] = schemas.unset,
        OnHoldLastOpenDate: typing.Union[MetaOapg.properties.OnHoldLastOpenDate, str, datetime, schemas.Unset] = schemas.unset,
        OnHoldLastOpenUserId: typing.Union[MetaOapg.properties.OnHoldLastOpenUserId, str, schemas.Unset] = schemas.unset,
        ExternalPaymentProvider: typing.Union['ExternalProviderTypes', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'InstallmentPlan':
        return super().__new__(
            cls,
            *args,
            IsInAutoRetry=IsInAutoRetry,
            ScpFundingPercent=ScpFundingPercent,
            IsFullCaptured=IsFullCaptured,
            IsChargedBack=IsChargedBack,
            TestMode=TestMode,
            LifeTimeUrlExpirationTime=LifeTimeUrlExpirationTime,
            AllowCardUpdateOnSplititPortals=AllowCardUpdateOnSplititPortals,
            NumberOfInstallments=NumberOfInstallments,
            FundingStatus=FundingStatus,
            CreationDateTime=CreationDateTime,
            NumberOfProcessedInstallments=NumberOfProcessedInstallments,
            ArePaymentsOnHold=ArePaymentsOnHold,
            InstallmentsScheduleInterval=InstallmentsScheduleInterval,
            InstallmentPlanNumber=InstallmentPlanNumber,
            InstallmentPlanStatus=InstallmentPlanStatus,
            Amount=Amount,
            OutstandingAmount=OutstandingAmount,
            Disputes=Disputes,
            OriginalAmount=OriginalAmount,
            RefundAmount=RefundAmount,
            Consumer=Consumer,
            ActiveCard=ActiveCard,
            FraudCheck=FraudCheck,
            Terminal=Terminal,
            Merchant=Merchant,
            RefOrderNumber=RefOrderNumber,
            PurchaseMethod=PurchaseMethod,
            Strategy=Strategy,
            DelayResolution=DelayResolution,
            ExtendedParams=ExtendedParams,
            Installments=Installments,
            SecureAuthorizations=SecureAuthorizations,
            LogoUrl=LogoUrl,
            PaymentMethod=PaymentMethod,
            OnHoldLastOpenDate=OnHoldLastOpenDate,
            OnHoldLastOpenUserId=OnHoldLastOpenUserId,
            ExternalPaymentProvider=ExternalPaymentProvider,
            _configuration=_configuration,
            **kwargs,
        )

from splitit_client.model.card_data2 import CardData2
from splitit_client.model.consumer_data import ConsumerData
from splitit_client.model.disputes import Disputes
from splitit_client.model.external_provider_types import ExternalProviderTypes
from splitit_client.model.fraud_check import FraudCheck
from splitit_client.model.installment2 import Installment2
from splitit_client.model.installment_plan_extended_params import InstallmentPlanExtendedParams
from splitit_client.model.merchant_ref import MerchantRef
from splitit_client.model.money import Money
from splitit_client.model.money_flows import MoneyFlows
from splitit_client.model.re_authorization import ReAuthorization
from splitit_client.model.reference_entity_base import ReferenceEntityBase
from splitit_client.model.terminal_ref import TerminalRef
from splitit_client.model.test_modes import TestModes
