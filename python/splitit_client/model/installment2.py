# coding: utf-8

"""
    splitit-web-api-v3

    Splitit's Web API

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from splitit_client import schemas  # noqa: F401


class Installment2(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "InstallmentNumber",
            "IsRefund",
            "CreatedDateTime",
        }
        
        class properties:
            InstallmentNumber = schemas.Int32Schema
            IsRefund = schemas.BoolSchema
            CreatedDateTime = schemas.DateTimeSchema
            InstallmentId = schemas.StrSchema
        
            @staticmethod
            def Amount() -> typing.Type['Money']:
                return Money
        
            @staticmethod
            def OriginalAmount() -> typing.Type['Money']:
                return Money
        
            @staticmethod
            def RefundAmount() -> typing.Type['Money']:
                return Money
            ProcessDateTime = schemas.DateTimeSchema
        
            @staticmethod
            def RequiredCredit() -> typing.Type['Money']:
                return Money
        
            @staticmethod
            def Status() -> typing.Type['ReferenceEntityBase']:
                return ReferenceEntityBase
            
            
            class TransactionResults(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['TransactionResult']:
                        return TransactionResult
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['TransactionResult'], typing.List['TransactionResult']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'TransactionResults':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'TransactionResult':
                    return super().__getitem__(i)
        
            @staticmethod
            def CardDetails() -> typing.Type['CardData2']:
                return CardData2
            Result = schemas.BoolSchema
            PaymentMethod = schemas.StrSchema
            __annotations__ = {
                "InstallmentNumber": InstallmentNumber,
                "IsRefund": IsRefund,
                "CreatedDateTime": CreatedDateTime,
                "InstallmentId": InstallmentId,
                "Amount": Amount,
                "OriginalAmount": OriginalAmount,
                "RefundAmount": RefundAmount,
                "ProcessDateTime": ProcessDateTime,
                "RequiredCredit": RequiredCredit,
                "Status": Status,
                "TransactionResults": TransactionResults,
                "CardDetails": CardDetails,
                "Result": Result,
                "PaymentMethod": PaymentMethod,
            }
    
    InstallmentNumber: MetaOapg.properties.InstallmentNumber
    IsRefund: MetaOapg.properties.IsRefund
    CreatedDateTime: MetaOapg.properties.CreatedDateTime
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["InstallmentNumber"]) -> MetaOapg.properties.InstallmentNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["IsRefund"]) -> MetaOapg.properties.IsRefund: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["CreatedDateTime"]) -> MetaOapg.properties.CreatedDateTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["InstallmentId"]) -> MetaOapg.properties.InstallmentId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Amount"]) -> 'Money': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["OriginalAmount"]) -> 'Money': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["RefundAmount"]) -> 'Money': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ProcessDateTime"]) -> MetaOapg.properties.ProcessDateTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["RequiredCredit"]) -> 'Money': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Status"]) -> 'ReferenceEntityBase': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["TransactionResults"]) -> MetaOapg.properties.TransactionResults: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["CardDetails"]) -> 'CardData2': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Result"]) -> MetaOapg.properties.Result: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["PaymentMethod"]) -> MetaOapg.properties.PaymentMethod: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["InstallmentNumber", "IsRefund", "CreatedDateTime", "InstallmentId", "Amount", "OriginalAmount", "RefundAmount", "ProcessDateTime", "RequiredCredit", "Status", "TransactionResults", "CardDetails", "Result", "PaymentMethod", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["InstallmentNumber"]) -> MetaOapg.properties.InstallmentNumber: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["IsRefund"]) -> MetaOapg.properties.IsRefund: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["CreatedDateTime"]) -> MetaOapg.properties.CreatedDateTime: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["InstallmentId"]) -> typing.Union[MetaOapg.properties.InstallmentId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Amount"]) -> typing.Union['Money', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["OriginalAmount"]) -> typing.Union['Money', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["RefundAmount"]) -> typing.Union['Money', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ProcessDateTime"]) -> typing.Union[MetaOapg.properties.ProcessDateTime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["RequiredCredit"]) -> typing.Union['Money', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Status"]) -> typing.Union['ReferenceEntityBase', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["TransactionResults"]) -> typing.Union[MetaOapg.properties.TransactionResults, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["CardDetails"]) -> typing.Union['CardData2', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Result"]) -> typing.Union[MetaOapg.properties.Result, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["PaymentMethod"]) -> typing.Union[MetaOapg.properties.PaymentMethod, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["InstallmentNumber", "IsRefund", "CreatedDateTime", "InstallmentId", "Amount", "OriginalAmount", "RefundAmount", "ProcessDateTime", "RequiredCredit", "Status", "TransactionResults", "CardDetails", "Result", "PaymentMethod", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        InstallmentNumber: typing.Union[MetaOapg.properties.InstallmentNumber, decimal.Decimal, int, ],
        IsRefund: typing.Union[MetaOapg.properties.IsRefund, bool, ],
        CreatedDateTime: typing.Union[MetaOapg.properties.CreatedDateTime, str, datetime, ],
        InstallmentId: typing.Union[MetaOapg.properties.InstallmentId, str, schemas.Unset] = schemas.unset,
        Amount: typing.Union['Money', schemas.Unset] = schemas.unset,
        OriginalAmount: typing.Union['Money', schemas.Unset] = schemas.unset,
        RefundAmount: typing.Union['Money', schemas.Unset] = schemas.unset,
        ProcessDateTime: typing.Union[MetaOapg.properties.ProcessDateTime, str, datetime, schemas.Unset] = schemas.unset,
        RequiredCredit: typing.Union['Money', schemas.Unset] = schemas.unset,
        Status: typing.Union['ReferenceEntityBase', schemas.Unset] = schemas.unset,
        TransactionResults: typing.Union[MetaOapg.properties.TransactionResults, list, tuple, schemas.Unset] = schemas.unset,
        CardDetails: typing.Union['CardData2', schemas.Unset] = schemas.unset,
        Result: typing.Union[MetaOapg.properties.Result, bool, schemas.Unset] = schemas.unset,
        PaymentMethod: typing.Union[MetaOapg.properties.PaymentMethod, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Installment2':
        return super().__new__(
            cls,
            *args,
            InstallmentNumber=InstallmentNumber,
            IsRefund=IsRefund,
            CreatedDateTime=CreatedDateTime,
            InstallmentId=InstallmentId,
            Amount=Amount,
            OriginalAmount=OriginalAmount,
            RefundAmount=RefundAmount,
            ProcessDateTime=ProcessDateTime,
            RequiredCredit=RequiredCredit,
            Status=Status,
            TransactionResults=TransactionResults,
            CardDetails=CardDetails,
            Result=Result,
            PaymentMethod=PaymentMethod,
            _configuration=_configuration,
            **kwargs,
        )

from splitit_client.model.card_data2 import CardData2
from splitit_client.model.money import Money
from splitit_client.model.reference_entity_base import ReferenceEntityBase
from splitit_client.model.transaction_result import TransactionResult
