# coding: utf-8

"""
    splitit-web-api-v3

    Splitit's Web API

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from splitit_client import schemas  # noqa: F401


class ResponseHeader(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "Succeeded",
        }
        
        class properties:
            Succeeded = schemas.BoolSchema
            
            
            class Errors(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Error2']:
                        return Error2
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Error2'], typing.List['Error2']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'Errors':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Error2':
                    return super().__getitem__(i)
            TraceId = schemas.StrSchema
            __annotations__ = {
                "Succeeded": Succeeded,
                "Errors": Errors,
                "TraceId": TraceId,
            }
    
    Succeeded: MetaOapg.properties.Succeeded
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Succeeded"]) -> MetaOapg.properties.Succeeded: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Errors"]) -> MetaOapg.properties.Errors: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["TraceId"]) -> MetaOapg.properties.TraceId: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["Succeeded", "Errors", "TraceId", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Succeeded"]) -> MetaOapg.properties.Succeeded: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Errors"]) -> typing.Union[MetaOapg.properties.Errors, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["TraceId"]) -> typing.Union[MetaOapg.properties.TraceId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["Succeeded", "Errors", "TraceId", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        Succeeded: typing.Union[MetaOapg.properties.Succeeded, bool, ],
        Errors: typing.Union[MetaOapg.properties.Errors, list, tuple, schemas.Unset] = schemas.unset,
        TraceId: typing.Union[MetaOapg.properties.TraceId, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ResponseHeader':
        return super().__new__(
            cls,
            *args,
            Succeeded=Succeeded,
            Errors=Errors,
            TraceId=TraceId,
            _configuration=_configuration,
            **kwargs,
        )

from splitit_client.model.error2 import Error2
