# coding: utf-8

"""
    splitit-web-api-v3

    Splitit's Web API

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from splitit_client import schemas  # noqa: F401


class CardData2(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            CardId = schemas.StrSchema
            CardNumber = schemas.StrSchema
            CardExpMonth = schemas.StrSchema
            CardExpYear = schemas.StrSchema
        
            @staticmethod
            def CardBrand() -> typing.Type['ReferenceEntityBase']:
                return ReferenceEntityBase
        
            @staticmethod
            def CardType() -> typing.Type['ReferenceEntityBase']:
                return ReferenceEntityBase
            Bin = schemas.StrSchema
            CardHolderFullName = schemas.StrSchema
            CardCvv = schemas.StrSchema
        
            @staticmethod
            def Address() -> typing.Type['AddressData2']:
                return AddressData2
            Token = schemas.StrSchema
            __annotations__ = {
                "CardId": CardId,
                "CardNumber": CardNumber,
                "CardExpMonth": CardExpMonth,
                "CardExpYear": CardExpYear,
                "CardBrand": CardBrand,
                "CardType": CardType,
                "Bin": Bin,
                "CardHolderFullName": CardHolderFullName,
                "CardCvv": CardCvv,
                "Address": Address,
                "Token": Token,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["CardId"]) -> MetaOapg.properties.CardId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["CardNumber"]) -> MetaOapg.properties.CardNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["CardExpMonth"]) -> MetaOapg.properties.CardExpMonth: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["CardExpYear"]) -> MetaOapg.properties.CardExpYear: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["CardBrand"]) -> 'ReferenceEntityBase': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["CardType"]) -> 'ReferenceEntityBase': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Bin"]) -> MetaOapg.properties.Bin: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["CardHolderFullName"]) -> MetaOapg.properties.CardHolderFullName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["CardCvv"]) -> MetaOapg.properties.CardCvv: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Address"]) -> 'AddressData2': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Token"]) -> MetaOapg.properties.Token: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["CardId", "CardNumber", "CardExpMonth", "CardExpYear", "CardBrand", "CardType", "Bin", "CardHolderFullName", "CardCvv", "Address", "Token", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["CardId"]) -> typing.Union[MetaOapg.properties.CardId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["CardNumber"]) -> typing.Union[MetaOapg.properties.CardNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["CardExpMonth"]) -> typing.Union[MetaOapg.properties.CardExpMonth, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["CardExpYear"]) -> typing.Union[MetaOapg.properties.CardExpYear, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["CardBrand"]) -> typing.Union['ReferenceEntityBase', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["CardType"]) -> typing.Union['ReferenceEntityBase', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Bin"]) -> typing.Union[MetaOapg.properties.Bin, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["CardHolderFullName"]) -> typing.Union[MetaOapg.properties.CardHolderFullName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["CardCvv"]) -> typing.Union[MetaOapg.properties.CardCvv, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Address"]) -> typing.Union['AddressData2', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Token"]) -> typing.Union[MetaOapg.properties.Token, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["CardId", "CardNumber", "CardExpMonth", "CardExpYear", "CardBrand", "CardType", "Bin", "CardHolderFullName", "CardCvv", "Address", "Token", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        CardId: typing.Union[MetaOapg.properties.CardId, str, schemas.Unset] = schemas.unset,
        CardNumber: typing.Union[MetaOapg.properties.CardNumber, str, schemas.Unset] = schemas.unset,
        CardExpMonth: typing.Union[MetaOapg.properties.CardExpMonth, str, schemas.Unset] = schemas.unset,
        CardExpYear: typing.Union[MetaOapg.properties.CardExpYear, str, schemas.Unset] = schemas.unset,
        CardBrand: typing.Union['ReferenceEntityBase', schemas.Unset] = schemas.unset,
        CardType: typing.Union['ReferenceEntityBase', schemas.Unset] = schemas.unset,
        Bin: typing.Union[MetaOapg.properties.Bin, str, schemas.Unset] = schemas.unset,
        CardHolderFullName: typing.Union[MetaOapg.properties.CardHolderFullName, str, schemas.Unset] = schemas.unset,
        CardCvv: typing.Union[MetaOapg.properties.CardCvv, str, schemas.Unset] = schemas.unset,
        Address: typing.Union['AddressData2', schemas.Unset] = schemas.unset,
        Token: typing.Union[MetaOapg.properties.Token, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CardData2':
        return super().__new__(
            cls,
            *args,
            CardId=CardId,
            CardNumber=CardNumber,
            CardExpMonth=CardExpMonth,
            CardExpYear=CardExpYear,
            CardBrand=CardBrand,
            CardType=CardType,
            Bin=Bin,
            CardHolderFullName=CardHolderFullName,
            CardCvv=CardCvv,
            Address=Address,
            Token=Token,
            _configuration=_configuration,
            **kwargs,
        )

from splitit_client.model.address_data2 import AddressData2
from splitit_client.model.reference_entity_base import ReferenceEntityBase
