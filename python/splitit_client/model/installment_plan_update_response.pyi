# coding: utf-8

"""
    splitit-web-api-v3

    Splitit's Web API

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from splitit_client import schemas  # noqa: F401


class InstallmentPlanUpdateResponse(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by Konfig.
    Ref: https://konfigthis.com

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "Status",
            "ShippingStatus",
        }
        
        class properties:
        
            @staticmethod
            def Status() -> typing.Type['PlanStatus']:
                return PlanStatus
        
            @staticmethod
            def ShippingStatus() -> typing.Type['ShippingStatus']:
                return ShippingStatus
            RefOrderNumber = schemas.StrSchema
            InstallmentPlanNumber = schemas.StrSchema
            __annotations__ = {
                "Status": Status,
                "ShippingStatus": ShippingStatus,
                "RefOrderNumber": RefOrderNumber,
                "InstallmentPlanNumber": InstallmentPlanNumber,
            }
    
    Status: 'PlanStatus'
    ShippingStatus: 'ShippingStatus'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Status"]) -> 'PlanStatus': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ShippingStatus"]) -> 'ShippingStatus': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["RefOrderNumber"]) -> MetaOapg.properties.RefOrderNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["InstallmentPlanNumber"]) -> MetaOapg.properties.InstallmentPlanNumber: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["Status", "ShippingStatus", "RefOrderNumber", "InstallmentPlanNumber", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Status"]) -> 'PlanStatus': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ShippingStatus"]) -> 'ShippingStatus': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["RefOrderNumber"]) -> typing.Union[MetaOapg.properties.RefOrderNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["InstallmentPlanNumber"]) -> typing.Union[MetaOapg.properties.InstallmentPlanNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["Status", "ShippingStatus", "RefOrderNumber", "InstallmentPlanNumber", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        Status: 'PlanStatus',
        ShippingStatus: 'ShippingStatus',
        RefOrderNumber: typing.Union[MetaOapg.properties.RefOrderNumber, str, schemas.Unset] = schemas.unset,
        InstallmentPlanNumber: typing.Union[MetaOapg.properties.InstallmentPlanNumber, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'InstallmentPlanUpdateResponse':
        return super().__new__(
            cls,
            *args,
            Status=Status,
            ShippingStatus=ShippingStatus,
            RefOrderNumber=RefOrderNumber,
            InstallmentPlanNumber=InstallmentPlanNumber,
            _configuration=_configuration,
            **kwargs,
        )

from splitit_client.model.plan_status import PlanStatus
from splitit_client.model.shipping_status import ShippingStatus
