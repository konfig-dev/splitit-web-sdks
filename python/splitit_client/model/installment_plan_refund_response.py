# coding: utf-8

"""
    splitit-web-api-v3

    Splitit's Web API

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from splitit_client import schemas  # noqa: F401


class InstallmentPlanRefundResponse(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            RefundId = schemas.StrSchema
            InstallmentPlanNumber = schemas.StrSchema
            Currency = schemas.StrSchema
            NonCreditRefundAmount = schemas.NumberSchema
            CreditRefundAmount = schemas.NumberSchema
        
            @staticmethod
            def Summary() -> typing.Type['RefundSummary']:
                return RefundSummary
            __annotations__ = {
                "RefundId": RefundId,
                "InstallmentPlanNumber": InstallmentPlanNumber,
                "Currency": Currency,
                "NonCreditRefundAmount": NonCreditRefundAmount,
                "CreditRefundAmount": CreditRefundAmount,
                "Summary": Summary,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["RefundId"]) -> MetaOapg.properties.RefundId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["InstallmentPlanNumber"]) -> MetaOapg.properties.InstallmentPlanNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Currency"]) -> MetaOapg.properties.Currency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["NonCreditRefundAmount"]) -> MetaOapg.properties.NonCreditRefundAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["CreditRefundAmount"]) -> MetaOapg.properties.CreditRefundAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Summary"]) -> 'RefundSummary': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["RefundId", "InstallmentPlanNumber", "Currency", "NonCreditRefundAmount", "CreditRefundAmount", "Summary", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["RefundId"]) -> typing.Union[MetaOapg.properties.RefundId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["InstallmentPlanNumber"]) -> typing.Union[MetaOapg.properties.InstallmentPlanNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Currency"]) -> typing.Union[MetaOapg.properties.Currency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["NonCreditRefundAmount"]) -> typing.Union[MetaOapg.properties.NonCreditRefundAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["CreditRefundAmount"]) -> typing.Union[MetaOapg.properties.CreditRefundAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Summary"]) -> typing.Union['RefundSummary', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["RefundId", "InstallmentPlanNumber", "Currency", "NonCreditRefundAmount", "CreditRefundAmount", "Summary", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        RefundId: typing.Union[MetaOapg.properties.RefundId, str, schemas.Unset] = schemas.unset,
        InstallmentPlanNumber: typing.Union[MetaOapg.properties.InstallmentPlanNumber, str, schemas.Unset] = schemas.unset,
        Currency: typing.Union[MetaOapg.properties.Currency, str, schemas.Unset] = schemas.unset,
        NonCreditRefundAmount: typing.Union[MetaOapg.properties.NonCreditRefundAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        CreditRefundAmount: typing.Union[MetaOapg.properties.CreditRefundAmount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        Summary: typing.Union['RefundSummary', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'InstallmentPlanRefundResponse':
        return super().__new__(
            cls,
            *args,
            RefundId=RefundId,
            InstallmentPlanNumber=InstallmentPlanNumber,
            Currency=Currency,
            NonCreditRefundAmount=NonCreditRefundAmount,
            CreditRefundAmount=CreditRefundAmount,
            Summary=Summary,
            _configuration=_configuration,
            **kwargs,
        )

from splitit_client.model.refund_summary import RefundSummary
