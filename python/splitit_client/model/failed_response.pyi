# coding: utf-8

"""
    splitit-web-api-v3

    Splitit's Web API

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from splitit_client import schemas  # noqa: F401


class FailedResponse(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by Konfig.
    Ref: https://konfigthis.com

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            TraceId = schemas.StrSchema
        
            @staticmethod
            def Error() -> typing.Type['ErrorExtended']:
                return ErrorExtended
            __annotations__ = {
                "TraceId": TraceId,
                "Error": Error,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["TraceId"]) -> MetaOapg.properties.TraceId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Error"]) -> 'ErrorExtended': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["TraceId", "Error", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["TraceId"]) -> typing.Union[MetaOapg.properties.TraceId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Error"]) -> typing.Union['ErrorExtended', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["TraceId", "Error", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        TraceId: typing.Union[MetaOapg.properties.TraceId, str, schemas.Unset] = schemas.unset,
        Error: typing.Union['ErrorExtended', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'FailedResponse':
        return super().__new__(
            cls,
            *args,
            TraceId=TraceId,
            Error=Error,
            _configuration=_configuration,
            **kwargs,
        )

from splitit_client.model.error_extended import ErrorExtended
