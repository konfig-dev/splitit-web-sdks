# coding: utf-8

"""
    splitit-web-api-v3

    Splitit's Web API

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from splitit_client import schemas  # noqa: F401


class PaymentMethodModel(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "Type",
        }
        
        class properties:
        
            @staticmethod
            def Type() -> typing.Type['PaymentMethodType']:
                return PaymentMethodType
        
            @staticmethod
            def Card() -> typing.Type['CardData']:
                return CardData
            Token = schemas.StrSchema
        
            @staticmethod
            def BluesnapVaultedShopperToken() -> typing.Type['BluesnapVaultedShopperToken']:
                return BluesnapVaultedShopperToken
        
            @staticmethod
            def MockerShopperToken() -> typing.Type['MockerShopperToken']:
                return MockerShopperToken
        
            @staticmethod
            def SpreedlyToken() -> typing.Type['SpreedlyToken']:
                return SpreedlyToken
            __annotations__ = {
                "Type": Type,
                "Card": Card,
                "Token": Token,
                "BluesnapVaultedShopperToken": BluesnapVaultedShopperToken,
                "MockerShopperToken": MockerShopperToken,
                "SpreedlyToken": SpreedlyToken,
            }
    
    Type: 'PaymentMethodType'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Type"]) -> 'PaymentMethodType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Card"]) -> 'CardData': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Token"]) -> MetaOapg.properties.Token: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["BluesnapVaultedShopperToken"]) -> 'BluesnapVaultedShopperToken': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["MockerShopperToken"]) -> 'MockerShopperToken': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["SpreedlyToken"]) -> 'SpreedlyToken': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["Type", "Card", "Token", "BluesnapVaultedShopperToken", "MockerShopperToken", "SpreedlyToken", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Type"]) -> 'PaymentMethodType': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Card"]) -> typing.Union['CardData', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Token"]) -> typing.Union[MetaOapg.properties.Token, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["BluesnapVaultedShopperToken"]) -> typing.Union['BluesnapVaultedShopperToken', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["MockerShopperToken"]) -> typing.Union['MockerShopperToken', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["SpreedlyToken"]) -> typing.Union['SpreedlyToken', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["Type", "Card", "Token", "BluesnapVaultedShopperToken", "MockerShopperToken", "SpreedlyToken", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        Type: 'PaymentMethodType',
        Card: typing.Union['CardData', schemas.Unset] = schemas.unset,
        Token: typing.Union[MetaOapg.properties.Token, str, schemas.Unset] = schemas.unset,
        BluesnapVaultedShopperToken: typing.Union['BluesnapVaultedShopperToken', schemas.Unset] = schemas.unset,
        MockerShopperToken: typing.Union['MockerShopperToken', schemas.Unset] = schemas.unset,
        SpreedlyToken: typing.Union['SpreedlyToken', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PaymentMethodModel':
        return super().__new__(
            cls,
            *args,
            Type=Type,
            Card=Card,
            Token=Token,
            BluesnapVaultedShopperToken=BluesnapVaultedShopperToken,
            MockerShopperToken=MockerShopperToken,
            SpreedlyToken=SpreedlyToken,
            _configuration=_configuration,
            **kwargs,
        )

from splitit_client.model.bluesnap_vaulted_shopper_token import BluesnapVaultedShopperToken
from splitit_client.model.card_data import CardData
from splitit_client.model.mocker_shopper_token import MockerShopperToken
from splitit_client.model.payment_method_type import PaymentMethodType
from splitit_client.model.spreedly_token import SpreedlyToken
