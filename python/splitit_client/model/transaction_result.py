# coding: utf-8

"""
    splitit-web-api-v3

    Splitit's Web API

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from splitit_client import schemas  # noqa: F401


class TransactionResult(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "GatewayTransactionDate",
            "SplititTransactionId",
            "GatewayResult",
            "IsChargeback",
        }
        
        class properties:
            SplititTransactionId = schemas.Int64Schema
            GatewayResult = schemas.BoolSchema
            GatewayTransactionDate = schemas.DateTimeSchema
            IsChargeback = schemas.BoolSchema
            GatewayTransactionId = schemas.StrSchema
            SplititGatewayTransactionId = schemas.StrSchema
            GatewayResultCode = schemas.StrSchema
            GatewayResultMessage = schemas.StrSchema
        
            @staticmethod
            def OperationType() -> typing.Type['ReferenceEntityBase']:
                return ReferenceEntityBase
        
            @staticmethod
            def AVSResult() -> typing.Type['CardResult']:
                return CardResult
        
            @staticmethod
            def CVCResult() -> typing.Type['CardResult']:
                return CardResult
            IsInDispute = schemas.BoolSchema
        
            @staticmethod
            def DisputeStatus() -> typing.Type['DisputeStatus']:
                return DisputeStatus
            __annotations__ = {
                "SplititTransactionId": SplititTransactionId,
                "GatewayResult": GatewayResult,
                "GatewayTransactionDate": GatewayTransactionDate,
                "IsChargeback": IsChargeback,
                "GatewayTransactionId": GatewayTransactionId,
                "SplititGatewayTransactionId": SplititGatewayTransactionId,
                "GatewayResultCode": GatewayResultCode,
                "GatewayResultMessage": GatewayResultMessage,
                "OperationType": OperationType,
                "AVSResult": AVSResult,
                "CVCResult": CVCResult,
                "IsInDispute": IsInDispute,
                "DisputeStatus": DisputeStatus,
            }
    
    GatewayTransactionDate: MetaOapg.properties.GatewayTransactionDate
    SplititTransactionId: MetaOapg.properties.SplititTransactionId
    GatewayResult: MetaOapg.properties.GatewayResult
    IsChargeback: MetaOapg.properties.IsChargeback
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["SplititTransactionId"]) -> MetaOapg.properties.SplititTransactionId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["GatewayResult"]) -> MetaOapg.properties.GatewayResult: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["GatewayTransactionDate"]) -> MetaOapg.properties.GatewayTransactionDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["IsChargeback"]) -> MetaOapg.properties.IsChargeback: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["GatewayTransactionId"]) -> MetaOapg.properties.GatewayTransactionId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["SplititGatewayTransactionId"]) -> MetaOapg.properties.SplititGatewayTransactionId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["GatewayResultCode"]) -> MetaOapg.properties.GatewayResultCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["GatewayResultMessage"]) -> MetaOapg.properties.GatewayResultMessage: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["OperationType"]) -> 'ReferenceEntityBase': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["AVSResult"]) -> 'CardResult': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["CVCResult"]) -> 'CardResult': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["IsInDispute"]) -> MetaOapg.properties.IsInDispute: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["DisputeStatus"]) -> 'DisputeStatus': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["SplititTransactionId", "GatewayResult", "GatewayTransactionDate", "IsChargeback", "GatewayTransactionId", "SplititGatewayTransactionId", "GatewayResultCode", "GatewayResultMessage", "OperationType", "AVSResult", "CVCResult", "IsInDispute", "DisputeStatus", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["SplititTransactionId"]) -> MetaOapg.properties.SplititTransactionId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["GatewayResult"]) -> MetaOapg.properties.GatewayResult: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["GatewayTransactionDate"]) -> MetaOapg.properties.GatewayTransactionDate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["IsChargeback"]) -> MetaOapg.properties.IsChargeback: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["GatewayTransactionId"]) -> typing.Union[MetaOapg.properties.GatewayTransactionId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["SplititGatewayTransactionId"]) -> typing.Union[MetaOapg.properties.SplititGatewayTransactionId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["GatewayResultCode"]) -> typing.Union[MetaOapg.properties.GatewayResultCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["GatewayResultMessage"]) -> typing.Union[MetaOapg.properties.GatewayResultMessage, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["OperationType"]) -> typing.Union['ReferenceEntityBase', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["AVSResult"]) -> typing.Union['CardResult', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["CVCResult"]) -> typing.Union['CardResult', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["IsInDispute"]) -> typing.Union[MetaOapg.properties.IsInDispute, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["DisputeStatus"]) -> typing.Union['DisputeStatus', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["SplititTransactionId", "GatewayResult", "GatewayTransactionDate", "IsChargeback", "GatewayTransactionId", "SplititGatewayTransactionId", "GatewayResultCode", "GatewayResultMessage", "OperationType", "AVSResult", "CVCResult", "IsInDispute", "DisputeStatus", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        GatewayTransactionDate: typing.Union[MetaOapg.properties.GatewayTransactionDate, str, datetime, ],
        SplititTransactionId: typing.Union[MetaOapg.properties.SplititTransactionId, decimal.Decimal, int, ],
        GatewayResult: typing.Union[MetaOapg.properties.GatewayResult, bool, ],
        IsChargeback: typing.Union[MetaOapg.properties.IsChargeback, bool, ],
        GatewayTransactionId: typing.Union[MetaOapg.properties.GatewayTransactionId, str, schemas.Unset] = schemas.unset,
        SplititGatewayTransactionId: typing.Union[MetaOapg.properties.SplititGatewayTransactionId, str, schemas.Unset] = schemas.unset,
        GatewayResultCode: typing.Union[MetaOapg.properties.GatewayResultCode, str, schemas.Unset] = schemas.unset,
        GatewayResultMessage: typing.Union[MetaOapg.properties.GatewayResultMessage, str, schemas.Unset] = schemas.unset,
        OperationType: typing.Union['ReferenceEntityBase', schemas.Unset] = schemas.unset,
        AVSResult: typing.Union['CardResult', schemas.Unset] = schemas.unset,
        CVCResult: typing.Union['CardResult', schemas.Unset] = schemas.unset,
        IsInDispute: typing.Union[MetaOapg.properties.IsInDispute, bool, schemas.Unset] = schemas.unset,
        DisputeStatus: typing.Union['DisputeStatus', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TransactionResult':
        return super().__new__(
            cls,
            *args,
            GatewayTransactionDate=GatewayTransactionDate,
            SplititTransactionId=SplititTransactionId,
            GatewayResult=GatewayResult,
            IsChargeback=IsChargeback,
            GatewayTransactionId=GatewayTransactionId,
            SplititGatewayTransactionId=SplititGatewayTransactionId,
            GatewayResultCode=GatewayResultCode,
            GatewayResultMessage=GatewayResultMessage,
            OperationType=OperationType,
            AVSResult=AVSResult,
            CVCResult=CVCResult,
            IsInDispute=IsInDispute,
            DisputeStatus=DisputeStatus,
            _configuration=_configuration,
            **kwargs,
        )

from splitit_client.model.card_result import CardResult
from splitit_client.model.dispute_status import DisputeStatus
from splitit_client.model.reference_entity_base import ReferenceEntityBase
