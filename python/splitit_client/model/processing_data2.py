# coding: utf-8

"""
    splitit-web-api-v3

    Splitit's Web API

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from splitit_client import schemas  # noqa: F401


class ProcessingData2(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            AttemptThreeDSecured = schemas.BoolSchema
            SoftDescriptor = schemas.StrSchema
        
            @staticmethod
            def ThreeDSData() -> typing.Type['ThreeDSData2']:
                return ThreeDSData2
            __annotations__ = {
                "AttemptThreeDSecured": AttemptThreeDSecured,
                "SoftDescriptor": SoftDescriptor,
                "ThreeDSData": ThreeDSData,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["AttemptThreeDSecured"]) -> MetaOapg.properties.AttemptThreeDSecured: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["SoftDescriptor"]) -> MetaOapg.properties.SoftDescriptor: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ThreeDSData"]) -> 'ThreeDSData2': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["AttemptThreeDSecured", "SoftDescriptor", "ThreeDSData", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["AttemptThreeDSecured"]) -> typing.Union[MetaOapg.properties.AttemptThreeDSecured, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["SoftDescriptor"]) -> typing.Union[MetaOapg.properties.SoftDescriptor, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ThreeDSData"]) -> typing.Union['ThreeDSData2', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["AttemptThreeDSecured", "SoftDescriptor", "ThreeDSData", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        AttemptThreeDSecured: typing.Union[MetaOapg.properties.AttemptThreeDSecured, bool, schemas.Unset] = schemas.unset,
        SoftDescriptor: typing.Union[MetaOapg.properties.SoftDescriptor, str, schemas.Unset] = schemas.unset,
        ThreeDSData: typing.Union['ThreeDSData2', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ProcessingData2':
        return super().__new__(
            cls,
            *args,
            AttemptThreeDSecured=AttemptThreeDSecured,
            SoftDescriptor=SoftDescriptor,
            ThreeDSData=ThreeDSData,
            _configuration=_configuration,
            **kwargs,
        )

from splitit_client.model.three_ds_data2 import ThreeDSData2
