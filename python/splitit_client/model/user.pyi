# coding: utf-8

"""
    splitit-web-api-v3

    Splitit's Web API

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from splitit_client import schemas  # noqa: F401


class User(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "IsDataRestricted",
            "IsLocked",
            "IsDataPrivateRestricted",
        }
        
        class properties:
            IsLocked = schemas.BoolSchema
            IsDataRestricted = schemas.BoolSchema
            IsDataPrivateRestricted = schemas.BoolSchema
            Id = schemas.StrSchema
            UniqueId = schemas.StrSchema
            UserName = schemas.StrSchema
            FullName = schemas.StrSchema
            Email = schemas.StrSchema
            PhoneNumber = schemas.StrSchema
            CultureName = schemas.StrSchema
            RoleName = schemas.StrSchema
            __annotations__ = {
                "IsLocked": IsLocked,
                "IsDataRestricted": IsDataRestricted,
                "IsDataPrivateRestricted": IsDataPrivateRestricted,
                "Id": Id,
                "UniqueId": UniqueId,
                "UserName": UserName,
                "FullName": FullName,
                "Email": Email,
                "PhoneNumber": PhoneNumber,
                "CultureName": CultureName,
                "RoleName": RoleName,
            }
    
    IsDataRestricted: MetaOapg.properties.IsDataRestricted
    IsLocked: MetaOapg.properties.IsLocked
    IsDataPrivateRestricted: MetaOapg.properties.IsDataPrivateRestricted
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["IsLocked"]) -> MetaOapg.properties.IsLocked: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["IsDataRestricted"]) -> MetaOapg.properties.IsDataRestricted: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["IsDataPrivateRestricted"]) -> MetaOapg.properties.IsDataPrivateRestricted: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Id"]) -> MetaOapg.properties.Id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["UniqueId"]) -> MetaOapg.properties.UniqueId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["UserName"]) -> MetaOapg.properties.UserName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["FullName"]) -> MetaOapg.properties.FullName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Email"]) -> MetaOapg.properties.Email: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["PhoneNumber"]) -> MetaOapg.properties.PhoneNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["CultureName"]) -> MetaOapg.properties.CultureName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["RoleName"]) -> MetaOapg.properties.RoleName: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["IsLocked", "IsDataRestricted", "IsDataPrivateRestricted", "Id", "UniqueId", "UserName", "FullName", "Email", "PhoneNumber", "CultureName", "RoleName", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["IsLocked"]) -> MetaOapg.properties.IsLocked: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["IsDataRestricted"]) -> MetaOapg.properties.IsDataRestricted: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["IsDataPrivateRestricted"]) -> MetaOapg.properties.IsDataPrivateRestricted: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Id"]) -> typing.Union[MetaOapg.properties.Id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["UniqueId"]) -> typing.Union[MetaOapg.properties.UniqueId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["UserName"]) -> typing.Union[MetaOapg.properties.UserName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["FullName"]) -> typing.Union[MetaOapg.properties.FullName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Email"]) -> typing.Union[MetaOapg.properties.Email, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["PhoneNumber"]) -> typing.Union[MetaOapg.properties.PhoneNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["CultureName"]) -> typing.Union[MetaOapg.properties.CultureName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["RoleName"]) -> typing.Union[MetaOapg.properties.RoleName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["IsLocked", "IsDataRestricted", "IsDataPrivateRestricted", "Id", "UniqueId", "UserName", "FullName", "Email", "PhoneNumber", "CultureName", "RoleName", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        IsDataRestricted: typing.Union[MetaOapg.properties.IsDataRestricted, bool, ],
        IsLocked: typing.Union[MetaOapg.properties.IsLocked, bool, ],
        IsDataPrivateRestricted: typing.Union[MetaOapg.properties.IsDataPrivateRestricted, bool, ],
        Id: typing.Union[MetaOapg.properties.Id, str, schemas.Unset] = schemas.unset,
        UniqueId: typing.Union[MetaOapg.properties.UniqueId, str, schemas.Unset] = schemas.unset,
        UserName: typing.Union[MetaOapg.properties.UserName, str, schemas.Unset] = schemas.unset,
        FullName: typing.Union[MetaOapg.properties.FullName, str, schemas.Unset] = schemas.unset,
        Email: typing.Union[MetaOapg.properties.Email, str, schemas.Unset] = schemas.unset,
        PhoneNumber: typing.Union[MetaOapg.properties.PhoneNumber, str, schemas.Unset] = schemas.unset,
        CultureName: typing.Union[MetaOapg.properties.CultureName, str, schemas.Unset] = schemas.unset,
        RoleName: typing.Union[MetaOapg.properties.RoleName, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'User':
        return super().__new__(
            cls,
            *args,
            IsDataRestricted=IsDataRestricted,
            IsLocked=IsLocked,
            IsDataPrivateRestricted=IsDataPrivateRestricted,
            Id=Id,
            UniqueId=UniqueId,
            UserName=UserName,
            FullName=FullName,
            Email=Email,
            PhoneNumber=PhoneNumber,
            CultureName=CultureName,
            RoleName=RoleName,
            _configuration=_configuration,
            **kwargs,
        )
