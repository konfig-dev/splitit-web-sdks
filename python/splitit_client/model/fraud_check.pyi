# coding: utf-8

"""
    splitit-web-api-v3

    Splitit's Web API

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from splitit_client import schemas  # noqa: F401


class FraudCheck(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def FraudCheckResult() -> typing.Type['ReferenceEntityBase']:
                return ReferenceEntityBase
            ProviderResultCode = schemas.StrSchema
            ProviderResultDesc = schemas.StrSchema
            ProviderReferenceId = schemas.StrSchema
            __annotations__ = {
                "FraudCheckResult": FraudCheckResult,
                "ProviderResultCode": ProviderResultCode,
                "ProviderResultDesc": ProviderResultDesc,
                "ProviderReferenceId": ProviderReferenceId,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["FraudCheckResult"]) -> 'ReferenceEntityBase': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ProviderResultCode"]) -> MetaOapg.properties.ProviderResultCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ProviderResultDesc"]) -> MetaOapg.properties.ProviderResultDesc: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ProviderReferenceId"]) -> MetaOapg.properties.ProviderReferenceId: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["FraudCheckResult", "ProviderResultCode", "ProviderResultDesc", "ProviderReferenceId", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["FraudCheckResult"]) -> typing.Union['ReferenceEntityBase', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ProviderResultCode"]) -> typing.Union[MetaOapg.properties.ProviderResultCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ProviderResultDesc"]) -> typing.Union[MetaOapg.properties.ProviderResultDesc, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ProviderReferenceId"]) -> typing.Union[MetaOapg.properties.ProviderReferenceId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["FraudCheckResult", "ProviderResultCode", "ProviderResultDesc", "ProviderReferenceId", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        FraudCheckResult: typing.Union['ReferenceEntityBase', schemas.Unset] = schemas.unset,
        ProviderResultCode: typing.Union[MetaOapg.properties.ProviderResultCode, str, schemas.Unset] = schemas.unset,
        ProviderResultDesc: typing.Union[MetaOapg.properties.ProviderResultDesc, str, schemas.Unset] = schemas.unset,
        ProviderReferenceId: typing.Union[MetaOapg.properties.ProviderReferenceId, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'FraudCheck':
        return super().__new__(
            cls,
            *args,
            FraudCheckResult=FraudCheckResult,
            ProviderResultCode=ProviderResultCode,
            ProviderResultDesc=ProviderResultDesc,
            ProviderReferenceId=ProviderReferenceId,
            _configuration=_configuration,
            **kwargs,
        )

from splitit_client.model.reference_entity_base import ReferenceEntityBase
