# coding: utf-8

"""
    splitit-web-api-v3

    Splitit's Web API

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from splitit_client import schemas  # noqa: F401


class AddressDataModel(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            AddressLine1 = schemas.StrSchema
            AddressLine2 = schemas.StrSchema
            City = schemas.StrSchema
            Country = schemas.StrSchema
            State = schemas.StrSchema
            Zip = schemas.StrSchema
            __annotations__ = {
                "AddressLine1": AddressLine1,
                "AddressLine2": AddressLine2,
                "City": City,
                "Country": Country,
                "State": State,
                "Zip": Zip,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["AddressLine1"]) -> MetaOapg.properties.AddressLine1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["AddressLine2"]) -> MetaOapg.properties.AddressLine2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["City"]) -> MetaOapg.properties.City: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Country"]) -> MetaOapg.properties.Country: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["State"]) -> MetaOapg.properties.State: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Zip"]) -> MetaOapg.properties.Zip: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["AddressLine1", "AddressLine2", "City", "Country", "State", "Zip", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["AddressLine1"]) -> typing.Union[MetaOapg.properties.AddressLine1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["AddressLine2"]) -> typing.Union[MetaOapg.properties.AddressLine2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["City"]) -> typing.Union[MetaOapg.properties.City, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Country"]) -> typing.Union[MetaOapg.properties.Country, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["State"]) -> typing.Union[MetaOapg.properties.State, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Zip"]) -> typing.Union[MetaOapg.properties.Zip, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["AddressLine1", "AddressLine2", "City", "Country", "State", "Zip", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        AddressLine1: typing.Union[MetaOapg.properties.AddressLine1, str, schemas.Unset] = schemas.unset,
        AddressLine2: typing.Union[MetaOapg.properties.AddressLine2, str, schemas.Unset] = schemas.unset,
        City: typing.Union[MetaOapg.properties.City, str, schemas.Unset] = schemas.unset,
        Country: typing.Union[MetaOapg.properties.Country, str, schemas.Unset] = schemas.unset,
        State: typing.Union[MetaOapg.properties.State, str, schemas.Unset] = schemas.unset,
        Zip: typing.Union[MetaOapg.properties.Zip, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AddressDataModel':
        return super().__new__(
            cls,
            *args,
            AddressLine1=AddressLine1,
            AddressLine2=AddressLine2,
            City=City,
            Country=Country,
            State=State,
            Zip=Zip,
            _configuration=_configuration,
            **kwargs,
        )
