# coding: utf-8

"""
    splitit-web-api-v3

    Splitit's Web API

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from splitit_client import schemas  # noqa: F401


class ThreeDSData(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            ECI = schemas.StrSchema
            CAVV = schemas.StrSchema
            XID = schemas.StrSchema
            DirectoryServerTxnId = schemas.StrSchema
            ThreeDSVersion = schemas.StrSchema
            TransactionId = schemas.StrSchema
            __annotations__ = {
                "ECI": ECI,
                "CAVV": CAVV,
                "XID": XID,
                "DirectoryServerTxnId": DirectoryServerTxnId,
                "ThreeDSVersion": ThreeDSVersion,
                "TransactionId": TransactionId,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ECI"]) -> MetaOapg.properties.ECI: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["CAVV"]) -> MetaOapg.properties.CAVV: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["XID"]) -> MetaOapg.properties.XID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["DirectoryServerTxnId"]) -> MetaOapg.properties.DirectoryServerTxnId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ThreeDSVersion"]) -> MetaOapg.properties.ThreeDSVersion: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["TransactionId"]) -> MetaOapg.properties.TransactionId: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["ECI", "CAVV", "XID", "DirectoryServerTxnId", "ThreeDSVersion", "TransactionId", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ECI"]) -> typing.Union[MetaOapg.properties.ECI, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["CAVV"]) -> typing.Union[MetaOapg.properties.CAVV, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["XID"]) -> typing.Union[MetaOapg.properties.XID, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["DirectoryServerTxnId"]) -> typing.Union[MetaOapg.properties.DirectoryServerTxnId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ThreeDSVersion"]) -> typing.Union[MetaOapg.properties.ThreeDSVersion, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["TransactionId"]) -> typing.Union[MetaOapg.properties.TransactionId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["ECI", "CAVV", "XID", "DirectoryServerTxnId", "ThreeDSVersion", "TransactionId", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        ECI: typing.Union[MetaOapg.properties.ECI, str, schemas.Unset] = schemas.unset,
        CAVV: typing.Union[MetaOapg.properties.CAVV, str, schemas.Unset] = schemas.unset,
        XID: typing.Union[MetaOapg.properties.XID, str, schemas.Unset] = schemas.unset,
        DirectoryServerTxnId: typing.Union[MetaOapg.properties.DirectoryServerTxnId, str, schemas.Unset] = schemas.unset,
        ThreeDSVersion: typing.Union[MetaOapg.properties.ThreeDSVersion, str, schemas.Unset] = schemas.unset,
        TransactionId: typing.Union[MetaOapg.properties.TransactionId, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ThreeDSData':
        return super().__new__(
            cls,
            *args,
            ECI=ECI,
            CAVV=CAVV,
            XID=XID,
            DirectoryServerTxnId=DirectoryServerTxnId,
            ThreeDSVersion=ThreeDSVersion,
            TransactionId=TransactionId,
            _configuration=_configuration,
            **kwargs,
        )
