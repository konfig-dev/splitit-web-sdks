# coding: utf-8

"""
    splitit-web-api-v3

    Splitit's Web API

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from splitit_client import schemas  # noqa: F401


class PaymentPlanOptionModel(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "LastInstallmentAmount",
            "InstallmentAmount",
            "FirstInstallmentAmount",
            "NumberOfInstallments",
        }
        
        class properties:
            NumberOfInstallments = schemas.Int32Schema
            FirstInstallmentAmount = schemas.NumberSchema
            InstallmentAmount = schemas.NumberSchema
            LastInstallmentAmount = schemas.NumberSchema
        
            @staticmethod
            def Links() -> typing.Type['LinksModel']:
                return LinksModel
            TermsAndConditionsBrief = schemas.StrSchema
            InstallmentFrequency = schemas.StrSchema
            __annotations__ = {
                "NumberOfInstallments": NumberOfInstallments,
                "FirstInstallmentAmount": FirstInstallmentAmount,
                "InstallmentAmount": InstallmentAmount,
                "LastInstallmentAmount": LastInstallmentAmount,
                "Links": Links,
                "TermsAndConditionsBrief": TermsAndConditionsBrief,
                "InstallmentFrequency": InstallmentFrequency,
            }
    
    LastInstallmentAmount: MetaOapg.properties.LastInstallmentAmount
    InstallmentAmount: MetaOapg.properties.InstallmentAmount
    FirstInstallmentAmount: MetaOapg.properties.FirstInstallmentAmount
    NumberOfInstallments: MetaOapg.properties.NumberOfInstallments
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["NumberOfInstallments"]) -> MetaOapg.properties.NumberOfInstallments: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["FirstInstallmentAmount"]) -> MetaOapg.properties.FirstInstallmentAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["InstallmentAmount"]) -> MetaOapg.properties.InstallmentAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["LastInstallmentAmount"]) -> MetaOapg.properties.LastInstallmentAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Links"]) -> 'LinksModel': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["TermsAndConditionsBrief"]) -> MetaOapg.properties.TermsAndConditionsBrief: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["InstallmentFrequency"]) -> MetaOapg.properties.InstallmentFrequency: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["NumberOfInstallments", "FirstInstallmentAmount", "InstallmentAmount", "LastInstallmentAmount", "Links", "TermsAndConditionsBrief", "InstallmentFrequency", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["NumberOfInstallments"]) -> MetaOapg.properties.NumberOfInstallments: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["FirstInstallmentAmount"]) -> MetaOapg.properties.FirstInstallmentAmount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["InstallmentAmount"]) -> MetaOapg.properties.InstallmentAmount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["LastInstallmentAmount"]) -> MetaOapg.properties.LastInstallmentAmount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Links"]) -> typing.Union['LinksModel', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["TermsAndConditionsBrief"]) -> typing.Union[MetaOapg.properties.TermsAndConditionsBrief, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["InstallmentFrequency"]) -> typing.Union[MetaOapg.properties.InstallmentFrequency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["NumberOfInstallments", "FirstInstallmentAmount", "InstallmentAmount", "LastInstallmentAmount", "Links", "TermsAndConditionsBrief", "InstallmentFrequency", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        LastInstallmentAmount: typing.Union[MetaOapg.properties.LastInstallmentAmount, decimal.Decimal, int, float, ],
        InstallmentAmount: typing.Union[MetaOapg.properties.InstallmentAmount, decimal.Decimal, int, float, ],
        FirstInstallmentAmount: typing.Union[MetaOapg.properties.FirstInstallmentAmount, decimal.Decimal, int, float, ],
        NumberOfInstallments: typing.Union[MetaOapg.properties.NumberOfInstallments, decimal.Decimal, int, ],
        Links: typing.Union['LinksModel', schemas.Unset] = schemas.unset,
        TermsAndConditionsBrief: typing.Union[MetaOapg.properties.TermsAndConditionsBrief, str, schemas.Unset] = schemas.unset,
        InstallmentFrequency: typing.Union[MetaOapg.properties.InstallmentFrequency, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PaymentPlanOptionModel':
        return super().__new__(
            cls,
            *args,
            LastInstallmentAmount=LastInstallmentAmount,
            InstallmentAmount=InstallmentAmount,
            FirstInstallmentAmount=FirstInstallmentAmount,
            NumberOfInstallments=NumberOfInstallments,
            Links=Links,
            TermsAndConditionsBrief=TermsAndConditionsBrief,
            InstallmentFrequency=InstallmentFrequency,
            _configuration=_configuration,
            **kwargs,
        )

from splitit_client.model.links_model import LinksModel
