# coding: utf-8

"""
    splitit-web-api-v3

    Splitit's Web API

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from splitit_client import schemas  # noqa: F401


class LinksData(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            Checkout = schemas.StrSchema
            LearnMore = schemas.StrSchema
            TermsConditions = schemas.StrSchema
            PrivacyPolicy = schemas.StrSchema
            __annotations__ = {
                "Checkout": Checkout,
                "LearnMore": LearnMore,
                "TermsConditions": TermsConditions,
                "PrivacyPolicy": PrivacyPolicy,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Checkout"]) -> MetaOapg.properties.Checkout: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["LearnMore"]) -> MetaOapg.properties.LearnMore: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["TermsConditions"]) -> MetaOapg.properties.TermsConditions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["PrivacyPolicy"]) -> MetaOapg.properties.PrivacyPolicy: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["Checkout", "LearnMore", "TermsConditions", "PrivacyPolicy", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Checkout"]) -> typing.Union[MetaOapg.properties.Checkout, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["LearnMore"]) -> typing.Union[MetaOapg.properties.LearnMore, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["TermsConditions"]) -> typing.Union[MetaOapg.properties.TermsConditions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["PrivacyPolicy"]) -> typing.Union[MetaOapg.properties.PrivacyPolicy, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["Checkout", "LearnMore", "TermsConditions", "PrivacyPolicy", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        Checkout: typing.Union[MetaOapg.properties.Checkout, str, schemas.Unset] = schemas.unset,
        LearnMore: typing.Union[MetaOapg.properties.LearnMore, str, schemas.Unset] = schemas.unset,
        TermsConditions: typing.Union[MetaOapg.properties.TermsConditions, str, schemas.Unset] = schemas.unset,
        PrivacyPolicy: typing.Union[MetaOapg.properties.PrivacyPolicy, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'LinksData':
        return super().__new__(
            cls,
            *args,
            Checkout=Checkout,
            LearnMore=LearnMore,
            TermsConditions=TermsConditions,
            PrivacyPolicy=PrivacyPolicy,
            _configuration=_configuration,
            **kwargs,
        )
