# coding: utf-8

"""
    splitit-web-api-v3

    Splitit's Web API

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from splitit_client import schemas  # noqa: F401


class ShopperData(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            FullName = schemas.StrSchema
            Email = schemas.StrSchema
            PhoneNumber = schemas.StrSchema
            Culture = schemas.StrSchema
            __annotations__ = {
                "FullName": FullName,
                "Email": Email,
                "PhoneNumber": PhoneNumber,
                "Culture": Culture,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["FullName"]) -> MetaOapg.properties.FullName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Email"]) -> MetaOapg.properties.Email: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["PhoneNumber"]) -> MetaOapg.properties.PhoneNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Culture"]) -> MetaOapg.properties.Culture: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["FullName", "Email", "PhoneNumber", "Culture", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["FullName"]) -> typing.Union[MetaOapg.properties.FullName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Email"]) -> typing.Union[MetaOapg.properties.Email, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["PhoneNumber"]) -> typing.Union[MetaOapg.properties.PhoneNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Culture"]) -> typing.Union[MetaOapg.properties.Culture, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["FullName", "Email", "PhoneNumber", "Culture", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        FullName: typing.Union[MetaOapg.properties.FullName, str, schemas.Unset] = schemas.unset,
        Email: typing.Union[MetaOapg.properties.Email, str, schemas.Unset] = schemas.unset,
        PhoneNumber: typing.Union[MetaOapg.properties.PhoneNumber, str, schemas.Unset] = schemas.unset,
        Culture: typing.Union[MetaOapg.properties.Culture, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ShopperData':
        return super().__new__(
            cls,
            *args,
            FullName=FullName,
            Email=Email,
            PhoneNumber=PhoneNumber,
            Culture=Culture,
            _configuration=_configuration,
            **kwargs,
        )
