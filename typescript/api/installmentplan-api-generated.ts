/* tslint:disable */
/* eslint-disable */
/*
splitit-web-api-v3

Splitit's Web API

The version of the OpenAPI document: 1.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddressData } from '../models';
// @ts-ignore
import { AddressDataModel } from '../models';
// @ts-ignore
import { CardData } from '../models';
// @ts-ignore
import { CheckInstallmentsEligibilityRequest } from '../models';
// @ts-ignore
import { EventsEndpointsModel } from '../models';
// @ts-ignore
import { FailedResponse } from '../models';
// @ts-ignore
import { IdentifierContract } from '../models';
// @ts-ignore
import { InitiatePlanResponse } from '../models';
// @ts-ignore
import { InitiateRedirectionEndpointsModel } from '../models';
// @ts-ignore
import { InstallmentPlanCancelResponse } from '../models';
// @ts-ignore
import { InstallmentPlanCreateRequest } from '../models';
// @ts-ignore
import { InstallmentPlanCreateResponse } from '../models';
// @ts-ignore
import { InstallmentPlanGetResponse } from '../models';
// @ts-ignore
import { InstallmentPlanInitiateRequest } from '../models';
// @ts-ignore
import { InstallmentPlanRefundRequest } from '../models';
// @ts-ignore
import { InstallmentPlanRefundResponse } from '../models';
// @ts-ignore
import { InstallmentPlanSearchResponse } from '../models';
// @ts-ignore
import { InstallmentPlanUpdateRequest } from '../models';
// @ts-ignore
import { InstallmentPlanUpdateRequestByIdentifier } from '../models';
// @ts-ignore
import { InstallmentPlanUpdateResponse } from '../models';
// @ts-ignore
import { InstallmentsEligibilityResponse } from '../models';
// @ts-ignore
import { PaymentMethodModel } from '../models';
// @ts-ignore
import { PlanData } from '../models';
// @ts-ignore
import { PlanDataModel } from '../models';
// @ts-ignore
import { PlanErrorResponse } from '../models';
// @ts-ignore
import { ProcessingData } from '../models';
// @ts-ignore
import { RedirectionEndpointsModel } from '../models';
// @ts-ignore
import { RefundStrategy } from '../models';
// @ts-ignore
import { ShippingStatus } from '../models';
// @ts-ignore
import { ShopperData } from '../models';
// @ts-ignore
import { UxSettingsModel } from '../models';
// @ts-ignore
import { VerifyAuthorizationResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * InstallmentplanApi - axios parameter creator
 * @export
 */
export const InstallmentplanApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} installmentPlanNumber 
         * @param {string} xSplititIdempotencyKey 
         * @param {string} xSplititTouchPoint TouchPoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancel: async (installmentPlanNumber: string, xSplititIdempotencyKey: string, xSplititTouchPoint: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'installmentPlanNumber' is not null or undefined
            assertParamExists('cancel', 'installmentPlanNumber', installmentPlanNumber)
            // verify required parameter 'xSplititIdempotencyKey' is not null or undefined
            assertParamExists('cancel', 'xSplititIdempotencyKey', xSplititIdempotencyKey)
            // verify required parameter 'xSplititTouchPoint' is not null or undefined
            assertParamExists('cancel', 'xSplititTouchPoint', xSplititTouchPoint)
            const localVarPath = `/api/installmentplans/{installmentPlanNumber}/cancel`
                .replace(`{${"installmentPlanNumber"}}`, encodeURIComponent(String(installmentPlanNumber !== undefined ? installmentPlanNumber : `-installmentPlanNumber-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth", ["api.v3"], configuration)
            if (xSplititIdempotencyKey != null) {
                localVarHeaderParameter['X-Splitit-IdempotencyKey'] = String(xSplititIdempotencyKey);
            }

            if (xSplititTouchPoint != null) {
                localVarHeaderParameter['X-Splitit-TouchPoint'] = String(xSplititTouchPoint);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} xSplititIdempotencyKey 
         * @param {string} xSplititTouchPoint TouchPoint
         * @param {CheckInstallmentsEligibilityRequest} checkInstallmentsEligibilityRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkEligibility: async (xSplititIdempotencyKey: string, xSplititTouchPoint: string, checkInstallmentsEligibilityRequest: CheckInstallmentsEligibilityRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xSplititIdempotencyKey' is not null or undefined
            assertParamExists('checkEligibility', 'xSplititIdempotencyKey', xSplititIdempotencyKey)
            // verify required parameter 'xSplititTouchPoint' is not null or undefined
            assertParamExists('checkEligibility', 'xSplititTouchPoint', xSplititTouchPoint)
            // verify required parameter 'checkInstallmentsEligibilityRequest' is not null or undefined
            assertParamExists('checkEligibility', 'checkInstallmentsEligibilityRequest', checkInstallmentsEligibilityRequest)
            const localVarPath = `/api/installmentplans/check-eligibility`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth", ["api.v3"], configuration)
            if (xSplititIdempotencyKey != null) {
                localVarHeaderParameter['X-Splitit-IdempotencyKey'] = String(xSplititIdempotencyKey);
            }

            if (xSplititTouchPoint != null) {
                localVarHeaderParameter['X-Splitit-TouchPoint'] = String(xSplititTouchPoint);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: checkInstallmentsEligibilityRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });
            localVarRequestOptions.data = serializeDataIfNeeded(checkInstallmentsEligibilityRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} installmentPlanNumber 
         * @param {string} xSplititIdempotencyKey 
         * @param {string} xSplititTouchPoint TouchPoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get: async (installmentPlanNumber: string, xSplititIdempotencyKey: string, xSplititTouchPoint: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'installmentPlanNumber' is not null or undefined
            assertParamExists('get', 'installmentPlanNumber', installmentPlanNumber)
            // verify required parameter 'xSplititIdempotencyKey' is not null or undefined
            assertParamExists('get', 'xSplititIdempotencyKey', xSplititIdempotencyKey)
            // verify required parameter 'xSplititTouchPoint' is not null or undefined
            assertParamExists('get', 'xSplititTouchPoint', xSplititTouchPoint)
            const localVarPath = `/api/installmentplans/{installmentPlanNumber}`
                .replace(`{${"installmentPlanNumber"}}`, encodeURIComponent(String(installmentPlanNumber !== undefined ? installmentPlanNumber : `-installmentPlanNumber-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth", ["api.v3"], configuration)
            if (xSplititIdempotencyKey != null) {
                localVarHeaderParameter['X-Splitit-IdempotencyKey'] = String(xSplititIdempotencyKey);
            }

            if (xSplititTouchPoint != null) {
                localVarHeaderParameter['X-Splitit-TouchPoint'] = String(xSplititTouchPoint);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} xSplititIdempotencyKey 
         * @param {string} xSplititTouchPoint TouchPoint
         * @param {InstallmentPlanInitiateRequest} installmentPlanInitiateRequest 
         * @param {'None' | 'Regular' | 'Fast' | 'Automation'} [xSplititTestMode] 
         * @param {string} [splititclientinfo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        post: async (xSplititIdempotencyKey: string, xSplititTouchPoint: string, installmentPlanInitiateRequest: InstallmentPlanInitiateRequest, xSplititTestMode?: 'None' | 'Regular' | 'Fast' | 'Automation', splititclientinfo?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xSplititIdempotencyKey' is not null or undefined
            assertParamExists('post', 'xSplititIdempotencyKey', xSplititIdempotencyKey)
            // verify required parameter 'xSplititTouchPoint' is not null or undefined
            assertParamExists('post', 'xSplititTouchPoint', xSplititTouchPoint)
            // verify required parameter 'installmentPlanInitiateRequest' is not null or undefined
            assertParamExists('post', 'installmentPlanInitiateRequest', installmentPlanInitiateRequest)
            const localVarPath = `/api/installmentplans/initiate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth", ["api.v3"], configuration)
            if (xSplititTestMode != null) {
                localVarHeaderParameter['X-Splitit-TestMode'] = String(xSplititTestMode);
            }

            if (splititclientinfo != null) {
                localVarHeaderParameter['Splititclientinfo'] = String(splititclientinfo);
            }

            if (xSplititIdempotencyKey != null) {
                localVarHeaderParameter['X-Splitit-IdempotencyKey'] = String(xSplititIdempotencyKey);
            }

            if (xSplititTouchPoint != null) {
                localVarHeaderParameter['X-Splitit-TouchPoint'] = String(xSplititTouchPoint);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: installmentPlanInitiateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });
            localVarRequestOptions.data = serializeDataIfNeeded(installmentPlanInitiateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} xSplititIdempotencyKey 
         * @param {string} xSplititTouchPoint TouchPoint
         * @param {InstallmentPlanCreateRequest} installmentPlanCreateRequest 
         * @param {'None' | 'Regular' | 'Fast' | 'Automation'} [xSplititTestMode] 
         * @param {string} [splititclientinfo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        post2: async (xSplititIdempotencyKey: string, xSplititTouchPoint: string, installmentPlanCreateRequest: InstallmentPlanCreateRequest, xSplititTestMode?: 'None' | 'Regular' | 'Fast' | 'Automation', splititclientinfo?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xSplititIdempotencyKey' is not null or undefined
            assertParamExists('post2', 'xSplititIdempotencyKey', xSplititIdempotencyKey)
            // verify required parameter 'xSplititTouchPoint' is not null or undefined
            assertParamExists('post2', 'xSplititTouchPoint', xSplititTouchPoint)
            // verify required parameter 'installmentPlanCreateRequest' is not null or undefined
            assertParamExists('post2', 'installmentPlanCreateRequest', installmentPlanCreateRequest)
            const localVarPath = `/api/installmentplans`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth", ["api.v3"], configuration)
            if (xSplititTestMode != null) {
                localVarHeaderParameter['X-Splitit-TestMode'] = String(xSplititTestMode);
            }

            if (splititclientinfo != null) {
                localVarHeaderParameter['Splititclientinfo'] = String(splititclientinfo);
            }

            if (xSplititIdempotencyKey != null) {
                localVarHeaderParameter['X-Splitit-IdempotencyKey'] = String(xSplititIdempotencyKey);
            }

            if (xSplititTouchPoint != null) {
                localVarHeaderParameter['X-Splitit-TouchPoint'] = String(xSplititTouchPoint);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: installmentPlanCreateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });
            localVarRequestOptions.data = serializeDataIfNeeded(installmentPlanCreateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} installmentPlanNumber 
         * @param {string} xSplititIdempotencyKey 
         * @param {string} xSplititTouchPoint TouchPoint
         * @param {InstallmentPlanRefundRequest} installmentPlanRefundRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refund: async (installmentPlanNumber: string, xSplititIdempotencyKey: string, xSplititTouchPoint: string, installmentPlanRefundRequest: InstallmentPlanRefundRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'installmentPlanNumber' is not null or undefined
            assertParamExists('refund', 'installmentPlanNumber', installmentPlanNumber)
            // verify required parameter 'xSplititIdempotencyKey' is not null or undefined
            assertParamExists('refund', 'xSplititIdempotencyKey', xSplititIdempotencyKey)
            // verify required parameter 'xSplititTouchPoint' is not null or undefined
            assertParamExists('refund', 'xSplititTouchPoint', xSplititTouchPoint)
            // verify required parameter 'installmentPlanRefundRequest' is not null or undefined
            assertParamExists('refund', 'installmentPlanRefundRequest', installmentPlanRefundRequest)
            const localVarPath = `/api/installmentplans/{installmentPlanNumber}/refund`
                .replace(`{${"installmentPlanNumber"}}`, encodeURIComponent(String(installmentPlanNumber !== undefined ? installmentPlanNumber : `-installmentPlanNumber-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth", ["api.v3"], configuration)
            if (xSplititIdempotencyKey != null) {
                localVarHeaderParameter['X-Splitit-IdempotencyKey'] = String(xSplititIdempotencyKey);
            }

            if (xSplititTouchPoint != null) {
                localVarHeaderParameter['X-Splitit-TouchPoint'] = String(xSplititTouchPoint);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: installmentPlanRefundRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });
            localVarRequestOptions.data = serializeDataIfNeeded(installmentPlanRefundRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} xSplititIdempotencyKey 
         * @param {string} xSplititTouchPoint TouchPoint
         * @param {string} [installmentPlanNumber] 
         * @param {string} [refOrderNumber] 
         * @param {{ [key: string]: string; }} [extendedParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        search: async (xSplititIdempotencyKey: string, xSplititTouchPoint: string, installmentPlanNumber?: string, refOrderNumber?: string, extendedParams?: { [key: string]: string; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xSplititIdempotencyKey' is not null or undefined
            assertParamExists('search', 'xSplititIdempotencyKey', xSplititIdempotencyKey)
            // verify required parameter 'xSplititTouchPoint' is not null or undefined
            assertParamExists('search', 'xSplititTouchPoint', xSplititTouchPoint)
            const localVarPath = `/api/installmentplans/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth", ["api.v3"], configuration)
            if (installmentPlanNumber !== undefined) {
                localVarQueryParameter['installmentPlanNumber'] = installmentPlanNumber;
            }

            if (refOrderNumber !== undefined) {
                localVarQueryParameter['refOrderNumber'] = refOrderNumber;
            }

            if (extendedParams !== undefined) {
                localVarQueryParameter['extendedParams'] = extendedParams;
            }

            if (xSplititIdempotencyKey != null) {
                localVarHeaderParameter['X-Splitit-IdempotencyKey'] = String(xSplititIdempotencyKey);
            }

            if (xSplititTouchPoint != null) {
                localVarHeaderParameter['X-Splitit-TouchPoint'] = String(xSplititTouchPoint);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} installmentPlanNumber 
         * @param {string} xSplititIdempotencyKey 
         * @param {string} xSplititTouchPoint TouchPoint
         * @param {InstallmentPlanUpdateRequest} installmentPlanUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrder: async (installmentPlanNumber: string, xSplititIdempotencyKey: string, xSplititTouchPoint: string, installmentPlanUpdateRequest: InstallmentPlanUpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'installmentPlanNumber' is not null or undefined
            assertParamExists('updateOrder', 'installmentPlanNumber', installmentPlanNumber)
            // verify required parameter 'xSplititIdempotencyKey' is not null or undefined
            assertParamExists('updateOrder', 'xSplititIdempotencyKey', xSplititIdempotencyKey)
            // verify required parameter 'xSplititTouchPoint' is not null or undefined
            assertParamExists('updateOrder', 'xSplititTouchPoint', xSplititTouchPoint)
            // verify required parameter 'installmentPlanUpdateRequest' is not null or undefined
            assertParamExists('updateOrder', 'installmentPlanUpdateRequest', installmentPlanUpdateRequest)
            const localVarPath = `/api/installmentplans/{installmentPlanNumber}/updateorder`
                .replace(`{${"installmentPlanNumber"}}`, encodeURIComponent(String(installmentPlanNumber !== undefined ? installmentPlanNumber : `-installmentPlanNumber-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth", ["api.v3"], configuration)
            if (xSplititIdempotencyKey != null) {
                localVarHeaderParameter['X-Splitit-IdempotencyKey'] = String(xSplititIdempotencyKey);
            }

            if (xSplititTouchPoint != null) {
                localVarHeaderParameter['X-Splitit-TouchPoint'] = String(xSplititTouchPoint);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: installmentPlanUpdateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });
            localVarRequestOptions.data = serializeDataIfNeeded(installmentPlanUpdateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} xSplititIdempotencyKey 
         * @param {string} xSplititTouchPoint TouchPoint
         * @param {InstallmentPlanUpdateRequestByIdentifier} installmentPlanUpdateRequestByIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrder2: async (xSplititIdempotencyKey: string, xSplititTouchPoint: string, installmentPlanUpdateRequestByIdentifier: InstallmentPlanUpdateRequestByIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xSplititIdempotencyKey' is not null or undefined
            assertParamExists('updateOrder2', 'xSplititIdempotencyKey', xSplititIdempotencyKey)
            // verify required parameter 'xSplititTouchPoint' is not null or undefined
            assertParamExists('updateOrder2', 'xSplititTouchPoint', xSplititTouchPoint)
            // verify required parameter 'installmentPlanUpdateRequestByIdentifier' is not null or undefined
            assertParamExists('updateOrder2', 'installmentPlanUpdateRequestByIdentifier', installmentPlanUpdateRequestByIdentifier)
            const localVarPath = `/api/installmentplans/updateorder`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth", ["api.v3"], configuration)
            if (xSplititIdempotencyKey != null) {
                localVarHeaderParameter['X-Splitit-IdempotencyKey'] = String(xSplititIdempotencyKey);
            }

            if (xSplititTouchPoint != null) {
                localVarHeaderParameter['X-Splitit-TouchPoint'] = String(xSplititTouchPoint);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: installmentPlanUpdateRequestByIdentifier,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });
            localVarRequestOptions.data = serializeDataIfNeeded(installmentPlanUpdateRequestByIdentifier, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} installmentPlanNumber 
         * @param {string} xSplititIdempotencyKey 
         * @param {string} xSplititTouchPoint TouchPoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyAuthorization: async (installmentPlanNumber: string, xSplititIdempotencyKey: string, xSplititTouchPoint: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'installmentPlanNumber' is not null or undefined
            assertParamExists('verifyAuthorization', 'installmentPlanNumber', installmentPlanNumber)
            // verify required parameter 'xSplititIdempotencyKey' is not null or undefined
            assertParamExists('verifyAuthorization', 'xSplititIdempotencyKey', xSplititIdempotencyKey)
            // verify required parameter 'xSplititTouchPoint' is not null or undefined
            assertParamExists('verifyAuthorization', 'xSplititTouchPoint', xSplititTouchPoint)
            const localVarPath = `/api/installmentplans/{installmentPlanNumber}/verifyauthorization`
                .replace(`{${"installmentPlanNumber"}}`, encodeURIComponent(String(installmentPlanNumber !== undefined ? installmentPlanNumber : `-installmentPlanNumber-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth", ["api.v3"], configuration)
            if (xSplititIdempotencyKey != null) {
                localVarHeaderParameter['X-Splitit-IdempotencyKey'] = String(xSplititIdempotencyKey);
            }

            if (xSplititTouchPoint != null) {
                localVarHeaderParameter['X-Splitit-TouchPoint'] = String(xSplititTouchPoint);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InstallmentplanApi - functional programming interface
 * @export
 */
export const InstallmentplanApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = InstallmentplanApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {InstallmentplanApiCancelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancel(requestParameters: InstallmentplanApiCancelRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InstallmentPlanCancelResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cancel(requestParameters.installmentPlanNumber, requestParameters.xSplititIdempotencyKey, requestParameters.xSplititTouchPoint, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {InstallmentplanApiCheckEligibilityRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkEligibility(requestParameters: InstallmentplanApiCheckEligibilityRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InstallmentsEligibilityResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkEligibility(requestParameters.xSplititIdempotencyKey, requestParameters.xSplititTouchPoint, requestParameters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {InstallmentplanApiGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async get(requestParameters: InstallmentplanApiGetRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InstallmentPlanGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.get(requestParameters.installmentPlanNumber, requestParameters.xSplititIdempotencyKey, requestParameters.xSplititTouchPoint, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {InstallmentplanApiPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async post(requestParameters: InstallmentplanApiPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InitiatePlanResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.post(requestParameters.xSplititIdempotencyKey, requestParameters.xSplititTouchPoint, requestParameters, requestParameters.xSplititTestMode, requestParameters.splititclientinfo, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {InstallmentplanApiPost2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async post2(requestParameters: InstallmentplanApiPost2Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InstallmentPlanCreateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.post2(requestParameters.xSplititIdempotencyKey, requestParameters.xSplititTouchPoint, requestParameters, requestParameters.xSplititTestMode, requestParameters.splititclientinfo, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {InstallmentplanApiRefundRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refund(requestParameters: InstallmentplanApiRefundRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InstallmentPlanRefundResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refund(requestParameters.installmentPlanNumber, requestParameters.xSplititIdempotencyKey, requestParameters.xSplititTouchPoint, requestParameters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {InstallmentplanApiSearchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async search(requestParameters: InstallmentplanApiSearchRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InstallmentPlanSearchResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.search(requestParameters.xSplititIdempotencyKey, requestParameters.xSplititTouchPoint, requestParameters.installmentPlanNumber, requestParameters.refOrderNumber, requestParameters.extendedParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {InstallmentplanApiUpdateOrderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateOrder(requestParameters: InstallmentplanApiUpdateOrderRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InstallmentPlanUpdateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateOrder(requestParameters.installmentPlanNumber, requestParameters.xSplititIdempotencyKey, requestParameters.xSplititTouchPoint, requestParameters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {InstallmentplanApiUpdateOrder2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateOrder2(requestParameters: InstallmentplanApiUpdateOrder2Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InstallmentPlanUpdateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateOrder2(requestParameters.xSplititIdempotencyKey, requestParameters.xSplititTouchPoint, requestParameters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {InstallmentplanApiVerifyAuthorizationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verifyAuthorization(requestParameters: InstallmentplanApiVerifyAuthorizationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VerifyAuthorizationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.verifyAuthorization(requestParameters.installmentPlanNumber, requestParameters.xSplititIdempotencyKey, requestParameters.xSplititTouchPoint, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * InstallmentplanApi - factory interface
 * @export
 */
export const InstallmentplanApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = InstallmentplanApiFp(configuration)
    return {
        /**
         * 
         * @param {InstallmentplanApiCancelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancel(requestParameters: InstallmentplanApiCancelRequest, options?: AxiosRequestConfig): AxiosPromise<InstallmentPlanCancelResponse> {
            return localVarFp.cancel(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {InstallmentplanApiCheckEligibilityRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkEligibility(requestParameters: InstallmentplanApiCheckEligibilityRequest, options?: AxiosRequestConfig): AxiosPromise<InstallmentsEligibilityResponse> {
            return localVarFp.checkEligibility(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {InstallmentplanApiGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(requestParameters: InstallmentplanApiGetRequest, options?: AxiosRequestConfig): AxiosPromise<InstallmentPlanGetResponse> {
            return localVarFp.get(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {InstallmentplanApiPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        post(requestParameters: InstallmentplanApiPostRequest, options?: AxiosRequestConfig): AxiosPromise<InitiatePlanResponse> {
            return localVarFp.post(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {InstallmentplanApiPost2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        post2(requestParameters: InstallmentplanApiPost2Request, options?: AxiosRequestConfig): AxiosPromise<InstallmentPlanCreateResponse> {
            return localVarFp.post2(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {InstallmentplanApiRefundRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refund(requestParameters: InstallmentplanApiRefundRequest, options?: AxiosRequestConfig): AxiosPromise<InstallmentPlanRefundResponse> {
            return localVarFp.refund(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {InstallmentplanApiSearchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        search(requestParameters: InstallmentplanApiSearchRequest, options?: AxiosRequestConfig): AxiosPromise<InstallmentPlanSearchResponse> {
            return localVarFp.search(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {InstallmentplanApiUpdateOrderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrder(requestParameters: InstallmentplanApiUpdateOrderRequest, options?: AxiosRequestConfig): AxiosPromise<InstallmentPlanUpdateResponse> {
            return localVarFp.updateOrder(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {InstallmentplanApiUpdateOrder2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrder2(requestParameters: InstallmentplanApiUpdateOrder2Request, options?: AxiosRequestConfig): AxiosPromise<InstallmentPlanUpdateResponse> {
            return localVarFp.updateOrder2(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {InstallmentplanApiVerifyAuthorizationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyAuthorization(requestParameters: InstallmentplanApiVerifyAuthorizationRequest, options?: AxiosRequestConfig): AxiosPromise<VerifyAuthorizationResponse> {
            return localVarFp.verifyAuthorization(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for cancel operation in InstallmentplanApi.
 * @export
 * @interface InstallmentplanApiCancelRequest
 */
export type InstallmentplanApiCancelRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof InstallmentplanApiCancel
    */
    readonly installmentPlanNumber: string
    
    /**
    * 
    * @type {string}
    * @memberof InstallmentplanApiCancel
    */
    readonly xSplititIdempotencyKey: string
    
    /**
    * TouchPoint
    * @type {string}
    * @memberof InstallmentplanApiCancel
    */
    readonly xSplititTouchPoint: string
    
}

/**
 * Request parameters for checkEligibility operation in InstallmentplanApi.
 * @export
 * @interface InstallmentplanApiCheckEligibilityRequest
 */
export type InstallmentplanApiCheckEligibilityRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof InstallmentplanApiCheckEligibility
    */
    readonly xSplititIdempotencyKey: string
    
    /**
    * TouchPoint
    * @type {string}
    * @memberof InstallmentplanApiCheckEligibility
    */
    readonly xSplititTouchPoint: string
    
} & CheckInstallmentsEligibilityRequest

/**
 * Request parameters for get operation in InstallmentplanApi.
 * @export
 * @interface InstallmentplanApiGetRequest
 */
export type InstallmentplanApiGetRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof InstallmentplanApiGet
    */
    readonly installmentPlanNumber: string
    
    /**
    * 
    * @type {string}
    * @memberof InstallmentplanApiGet
    */
    readonly xSplititIdempotencyKey: string
    
    /**
    * TouchPoint
    * @type {string}
    * @memberof InstallmentplanApiGet
    */
    readonly xSplititTouchPoint: string
    
}

/**
 * Request parameters for post operation in InstallmentplanApi.
 * @export
 * @interface InstallmentplanApiPostRequest
 */
export type InstallmentplanApiPostRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof InstallmentplanApiPost
    */
    readonly xSplititIdempotencyKey: string
    
    /**
    * TouchPoint
    * @type {string}
    * @memberof InstallmentplanApiPost
    */
    readonly xSplititTouchPoint: string
    
    /**
    * 
    * @type {'None' | 'Regular' | 'Fast' | 'Automation'}
    * @memberof InstallmentplanApiPost
    */
    readonly xSplititTestMode?: 'None' | 'Regular' | 'Fast' | 'Automation'
    
    /**
    * 
    * @type {string}
    * @memberof InstallmentplanApiPost
    */
    readonly splititclientinfo?: string
    
} & InstallmentPlanInitiateRequest

/**
 * Request parameters for post2 operation in InstallmentplanApi.
 * @export
 * @interface InstallmentplanApiPost2Request
 */
export type InstallmentplanApiPost2Request = {
    
    /**
    * 
    * @type {string}
    * @memberof InstallmentplanApiPost2
    */
    readonly xSplititIdempotencyKey: string
    
    /**
    * TouchPoint
    * @type {string}
    * @memberof InstallmentplanApiPost2
    */
    readonly xSplititTouchPoint: string
    
    /**
    * 
    * @type {'None' | 'Regular' | 'Fast' | 'Automation'}
    * @memberof InstallmentplanApiPost2
    */
    readonly xSplititTestMode?: 'None' | 'Regular' | 'Fast' | 'Automation'
    
    /**
    * 
    * @type {string}
    * @memberof InstallmentplanApiPost2
    */
    readonly splititclientinfo?: string
    
} & InstallmentPlanCreateRequest

/**
 * Request parameters for refund operation in InstallmentplanApi.
 * @export
 * @interface InstallmentplanApiRefundRequest
 */
export type InstallmentplanApiRefundRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof InstallmentplanApiRefund
    */
    readonly installmentPlanNumber: string
    
    /**
    * 
    * @type {string}
    * @memberof InstallmentplanApiRefund
    */
    readonly xSplititIdempotencyKey: string
    
    /**
    * TouchPoint
    * @type {string}
    * @memberof InstallmentplanApiRefund
    */
    readonly xSplititTouchPoint: string
    
} & InstallmentPlanRefundRequest

/**
 * Request parameters for search operation in InstallmentplanApi.
 * @export
 * @interface InstallmentplanApiSearchRequest
 */
export type InstallmentplanApiSearchRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof InstallmentplanApiSearch
    */
    readonly xSplititIdempotencyKey: string
    
    /**
    * TouchPoint
    * @type {string}
    * @memberof InstallmentplanApiSearch
    */
    readonly xSplititTouchPoint: string
    
    /**
    * 
    * @type {string}
    * @memberof InstallmentplanApiSearch
    */
    readonly installmentPlanNumber?: string
    
    /**
    * 
    * @type {string}
    * @memberof InstallmentplanApiSearch
    */
    readonly refOrderNumber?: string
    
    /**
    * 
    * @type {{ [key: string]: string; }}
    * @memberof InstallmentplanApiSearch
    */
    readonly extendedParams?: { [key: string]: string; }
    
}

/**
 * Request parameters for updateOrder operation in InstallmentplanApi.
 * @export
 * @interface InstallmentplanApiUpdateOrderRequest
 */
export type InstallmentplanApiUpdateOrderRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof InstallmentplanApiUpdateOrder
    */
    readonly installmentPlanNumber: string
    
    /**
    * 
    * @type {string}
    * @memberof InstallmentplanApiUpdateOrder
    */
    readonly xSplititIdempotencyKey: string
    
    /**
    * TouchPoint
    * @type {string}
    * @memberof InstallmentplanApiUpdateOrder
    */
    readonly xSplititTouchPoint: string
    
} & InstallmentPlanUpdateRequest

/**
 * Request parameters for updateOrder2 operation in InstallmentplanApi.
 * @export
 * @interface InstallmentplanApiUpdateOrder2Request
 */
export type InstallmentplanApiUpdateOrder2Request = {
    
    /**
    * 
    * @type {string}
    * @memberof InstallmentplanApiUpdateOrder2
    */
    readonly xSplititIdempotencyKey: string
    
    /**
    * TouchPoint
    * @type {string}
    * @memberof InstallmentplanApiUpdateOrder2
    */
    readonly xSplititTouchPoint: string
    
} & InstallmentPlanUpdateRequestByIdentifier

/**
 * Request parameters for verifyAuthorization operation in InstallmentplanApi.
 * @export
 * @interface InstallmentplanApiVerifyAuthorizationRequest
 */
export type InstallmentplanApiVerifyAuthorizationRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof InstallmentplanApiVerifyAuthorization
    */
    readonly installmentPlanNumber: string
    
    /**
    * 
    * @type {string}
    * @memberof InstallmentplanApiVerifyAuthorization
    */
    readonly xSplititIdempotencyKey: string
    
    /**
    * TouchPoint
    * @type {string}
    * @memberof InstallmentplanApiVerifyAuthorization
    */
    readonly xSplititTouchPoint: string
    
}

/**
 * InstallmentplanApiGenerated - object-oriented interface
 * @export
 * @class InstallmentplanApiGenerated
 * @extends {BaseAPI}
 */
export class InstallmentplanApiGenerated extends BaseAPI {
    /**
     * 
     * @param {InstallmentplanApiCancelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstallmentplanApiGenerated
     */
    public cancel(requestParameters: InstallmentplanApiCancelRequest, options?: AxiosRequestConfig) {
        return InstallmentplanApiFp(this.configuration).cancel(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {InstallmentplanApiCheckEligibilityRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstallmentplanApiGenerated
     */
    public checkEligibility(requestParameters: InstallmentplanApiCheckEligibilityRequest, options?: AxiosRequestConfig) {
        return InstallmentplanApiFp(this.configuration).checkEligibility(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {InstallmentplanApiGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstallmentplanApiGenerated
     */
    public get(requestParameters: InstallmentplanApiGetRequest, options?: AxiosRequestConfig) {
        return InstallmentplanApiFp(this.configuration).get(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {InstallmentplanApiPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstallmentplanApiGenerated
     */
    public post(requestParameters: InstallmentplanApiPostRequest, options?: AxiosRequestConfig) {
        return InstallmentplanApiFp(this.configuration).post(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {InstallmentplanApiPost2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstallmentplanApiGenerated
     */
    public post2(requestParameters: InstallmentplanApiPost2Request, options?: AxiosRequestConfig) {
        return InstallmentplanApiFp(this.configuration).post2(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {InstallmentplanApiRefundRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstallmentplanApiGenerated
     */
    public refund(requestParameters: InstallmentplanApiRefundRequest, options?: AxiosRequestConfig) {
        return InstallmentplanApiFp(this.configuration).refund(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {InstallmentplanApiSearchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstallmentplanApiGenerated
     */
    public search(requestParameters: InstallmentplanApiSearchRequest, options?: AxiosRequestConfig) {
        return InstallmentplanApiFp(this.configuration).search(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {InstallmentplanApiUpdateOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstallmentplanApiGenerated
     */
    public updateOrder(requestParameters: InstallmentplanApiUpdateOrderRequest, options?: AxiosRequestConfig) {
        return InstallmentplanApiFp(this.configuration).updateOrder(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {InstallmentplanApiUpdateOrder2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstallmentplanApiGenerated
     */
    public updateOrder2(requestParameters: InstallmentplanApiUpdateOrder2Request, options?: AxiosRequestConfig) {
        return InstallmentplanApiFp(this.configuration).updateOrder2(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {InstallmentplanApiVerifyAuthorizationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstallmentplanApiGenerated
     */
    public verifyAuthorization(requestParameters: InstallmentplanApiVerifyAuthorizationRequest, options?: AxiosRequestConfig) {
        return InstallmentplanApiFp(this.configuration).verifyAuthorization(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
