/* tslint:disable */
/* eslint-disable */
/**
 * splitit-web-api-v3
 * Splitit\'s Web API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This file is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddressDataModel } from '../models';
// @ts-ignore
import { EventsEndpointsModel } from '../models';
// @ts-ignore
import { FailedResponse } from '../models';
// @ts-ignore
import { InitiatePlanResponse } from '../models';
// @ts-ignore
import { InitiateRedirectionEndpointsModel } from '../models';
// @ts-ignore
import { InstallmentPlanInitiateRequest } from '../models';
// @ts-ignore
import { PlanDataModel } from '../models';
// @ts-ignore
import { PlanErrorResponse } from '../models';
// @ts-ignore
import { ProcessingData } from '../models';
// @ts-ignore
import { ShopperData } from '../models';
// @ts-ignore
import { UxSettingsModel } from '../models';
// @ts-ignore
import { VerifyAuthorizationResponse } from '../models';
import { paginate } from "../pagination/paginate";
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * StartPlansSplititFormsApi - axios parameter creator
 * @export
 */
export const StartPlansSplititFormsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Initiate establishes an installment plan but doesn\'t finalize it, and is thus intended for use with Splitit premade checkout solutions such as Payment Forms or Flex Form. Initiate only requires SAQ-A certification. You can call it multiple times for the same installment plan, since each time a new API call is made, existing data will be updated and new values will be appended to the existing plan. Note that for funded plans, a customer\'s `BillingAddress` object must be filled out. 
         * @summary Initiate Installment Plan
         * @param {string} xSplititIdempotencyKey 
         * @param {string} xSplititTouchPoint TouchPoint
         * @param {InstallmentPlanInitiateRequest} installmentPlanInitiateRequest 
         * @param {'None' | 'Regular' | 'Fast' | 'Automation'} [xSplititTestMode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        post: async (xSplititIdempotencyKey: string, xSplititTouchPoint: string, installmentPlanInitiateRequest: InstallmentPlanInitiateRequest, xSplititTestMode?: 'None' | 'Regular' | 'Fast' | 'Automation', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xSplititIdempotencyKey' is not null or undefined
            assertParamExists('post', 'xSplititIdempotencyKey', xSplititIdempotencyKey)
            // verify required parameter 'xSplititTouchPoint' is not null or undefined
            assertParamExists('post', 'xSplititTouchPoint', xSplititTouchPoint)
            // verify required parameter 'installmentPlanInitiateRequest' is not null or undefined
            assertParamExists('post', 'installmentPlanInitiateRequest', installmentPlanInitiateRequest)
            const localVarPath = `/api/installmentplans/initiate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth", ["api.v3"], configuration)
            if (xSplititTestMode != null) {
                localVarHeaderParameter['X-Splitit-TestMode'] = String(xSplititTestMode);
            }

            if (xSplititIdempotencyKey != null) {
                localVarHeaderParameter['X-Splitit-IdempotencyKey'] = String(xSplititIdempotencyKey);
            }

            if (xSplititTouchPoint != null) {
                localVarHeaderParameter['X-Splitit-TouchPoint'] = String(xSplititTouchPoint);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: installmentPlanInitiateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });
            localVarRequestOptions.data = serializeDataIfNeeded(installmentPlanInitiateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * You must call Verify Authorization in cases when plan authorization and order closure do not happen simultaneously. An example of this would be when a customer checks out with a Payment Form or Flex Form, or is redirected for 3DS. To call it, you need to provide the plan number you received in the success response from [Initiate](/api-v3/initiate-installment-plan). 
         * @summary Verify Authorization
         * @param {string} installmentPlanNumber 
         * @param {string} xSplititIdempotencyKey 
         * @param {string} xSplititTouchPoint TouchPoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyAuthorization: async (installmentPlanNumber: string, xSplititIdempotencyKey: string, xSplititTouchPoint: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'installmentPlanNumber' is not null or undefined
            assertParamExists('verifyAuthorization', 'installmentPlanNumber', installmentPlanNumber)
            // verify required parameter 'xSplititIdempotencyKey' is not null or undefined
            assertParamExists('verifyAuthorization', 'xSplititIdempotencyKey', xSplititIdempotencyKey)
            // verify required parameter 'xSplititTouchPoint' is not null or undefined
            assertParamExists('verifyAuthorization', 'xSplititTouchPoint', xSplititTouchPoint)
            const localVarPath = `/api/installmentplans/{installmentPlanNumber}/verifyauthorization`
                .replace(`{${"installmentPlanNumber"}}`, encodeURIComponent(String(installmentPlanNumber !== undefined ? installmentPlanNumber : `-installmentPlanNumber-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth", ["api.v3"], configuration)
            if (xSplititIdempotencyKey != null) {
                localVarHeaderParameter['X-Splitit-IdempotencyKey'] = String(xSplititIdempotencyKey);
            }

            if (xSplititTouchPoint != null) {
                localVarHeaderParameter['X-Splitit-TouchPoint'] = String(xSplititTouchPoint);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StartPlansSplititFormsApi - functional programming interface
 * @export
 */
export const StartPlansSplititFormsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StartPlansSplititFormsApiAxiosParamCreator(configuration)
    return {
        /**
         * Initiate establishes an installment plan but doesn\'t finalize it, and is thus intended for use with Splitit premade checkout solutions such as Payment Forms or Flex Form. Initiate only requires SAQ-A certification. You can call it multiple times for the same installment plan, since each time a new API call is made, existing data will be updated and new values will be appended to the existing plan. Note that for funded plans, a customer\'s `BillingAddress` object must be filled out. 
         * @summary Initiate Installment Plan
         * @param {StartPlansSplititFormsApiPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async post(requestParameters: StartPlansSplititFormsApiPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InitiatePlanResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.post(requestParameters.xSplititIdempotencyKey, requestParameters.xSplititTouchPoint, requestParameters, requestParameters.xSplititTestMode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * You must call Verify Authorization in cases when plan authorization and order closure do not happen simultaneously. An example of this would be when a customer checks out with a Payment Form or Flex Form, or is redirected for 3DS. To call it, you need to provide the plan number you received in the success response from [Initiate](/api-v3/initiate-installment-plan). 
         * @summary Verify Authorization
         * @param {StartPlansSplititFormsApiVerifyAuthorizationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verifyAuthorization(requestParameters: StartPlansSplititFormsApiVerifyAuthorizationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VerifyAuthorizationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.verifyAuthorization(requestParameters.installmentPlanNumber, requestParameters.xSplititIdempotencyKey, requestParameters.xSplititTouchPoint, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * StartPlansSplititFormsApi - factory interface
 * @export
 */
export const StartPlansSplititFormsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StartPlansSplititFormsApiFp(configuration)
    return {
        /**
         * Initiate establishes an installment plan but doesn\'t finalize it, and is thus intended for use with Splitit premade checkout solutions such as Payment Forms or Flex Form. Initiate only requires SAQ-A certification. You can call it multiple times for the same installment plan, since each time a new API call is made, existing data will be updated and new values will be appended to the existing plan. Note that for funded plans, a customer\'s `BillingAddress` object must be filled out. 
         * @summary Initiate Installment Plan
         * @param {StartPlansSplititFormsApiPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        post(requestParameters: StartPlansSplititFormsApiPostRequest, options?: AxiosRequestConfig): AxiosPromise<InitiatePlanResponse> {
            return localVarFp.post(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * You must call Verify Authorization in cases when plan authorization and order closure do not happen simultaneously. An example of this would be when a customer checks out with a Payment Form or Flex Form, or is redirected for 3DS. To call it, you need to provide the plan number you received in the success response from [Initiate](/api-v3/initiate-installment-plan). 
         * @summary Verify Authorization
         * @param {StartPlansSplititFormsApiVerifyAuthorizationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyAuthorization(requestParameters: StartPlansSplititFormsApiVerifyAuthorizationRequest, options?: AxiosRequestConfig): AxiosPromise<VerifyAuthorizationResponse> {
            return localVarFp.verifyAuthorization(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for post operation in StartPlansSplititFormsApi.
 * @export
 * @interface StartPlansSplititFormsApiPostRequest
 */
export type StartPlansSplititFormsApiPostRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof StartPlansSplititFormsApiPost
    */
    readonly xSplititIdempotencyKey: string
    
    /**
    * TouchPoint
    * @type {string}
    * @memberof StartPlansSplititFormsApiPost
    */
    readonly xSplititTouchPoint: string
    
    /**
    * 
    * @type {'None' | 'Regular' | 'Fast' | 'Automation'}
    * @memberof StartPlansSplititFormsApiPost
    */
    readonly xSplititTestMode?: 'None' | 'Regular' | 'Fast' | 'Automation'
    
} & InstallmentPlanInitiateRequest

/**
 * Request parameters for verifyAuthorization operation in StartPlansSplititFormsApi.
 * @export
 * @interface StartPlansSplititFormsApiVerifyAuthorizationRequest
 */
export type StartPlansSplititFormsApiVerifyAuthorizationRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof StartPlansSplititFormsApiVerifyAuthorization
    */
    readonly installmentPlanNumber: string
    
    /**
    * 
    * @type {string}
    * @memberof StartPlansSplititFormsApiVerifyAuthorization
    */
    readonly xSplititIdempotencyKey: string
    
    /**
    * TouchPoint
    * @type {string}
    * @memberof StartPlansSplititFormsApiVerifyAuthorization
    */
    readonly xSplititTouchPoint: string
    
}

/**
 * StartPlansSplititFormsApiGenerated - object-oriented interface
 * @export
 * @class StartPlansSplititFormsApiGenerated
 * @extends {BaseAPI}
 */
export class StartPlansSplititFormsApiGenerated extends BaseAPI {
    /**
     * Initiate establishes an installment plan but doesn\'t finalize it, and is thus intended for use with Splitit premade checkout solutions such as Payment Forms or Flex Form. Initiate only requires SAQ-A certification. You can call it multiple times for the same installment plan, since each time a new API call is made, existing data will be updated and new values will be appended to the existing plan. Note that for funded plans, a customer\'s `BillingAddress` object must be filled out. 
     * @summary Initiate Installment Plan
     * @param {StartPlansSplititFormsApiPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StartPlansSplititFormsApiGenerated
     */
    public post(requestParameters: StartPlansSplititFormsApiPostRequest, options?: AxiosRequestConfig) {
        return StartPlansSplititFormsApiFp(this.configuration).post(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * You must call Verify Authorization in cases when plan authorization and order closure do not happen simultaneously. An example of this would be when a customer checks out with a Payment Form or Flex Form, or is redirected for 3DS. To call it, you need to provide the plan number you received in the success response from [Initiate](/api-v3/initiate-installment-plan). 
     * @summary Verify Authorization
     * @param {StartPlansSplititFormsApiVerifyAuthorizationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StartPlansSplititFormsApiGenerated
     */
    public verifyAuthorization(requestParameters: StartPlansSplititFormsApiVerifyAuthorizationRequest, options?: AxiosRequestConfig) {
        return StartPlansSplititFormsApiFp(this.configuration).verifyAuthorization(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
