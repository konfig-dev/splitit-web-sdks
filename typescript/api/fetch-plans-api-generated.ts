/* tslint:disable */
/* eslint-disable */
/**
 * splitit-web-api-v3
 * Splitit\'s Web API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This file is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { FailedResponse } from '../models';
// @ts-ignore
import { InstallmentPlanGetResponse } from '../models';
// @ts-ignore
import { InstallmentPlanSearchResponse } from '../models';
import { paginate } from "../pagination/paginate";
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * FetchPlansApi - axios parameter creator
 * @export
 */
export const FetchPlansApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve an installment plan\'s information by providing its number in your path.
         * @summary Fetch Plan by Number
         * @param {string} installmentPlanNumber 
         * @param {string} xSplititIdempotencyKey 
         * @param {string} xSplititTouchPoint TouchPoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get: async (installmentPlanNumber: string, xSplititIdempotencyKey: string, xSplititTouchPoint: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'installmentPlanNumber' is not null or undefined
            assertParamExists('get', 'installmentPlanNumber', installmentPlanNumber)
            // verify required parameter 'xSplititIdempotencyKey' is not null or undefined
            assertParamExists('get', 'xSplititIdempotencyKey', xSplititIdempotencyKey)
            // verify required parameter 'xSplititTouchPoint' is not null or undefined
            assertParamExists('get', 'xSplititTouchPoint', xSplititTouchPoint)
            const localVarPath = `/api/installmentplans/{installmentPlanNumber}`
                .replace(`{${"installmentPlanNumber"}}`, encodeURIComponent(String(installmentPlanNumber !== undefined ? installmentPlanNumber : `-installmentPlanNumber-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth", ["api.v3"], configuration)
            if (xSplititIdempotencyKey != null) {
                localVarHeaderParameter['X-Splitit-IdempotencyKey'] = String(xSplititIdempotencyKey);
            }

            if (xSplititTouchPoint != null) {
                localVarHeaderParameter['X-Splitit-TouchPoint'] = String(xSplititTouchPoint);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a plan by RefOrderNumber or ExtendedParams. Note that RefOrderNumber or ExtendedParams were optionally specified by you upon plan creation.
         * @summary Fetch Plan(s) by Alternate Field
         * @param {string} xSplititIdempotencyKey 
         * @param {string} xSplititTouchPoint TouchPoint
         * @param {string} [installmentPlanNumber] 
         * @param {string} [refOrderNumber] 
         * @param {{ [key: string]: string; }} [extendedParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        search: async (xSplititIdempotencyKey: string, xSplititTouchPoint: string, installmentPlanNumber?: string, refOrderNumber?: string, extendedParams?: { [key: string]: string; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xSplititIdempotencyKey' is not null or undefined
            assertParamExists('search', 'xSplititIdempotencyKey', xSplititIdempotencyKey)
            // verify required parameter 'xSplititTouchPoint' is not null or undefined
            assertParamExists('search', 'xSplititTouchPoint', xSplititTouchPoint)
            const localVarPath = `/api/installmentplans/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth", ["api.v3"], configuration)
            if (installmentPlanNumber !== undefined) {
                localVarQueryParameter['installmentPlanNumber'] = installmentPlanNumber;
            }

            if (refOrderNumber !== undefined) {
                localVarQueryParameter['refOrderNumber'] = refOrderNumber;
            }

            if (extendedParams !== undefined) {
                localVarQueryParameter['extendedParams'] = extendedParams;
            }

            if (xSplititIdempotencyKey != null) {
                localVarHeaderParameter['X-Splitit-IdempotencyKey'] = String(xSplititIdempotencyKey);
            }

            if (xSplititTouchPoint != null) {
                localVarHeaderParameter['X-Splitit-TouchPoint'] = String(xSplititTouchPoint);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FetchPlansApi - functional programming interface
 * @export
 */
export const FetchPlansApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FetchPlansApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve an installment plan\'s information by providing its number in your path.
         * @summary Fetch Plan by Number
         * @param {FetchPlansApiGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async get(requestParameters: FetchPlansApiGetRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InstallmentPlanGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.get(requestParameters.installmentPlanNumber, requestParameters.xSplititIdempotencyKey, requestParameters.xSplititTouchPoint, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a plan by RefOrderNumber or ExtendedParams. Note that RefOrderNumber or ExtendedParams were optionally specified by you upon plan creation.
         * @summary Fetch Plan(s) by Alternate Field
         * @param {FetchPlansApiSearchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async search(requestParameters: FetchPlansApiSearchRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InstallmentPlanSearchResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.search(requestParameters.xSplititIdempotencyKey, requestParameters.xSplititTouchPoint, requestParameters.installmentPlanNumber, requestParameters.refOrderNumber, requestParameters.extendedParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FetchPlansApi - factory interface
 * @export
 */
export const FetchPlansApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FetchPlansApiFp(configuration)
    return {
        /**
         * Retrieve an installment plan\'s information by providing its number in your path.
         * @summary Fetch Plan by Number
         * @param {FetchPlansApiGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(requestParameters: FetchPlansApiGetRequest, options?: AxiosRequestConfig): AxiosPromise<InstallmentPlanGetResponse> {
            return localVarFp.get(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a plan by RefOrderNumber or ExtendedParams. Note that RefOrderNumber or ExtendedParams were optionally specified by you upon plan creation.
         * @summary Fetch Plan(s) by Alternate Field
         * @param {FetchPlansApiSearchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        search(requestParameters: FetchPlansApiSearchRequest, options?: AxiosRequestConfig): AxiosPromise<InstallmentPlanSearchResponse> {
            return localVarFp.search(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for get operation in FetchPlansApi.
 * @export
 * @interface FetchPlansApiGetRequest
 */
export type FetchPlansApiGetRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof FetchPlansApiGet
    */
    readonly installmentPlanNumber: string
    
    /**
    * 
    * @type {string}
    * @memberof FetchPlansApiGet
    */
    readonly xSplititIdempotencyKey: string
    
    /**
    * TouchPoint
    * @type {string}
    * @memberof FetchPlansApiGet
    */
    readonly xSplititTouchPoint: string
    
}

/**
 * Request parameters for search operation in FetchPlansApi.
 * @export
 * @interface FetchPlansApiSearchRequest
 */
export type FetchPlansApiSearchRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof FetchPlansApiSearch
    */
    readonly xSplititIdempotencyKey: string
    
    /**
    * TouchPoint
    * @type {string}
    * @memberof FetchPlansApiSearch
    */
    readonly xSplititTouchPoint: string
    
    /**
    * 
    * @type {string}
    * @memberof FetchPlansApiSearch
    */
    readonly installmentPlanNumber?: string
    
    /**
    * 
    * @type {string}
    * @memberof FetchPlansApiSearch
    */
    readonly refOrderNumber?: string
    
    /**
    * 
    * @type {{ [key: string]: string; }}
    * @memberof FetchPlansApiSearch
    */
    readonly extendedParams?: { [key: string]: string; }
    
}

/**
 * FetchPlansApiGenerated - object-oriented interface
 * @export
 * @class FetchPlansApiGenerated
 * @extends {BaseAPI}
 */
export class FetchPlansApiGenerated extends BaseAPI {
    /**
     * Retrieve an installment plan\'s information by providing its number in your path.
     * @summary Fetch Plan by Number
     * @param {FetchPlansApiGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FetchPlansApiGenerated
     */
    public get(requestParameters: FetchPlansApiGetRequest, options?: AxiosRequestConfig) {
        return FetchPlansApiFp(this.configuration).get(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a plan by RefOrderNumber or ExtendedParams. Note that RefOrderNumber or ExtendedParams were optionally specified by you upon plan creation.
     * @summary Fetch Plan(s) by Alternate Field
     * @param {FetchPlansApiSearchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FetchPlansApiGenerated
     */
    public search(requestParameters: FetchPlansApiSearchRequest, options?: AxiosRequestConfig) {
        return FetchPlansApiFp(this.configuration).search(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
