/* tslint:disable */
/* eslint-disable */
/**
 * splitit-web-api-v3
 * Splitit\'s API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * https://konfigthis.com
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AddressData
 */
export interface AddressData {
    /**
     * 
     * @type {string}
     * @memberof AddressData
     */
    'AddressLine'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressData
     */
    'AddressLine2'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressData
     */
    'City'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressData
     */
    'Country'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressData
     */
    'State'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressData
     */
    'Zip'?: string;
}
/**
 * 
 * @export
 * @interface AddressDataModel
 */
export interface AddressDataModel {
    /**
     * 
     * @type {string}
     * @memberof AddressDataModel
     */
    'AddressLine1'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressDataModel
     */
    'AddressLine2'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressDataModel
     */
    'City'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressDataModel
     */
    'Country'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressDataModel
     */
    'State'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressDataModel
     */
    'Zip'?: string;
}
/**
 * 
 * @export
 * @interface AuthorizationModel
 */
export interface AuthorizationModel {
    /**
     * 
     * @type {GwAuthorizationStatus}
     * @memberof AuthorizationModel
     */
    'Status': GwAuthorizationStatus;
    /**
     * 
     * @type {string}
     * @memberof AuthorizationModel
     */
    'Date'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthorizationModel
     */
    'SplititErrorResultCode'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AuthorizationModel
     */
    'GatewayTransactionID'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthorizationModel
     */
    'GatewayResultCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthorizationModel
     */
    'GatewayResultMessage'?: string;
    /**
     * 
     * @type {ThreeDsRedirectData}
     * @memberof AuthorizationModel
     */
    'ThreeDSRedirect'?: ThreeDsRedirectData;
    /**
     * 
     * @type {string}
     * @memberof AuthorizationModel
     */
    'CAVV'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AuthorizationModel
     */
    'ECI'?: string | null;
}
/**
 * 
 * @export
 * @interface CardData
 */
export interface CardData {
    /**
     * 
     * @type {string}
     * @memberof CardData
     */
    'CardHolderFullName'?: string;
    /**
     * 
     * @type {string}
     * @memberof CardData
     */
    'CardNumber'?: string;
    /**
     * 
     * @type {string}
     * @memberof CardData
     */
    'CardExpYear'?: string;
    /**
     * 
     * @type {string}
     * @memberof CardData
     */
    'CardExpMonth'?: string;
    /**
     * 
     * @type {string}
     * @memberof CardData
     */
    'CardCvv'?: string;
}
/**
 * 
 * @export
 * @interface ErrorExtended
 */
export interface ErrorExtended {
    /**
     * 
     * @type {string}
     * @memberof ErrorExtended
     */
    'Code'?: string;
    /**
     * 
     * @type {string}
     * @memberof ErrorExtended
     */
    'Message'?: string;
    /**
     * 
     * @type {string}
     * @memberof ErrorExtended
     */
    'AdditionalInfo'?: string;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof ErrorExtended
     */
    'ExtraData'?: { [key: string]: string; };
}
/**
 * 
 * @export
 * @interface ErrorExtendedAllOf
 */
export interface ErrorExtendedAllOf {
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof ErrorExtendedAllOf
     */
    'ExtraData'?: { [key: string]: string; };
}
/**
 * 
 * @export
 * @interface FailedResponse
 */
export interface FailedResponse {
    /**
     * 
     * @type {string}
     * @memberof FailedResponse
     */
    'TraceId'?: string;
    /**
     * 
     * @type {ErrorExtended}
     * @memberof FailedResponse
     */
    'Error'?: ErrorExtended;
}
/**
 * 
 * @export
 * @interface FailedResponseAllOf
 */
export interface FailedResponseAllOf {
    /**
     * 
     * @type {string}
     * @memberof FailedResponseAllOf
     */
    'TraceId'?: string;
    /**
     * 
     * @type {ErrorExtended}
     * @memberof FailedResponseAllOf
     */
    'Error'?: ErrorExtended;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const GwAuthorizationStatus = {
    Na: 'NA',
    Succeeded: 'Succeeded',
    Pending3Ds: 'Pending3DS',
    Failed: 'Failed'
} as const;

export type GwAuthorizationStatus = typeof GwAuthorizationStatus[keyof typeof GwAuthorizationStatus];


/**
 * 
 * @export
 * @interface IdentifierContract
 */
export interface IdentifierContract {
    /**
     * 
     * @type {string}
     * @memberof IdentifierContract
     */
    'RefOrderNumber'?: string;
    /**
     * 
     * @type {string}
     * @memberof IdentifierContract
     */
    'InstallmentPlanNumber'?: string;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof IdentifierContract
     */
    'ExtendedParams'?: { [key: string]: string; };
}
/**
 * 
 * @export
 * @interface Installment
 */
export interface Installment {
    /**
     * 
     * @type {number}
     * @memberof Installment
     */
    'InstallmentNumber': number;
    /**
     * 
     * @type {number}
     * @memberof Installment
     */
    'Amount': number;
    /**
     * 
     * @type {string}
     * @memberof Installment
     */
    'ProcessDateTime'?: string;
    /**
     * 
     * @type {InstallmentStatus}
     * @memberof Installment
     */
    'Status': InstallmentStatus;
}
/**
 * 
 * @export
 * @interface InstallmentPlanCancelResponse
 */
export interface InstallmentPlanCancelResponse {
    /**
     * 
     * @type {string}
     * @memberof InstallmentPlanCancelResponse
     */
    'InstallmentPlanNumber'?: string;
}
/**
 * 
 * @export
 * @interface InstallmentPlanCreateRequest
 */
export interface InstallmentPlanCreateRequest {
    /**
     * 
     * @type {boolean}
     * @memberof InstallmentPlanCreateRequest
     */
    'AutoCapture': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof InstallmentPlanCreateRequest
     */
    'Attempt3dSecure': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof InstallmentPlanCreateRequest
     */
    'AttemptAuthorize': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof InstallmentPlanCreateRequest
     */
    'TermsAndConditionsAccepted': boolean;
    /**
     * 
     * @type {ShopperData}
     * @memberof InstallmentPlanCreateRequest
     */
    'Shopper'?: ShopperData;
    /**
     * 
     * @type {PlanDataModel}
     * @memberof InstallmentPlanCreateRequest
     */
    'PlanData'?: PlanDataModel;
    /**
     * 
     * @type {AddressDataModel}
     * @memberof InstallmentPlanCreateRequest
     */
    'BillingAddress'?: AddressDataModel;
    /**
     * 
     * @type {PaymentMethodModel}
     * @memberof InstallmentPlanCreateRequest
     */
    'PaymentMethod'?: PaymentMethodModel;
    /**
     * 
     * @type {RedirectionEndpointsModel}
     * @memberof InstallmentPlanCreateRequest
     */
    'RedirectUrls'?: RedirectionEndpointsModel;
}
/**
 * 
 * @export
 * @interface InstallmentPlanGetResponse
 */
export interface InstallmentPlanGetResponse {
    /**
     * 
     * @type {Array<InstallmentPlanModel>}
     * @memberof InstallmentPlanGetResponse
     */
    'PlanList'?: Array<InstallmentPlanModel>;
}
/**
 * 
 * @export
 * @interface InstallmentPlanGetResponseAllOf
 */
export interface InstallmentPlanGetResponseAllOf {
    /**
     * 
     * @type {Array<InstallmentPlanModel>}
     * @memberof InstallmentPlanGetResponseAllOf
     */
    'PlanList'?: Array<InstallmentPlanModel>;
}
/**
 * 
 * @export
 * @interface InstallmentPlanModel
 */
export interface InstallmentPlanModel {
    /**
     * 
     * @type {string}
     * @memberof InstallmentPlanModel
     */
    'InstallmentPlanNumber'?: string;
    /**
     * 
     * @type {string}
     * @memberof InstallmentPlanModel
     */
    'RefOrderNumber'?: string | null;
    /**
     * 
     * @type {PurchaseMethod}
     * @memberof InstallmentPlanModel
     */
    'PurchaseMethod'?: PurchaseMethod;
    /**
     * 
     * @type {PlanStatus}
     * @memberof InstallmentPlanModel
     */
    'Status': PlanStatus;
    /**
     * 
     * @type {string}
     * @memberof InstallmentPlanModel
     */
    'Currency'?: string;
    /**
     * 
     * @type {number}
     * @memberof InstallmentPlanModel
     */
    'OriginalAmount'?: number;
    /**
     * 
     * @type {number}
     * @memberof InstallmentPlanModel
     */
    'Amount'?: number;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof InstallmentPlanModel
     */
    'ExtendedParams'?: { [key: string]: string; };
    /**
     * 
     * @type {AuthorizationModel}
     * @memberof InstallmentPlanModel
     */
    'Authorization'?: AuthorizationModel;
    /**
     * 
     * @type {ShopperData}
     * @memberof InstallmentPlanModel
     */
    'Shopper'?: ShopperData;
    /**
     * 
     * @type {AddressData}
     * @memberof InstallmentPlanModel
     */
    'BillingAddress'?: AddressData;
    /**
     * 
     * @type {PaymentMethodModel}
     * @memberof InstallmentPlanModel
     */
    'PaymentMethod'?: PaymentMethodModel;
    /**
     * 
     * @type {Array<Installment>}
     * @memberof InstallmentPlanModel
     */
    'Installments'?: Array<Installment>;
    /**
     * 
     * @type {LinksData}
     * @memberof InstallmentPlanModel
     */
    'Links'?: LinksData;
}
/**
 * 
 * @export
 * @interface InstallmentPlanModelAllOf
 */
export interface InstallmentPlanModelAllOf {
    /**
     * 
     * @type {string}
     * @memberof InstallmentPlanModelAllOf
     */
    'InstallmentPlanNumber'?: string;
    /**
     * 
     * @type {string}
     * @memberof InstallmentPlanModelAllOf
     */
    'RefOrderNumber'?: string | null;
    /**
     * 
     * @type {PurchaseMethod}
     * @memberof InstallmentPlanModelAllOf
     */
    'PurchaseMethod'?: PurchaseMethod;
    /**
     * 
     * @type {PlanStatus}
     * @memberof InstallmentPlanModelAllOf
     */
    'Status': PlanStatus;
    /**
     * 
     * @type {string}
     * @memberof InstallmentPlanModelAllOf
     */
    'Currency'?: string;
    /**
     * 
     * @type {number}
     * @memberof InstallmentPlanModelAllOf
     */
    'OriginalAmount'?: number;
    /**
     * 
     * @type {number}
     * @memberof InstallmentPlanModelAllOf
     */
    'Amount'?: number;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof InstallmentPlanModelAllOf
     */
    'ExtendedParams'?: { [key: string]: string; };
    /**
     * 
     * @type {AuthorizationModel}
     * @memberof InstallmentPlanModelAllOf
     */
    'Authorization'?: AuthorizationModel;
    /**
     * 
     * @type {ShopperData}
     * @memberof InstallmentPlanModelAllOf
     */
    'Shopper'?: ShopperData;
    /**
     * 
     * @type {AddressData}
     * @memberof InstallmentPlanModelAllOf
     */
    'BillingAddress'?: AddressData;
    /**
     * 
     * @type {PaymentMethodModel}
     * @memberof InstallmentPlanModelAllOf
     */
    'PaymentMethod'?: PaymentMethodModel;
    /**
     * 
     * @type {Array<Installment>}
     * @memberof InstallmentPlanModelAllOf
     */
    'Installments'?: Array<Installment>;
    /**
     * 
     * @type {LinksData}
     * @memberof InstallmentPlanModelAllOf
     */
    'Links'?: LinksData;
}
/**
 * 
 * @export
 * @interface InstallmentPlanRefundRequest
 */
export interface InstallmentPlanRefundRequest {
    /**
     * 
     * @type {number}
     * @memberof InstallmentPlanRefundRequest
     */
    'Amount': number;
    /**
     * 
     * @type {RefundStrategy}
     * @memberof InstallmentPlanRefundRequest
     */
    'RefundStrategy'?: RefundStrategy;
}
/**
 * 
 * @export
 * @interface InstallmentPlanRefundResponse
 */
export interface InstallmentPlanRefundResponse {
    /**
     * 
     * @type {string}
     * @memberof InstallmentPlanRefundResponse
     */
    'RefundId'?: string;
    /**
     * 
     * @type {string}
     * @memberof InstallmentPlanRefundResponse
     */
    'InstallmentPlanNumber'?: string;
    /**
     * 
     * @type {string}
     * @memberof InstallmentPlanRefundResponse
     */
    'Currency'?: string;
    /**
     * 
     * @type {number}
     * @memberof InstallmentPlanRefundResponse
     */
    'NonCreditRefundAmount'?: number;
    /**
     * 
     * @type {number}
     * @memberof InstallmentPlanRefundResponse
     */
    'CreditRefundAmount'?: number;
    /**
     * 
     * @type {RefundSummary}
     * @memberof InstallmentPlanRefundResponse
     */
    'Summary'?: RefundSummary;
}
/**
 * 
 * @export
 * @interface InstallmentPlanRefundResponseAllOf
 */
export interface InstallmentPlanRefundResponseAllOf {
    /**
     * 
     * @type {string}
     * @memberof InstallmentPlanRefundResponseAllOf
     */
    'RefundId'?: string;
    /**
     * 
     * @type {string}
     * @memberof InstallmentPlanRefundResponseAllOf
     */
    'InstallmentPlanNumber'?: string;
    /**
     * 
     * @type {string}
     * @memberof InstallmentPlanRefundResponseAllOf
     */
    'Currency'?: string;
    /**
     * 
     * @type {number}
     * @memberof InstallmentPlanRefundResponseAllOf
     */
    'NonCreditRefundAmount'?: number;
    /**
     * 
     * @type {number}
     * @memberof InstallmentPlanRefundResponseAllOf
     */
    'CreditRefundAmount'?: number;
    /**
     * 
     * @type {RefundSummary}
     * @memberof InstallmentPlanRefundResponseAllOf
     */
    'Summary'?: RefundSummary;
}
/**
 * 
 * @export
 * @interface InstallmentPlanUpdateRequest
 */
export interface InstallmentPlanUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof InstallmentPlanUpdateRequest
     */
    'RefOrderNumber'?: string;
    /**
     * 
     * @type {string}
     * @memberof InstallmentPlanUpdateRequest
     */
    'TrackingNumber'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof InstallmentPlanUpdateRequest
     */
    'Capture'?: boolean;
    /**
     * 
     * @type {ShippingStatus2}
     * @memberof InstallmentPlanUpdateRequest
     */
    'ShippingStatus'?: ShippingStatus2;
}
/**
 * 
 * @export
 * @interface InstallmentPlanUpdateRequestByIdentifier
 */
export interface InstallmentPlanUpdateRequestByIdentifier {
    /**
     * 
     * @type {string}
     * @memberof InstallmentPlanUpdateRequestByIdentifier
     */
    'RefOrderNumber'?: string;
    /**
     * 
     * @type {string}
     * @memberof InstallmentPlanUpdateRequestByIdentifier
     */
    'TrackingNumber'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof InstallmentPlanUpdateRequestByIdentifier
     */
    'Capture'?: boolean;
    /**
     * 
     * @type {ShippingStatus2}
     * @memberof InstallmentPlanUpdateRequestByIdentifier
     */
    'ShippingStatus'?: ShippingStatus2;
    /**
     * 
     * @type {IdentifierContract}
     * @memberof InstallmentPlanUpdateRequestByIdentifier
     */
    'Identifier'?: IdentifierContract;
}
/**
 * 
 * @export
 * @interface InstallmentPlanUpdateRequestByIdentifierAllOf
 */
export interface InstallmentPlanUpdateRequestByIdentifierAllOf {
    /**
     * 
     * @type {IdentifierContract}
     * @memberof InstallmentPlanUpdateRequestByIdentifierAllOf
     */
    'Identifier'?: IdentifierContract;
}
/**
 * 
 * @export
 * @interface InstallmentPlanUpdateResponse
 */
export interface InstallmentPlanUpdateResponse {
    /**
     * 
     * @type {string}
     * @memberof InstallmentPlanUpdateResponse
     */
    'RefOrderNumber'?: string;
    /**
     * 
     * @type {string}
     * @memberof InstallmentPlanUpdateResponse
     */
    'InstallmentPlanNumber'?: string;
    /**
     * 
     * @type {PlanStatus}
     * @memberof InstallmentPlanUpdateResponse
     */
    'Status': PlanStatus;
    /**
     * 
     * @type {ShippingStatus}
     * @memberof InstallmentPlanUpdateResponse
     */
    'ShippingStatus': ShippingStatus;
}
/**
 * 
 * @export
 * @interface InstallmentPlanUpdateResponseAllOf
 */
export interface InstallmentPlanUpdateResponseAllOf {
    /**
     * 
     * @type {string}
     * @memberof InstallmentPlanUpdateResponseAllOf
     */
    'RefOrderNumber'?: string;
    /**
     * 
     * @type {string}
     * @memberof InstallmentPlanUpdateResponseAllOf
     */
    'InstallmentPlanNumber'?: string;
    /**
     * 
     * @type {PlanStatus}
     * @memberof InstallmentPlanUpdateResponseAllOf
     */
    'Status': PlanStatus;
    /**
     * 
     * @type {ShippingStatus}
     * @memberof InstallmentPlanUpdateResponseAllOf
     */
    'ShippingStatus': ShippingStatus;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const InstallmentStatus = {
    Pending: 'Pending',
    Processed: 'Processed'
} as const;

export type InstallmentStatus = typeof InstallmentStatus[keyof typeof InstallmentStatus];


/**
 * 
 * @export
 * @interface LinksData
 */
export interface LinksData {
    /**
     * 
     * @type {string}
     * @memberof LinksData
     */
    'Checkout'?: string;
    /**
     * 
     * @type {string}
     * @memberof LinksData
     */
    'LearnMore'?: string;
    /**
     * 
     * @type {string}
     * @memberof LinksData
     */
    'TermsConditions'?: string;
    /**
     * 
     * @type {string}
     * @memberof LinksData
     */
    'PrivacyPolicy'?: string;
}
/**
 * 
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    'Code'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    'Message'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    'AdditionalInfo'?: string;
}
/**
 * 
 * @export
 * @interface PaymentMethodModel
 */
export interface PaymentMethodModel {
    /**
     * 
     * @type {PaymentMethodType}
     * @memberof PaymentMethodModel
     */
    'Type': PaymentMethodType;
    /**
     * 
     * @type {CardData}
     * @memberof PaymentMethodModel
     */
    'Card'?: CardData;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const PaymentMethodType = {
    Card: 'Card'
} as const;

export type PaymentMethodType = typeof PaymentMethodType[keyof typeof PaymentMethodType];


/**
 * 
 * @export
 * @interface PlanDataModel
 */
export interface PlanDataModel {
    /**
     * 
     * @type {number}
     * @memberof PlanDataModel
     */
    'TotalAmount': number;
    /**
     * 
     * @type {string}
     * @memberof PlanDataModel
     */
    'Currency'?: string;
    /**
     * 
     * @type {number}
     * @memberof PlanDataModel
     */
    'NumberOfInstallments': number;
    /**
     * 
     * @type {string}
     * @memberof PlanDataModel
     */
    'TerminalId'?: string;
    /**
     * 
     * @type {PurchaseMethod}
     * @memberof PlanDataModel
     */
    'PurchaseMethod': PurchaseMethod;
    /**
     * 
     * @type {string}
     * @memberof PlanDataModel
     */
    'RefOrderNumber'?: string;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof PlanDataModel
     */
    'ExtendedParams'?: { [key: string]: string; };
}
/**
 * 
 * @export
 * @interface PlanErrorResponse
 */
export interface PlanErrorResponse {
    /**
     * 
     * @type {string}
     * @memberof PlanErrorResponse
     */
    'TraceId'?: string;
    /**
     * 
     * @type {ErrorExtended}
     * @memberof PlanErrorResponse
     */
    'Error'?: ErrorExtended;
    /**
     * 
     * @type {string}
     * @memberof PlanErrorResponse
     */
    'InstallmentPlanNumber'?: string;
}
/**
 * 
 * @export
 * @interface PlanErrorResponseAllOf
 */
export interface PlanErrorResponseAllOf {
    /**
     * 
     * @type {string}
     * @memberof PlanErrorResponseAllOf
     */
    'InstallmentPlanNumber'?: string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const PlanStatus = {
    Initialized: 'Initialized',
    PendingCapture: 'PendingCapture',
    Active: 'Active',
    Cleared: 'Cleared',
    Canceled: 'Canceled'
} as const;

export type PlanStatus = typeof PlanStatus[keyof typeof PlanStatus];


/**
 * 
 * @export
 * @enum {string}
 */

export const PurchaseMethod = {
    InStore: 'InStore',
    PhoneOrder: 'PhoneOrder',
    ECommerce: 'ECommerce'
} as const;

export type PurchaseMethod = typeof PurchaseMethod[keyof typeof PurchaseMethod];


/**
 * 
 * @export
 * @interface RedirectionEndpointsModel
 */
export interface RedirectionEndpointsModel {
    /**
     * 
     * @type {string}
     * @memberof RedirectionEndpointsModel
     */
    'AuthorizeSucceeded'?: string;
    /**
     * 
     * @type {string}
     * @memberof RedirectionEndpointsModel
     */
    'Succeeded'?: string;
    /**
     * 
     * @type {string}
     * @memberof RedirectionEndpointsModel
     */
    'AuthorizeFailed'?: string;
    /**
     * 
     * @type {string}
     * @memberof RedirectionEndpointsModel
     */
    'Failed'?: string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const RefundStrategy = {
    FutureInstallmentsFirst: 'FutureInstallmentsFirst',
    FutureInstallmentsLast: 'FutureInstallmentsLast',
    FutureInstallmentsNotAllowed: 'FutureInstallmentsNotAllowed',
    ReduceFromLastInstallment: 'ReduceFromLastInstallment'
} as const;

export type RefundStrategy = typeof RefundStrategy[keyof typeof RefundStrategy];


/**
 * 
 * @export
 * @interface RefundSummary
 */
export interface RefundSummary {
    /**
     * 
     * @type {number}
     * @memberof RefundSummary
     */
    'TotalAmount'?: number;
    /**
     * 
     * @type {number}
     * @memberof RefundSummary
     */
    'FailedAmount'?: number;
    /**
     * 
     * @type {number}
     * @memberof RefundSummary
     */
    'SucceededAmount'?: number;
    /**
     * 
     * @type {number}
     * @memberof RefundSummary
     */
    'PendingAmount'?: number;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const ShippingStatus = {
    Pending: 'Pending',
    Shipped: 'Shipped',
    Delivered: 'Delivered'
} as const;

export type ShippingStatus = typeof ShippingStatus[keyof typeof ShippingStatus];


/**
 * 
 * @export
 * @enum {string}
 */

export const ShippingStatus2 = {
    Shipped: 'Shipped',
    Delivered: 'Delivered'
} as const;

export type ShippingStatus2 = typeof ShippingStatus2[keyof typeof ShippingStatus2];


/**
 * 
 * @export
 * @interface ShopperData
 */
export interface ShopperData {
    /**
     * 
     * @type {string}
     * @memberof ShopperData
     */
    'FullName'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShopperData
     */
    'Email'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShopperData
     */
    'PhoneNumber'?: string;
    /**
     * 
     * @type {string}
     * @memberof ShopperData
     */
    'Culture'?: string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const TestModes = {
    None: 'None',
    Regular: 'Regular',
    Fast: 'Fast',
    Automation: 'Automation'
} as const;

export type TestModes = typeof TestModes[keyof typeof TestModes];


/**
 * 
 * @export
 * @interface ThreeDsRedirectData
 */
export interface ThreeDsRedirectData {
    /**
     * 
     * @type {string}
     * @memberof ThreeDsRedirectData
     */
    'Url'?: string;
    /**
     * 
     * @type {string}
     * @memberof ThreeDsRedirectData
     */
    'Verb'?: string;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof ThreeDsRedirectData
     */
    'Params'?: { [key: string]: string; };
}
/**
 * 
 * @export
 * @interface UpdateOrderRequest
 */
export interface UpdateOrderRequest {
    /**
     * 
     * @type {string}
     * @memberof UpdateOrderRequest
     */
    'TrackingNumber'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateOrderRequest
     */
    'RefOrderNumber'?: string;
    /**
     * 
     * @type {ShippingStatus}
     * @memberof UpdateOrderRequest
     */
    'ShippingStatus'?: ShippingStatus;
    /**
     * 
     * @type {boolean}
     * @memberof UpdateOrderRequest
     */
    'Capture'?: boolean;
}
/**
 * 
 * @export
 * @interface VerifyAuthorizationResponse
 */
export interface VerifyAuthorizationResponse {
    /**
     * 
     * @type {boolean}
     * @memberof VerifyAuthorizationResponse
     */
    'IsAuthorized': boolean;
    /**
     * 
     * @type {number}
     * @memberof VerifyAuthorizationResponse
     */
    'AuthorizationAmount'?: number;
    /**
     * 
     * @type {AuthorizationModel}
     * @memberof VerifyAuthorizationResponse
     */
    'Authorization'?: AuthorizationModel;
}
/**
 * 
 * @export
 * @interface VerifyAuthorizationResponseAllOf
 */
export interface VerifyAuthorizationResponseAllOf {
    /**
     * 
     * @type {boolean}
     * @memberof VerifyAuthorizationResponseAllOf
     */
    'IsAuthorized': boolean;
    /**
     * 
     * @type {number}
     * @memberof VerifyAuthorizationResponseAllOf
     */
    'AuthorizationAmount'?: number;
    /**
     * 
     * @type {AuthorizationModel}
     * @memberof VerifyAuthorizationResponseAllOf
     */
    'Authorization'?: AuthorizationModel;
}

/**
 * InstallmentPlanApi - axios parameter creator
 * @export
 */
export const InstallmentPlanApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} installmentPlanNumber 
         * @param {string} xSplititIdempotencyKey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancel: async (installmentPlanNumber: string, xSplititIdempotencyKey: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'installmentPlanNumber' is not null or undefined
            assertParamExists('cancel', 'installmentPlanNumber', installmentPlanNumber)
            // verify required parameter 'xSplititIdempotencyKey' is not null or undefined
            assertParamExists('cancel', 'xSplititIdempotencyKey', xSplititIdempotencyKey)
            const localVarPath = `/api/installmentplans/{installmentPlanNumber}/cancel`
                .replace(`{${"installmentPlanNumber"}}`, encodeURIComponent(String(installmentPlanNumber)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "bearer", ["api.v3"], configuration)

            if (xSplititIdempotencyKey != null) {
                localVarHeaderParameter['X-Splitit-IdempotencyKey'] = String(xSplititIdempotencyKey);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} installmentPlanNumber 
         * @param {string} xSplititIdempotencyKey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get: async (installmentPlanNumber: string, xSplititIdempotencyKey: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'installmentPlanNumber' is not null or undefined
            assertParamExists('get', 'installmentPlanNumber', installmentPlanNumber)
            // verify required parameter 'xSplititIdempotencyKey' is not null or undefined
            assertParamExists('get', 'xSplititIdempotencyKey', xSplititIdempotencyKey)
            const localVarPath = `/api/installmentplans/{installmentPlanNumber}`
                .replace(`{${"installmentPlanNumber"}}`, encodeURIComponent(String(installmentPlanNumber)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "bearer", ["api.v3"], configuration)

            if (xSplititIdempotencyKey != null) {
                localVarHeaderParameter['X-Splitit-IdempotencyKey'] = String(xSplititIdempotencyKey);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} xSplititIdempotencyKey 
         * @param {InstallmentPlanCreateRequest} installmentPlanCreateRequest 
         * @param {'None' | 'Regular' | 'Fast' | 'Automation'} [xSplititTestMode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        post: async (xSplititIdempotencyKey: string, installmentPlanCreateRequest: InstallmentPlanCreateRequest, xSplititTestMode?: 'None' | 'Regular' | 'Fast' | 'Automation', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xSplititIdempotencyKey' is not null or undefined
            assertParamExists('post', 'xSplititIdempotencyKey', xSplititIdempotencyKey)
            // verify required parameter 'installmentPlanCreateRequest' is not null or undefined
            assertParamExists('post', 'installmentPlanCreateRequest', installmentPlanCreateRequest)
            const localVarPath = `/api/installmentplans`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "bearer", ["api.v3"], configuration)

            if (xSplititTestMode != null) {
                localVarHeaderParameter['X-Splitit-TestMode'] = String(xSplititTestMode);
            }

            if (xSplititIdempotencyKey != null) {
                localVarHeaderParameter['X-Splitit-IdempotencyKey'] = String(xSplititIdempotencyKey);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(installmentPlanCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} installmentPlanNumber 
         * @param {string} xSplititIdempotencyKey 
         * @param {InstallmentPlanRefundRequest} installmentPlanRefundRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refund: async (installmentPlanNumber: string, xSplititIdempotencyKey: string, installmentPlanRefundRequest: InstallmentPlanRefundRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'installmentPlanNumber' is not null or undefined
            assertParamExists('refund', 'installmentPlanNumber', installmentPlanNumber)
            // verify required parameter 'xSplititIdempotencyKey' is not null or undefined
            assertParamExists('refund', 'xSplititIdempotencyKey', xSplititIdempotencyKey)
            // verify required parameter 'installmentPlanRefundRequest' is not null or undefined
            assertParamExists('refund', 'installmentPlanRefundRequest', installmentPlanRefundRequest)
            const localVarPath = `/api/installmentplans/{installmentPlanNumber}/refund`
                .replace(`{${"installmentPlanNumber"}}`, encodeURIComponent(String(installmentPlanNumber)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "bearer", ["api.v3"], configuration)

            if (xSplititIdempotencyKey != null) {
                localVarHeaderParameter['X-Splitit-IdempotencyKey'] = String(xSplititIdempotencyKey);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(installmentPlanRefundRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} xSplititIdempotencyKey 
         * @param {string} [installmentPlanNumber] 
         * @param {string} [refOrderNumber] 
         * @param {{ [key: string]: string; }} [extendedParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        search: async (xSplititIdempotencyKey: string, installmentPlanNumber?: string, refOrderNumber?: string, extendedParams?: { [key: string]: string; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xSplititIdempotencyKey' is not null or undefined
            assertParamExists('search', 'xSplititIdempotencyKey', xSplititIdempotencyKey)
            const localVarPath = `/api/installmentplans/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "bearer", ["api.v3"], configuration)

            if (installmentPlanNumber !== undefined) {
                localVarQueryParameter['installmentPlanNumber'] = installmentPlanNumber;
            }

            if (refOrderNumber !== undefined) {
                localVarQueryParameter['refOrderNumber'] = refOrderNumber;
            }

            if (extendedParams !== undefined) {
                localVarQueryParameter['extendedParams'] = extendedParams;
            }

            if (xSplititIdempotencyKey != null) {
                localVarHeaderParameter['X-Splitit-IdempotencyKey'] = String(xSplititIdempotencyKey);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} installmentPlanNumber 
         * @param {string} xSplititIdempotencyKey 
         * @param {UpdateOrderRequest} updateOrderRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrder: async (installmentPlanNumber: string, xSplititIdempotencyKey: string, updateOrderRequest: UpdateOrderRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'installmentPlanNumber' is not null or undefined
            assertParamExists('updateOrder', 'installmentPlanNumber', installmentPlanNumber)
            // verify required parameter 'xSplititIdempotencyKey' is not null or undefined
            assertParamExists('updateOrder', 'xSplititIdempotencyKey', xSplititIdempotencyKey)
            // verify required parameter 'updateOrderRequest' is not null or undefined
            assertParamExists('updateOrder', 'updateOrderRequest', updateOrderRequest)
            const localVarPath = `/api/installmentplans/{installmentPlanNumber}/updateorder`
                .replace(`{${"installmentPlanNumber"}}`, encodeURIComponent(String(installmentPlanNumber)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "bearer", ["api.v3"], configuration)

            if (xSplititIdempotencyKey != null) {
                localVarHeaderParameter['X-Splitit-IdempotencyKey'] = String(xSplititIdempotencyKey);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateOrderRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} xSplititIdempotencyKey 
         * @param {InstallmentPlanUpdateRequestByIdentifier} installmentPlanUpdateRequestByIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrder2: async (xSplititIdempotencyKey: string, installmentPlanUpdateRequestByIdentifier: InstallmentPlanUpdateRequestByIdentifier, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xSplititIdempotencyKey' is not null or undefined
            assertParamExists('updateOrder2', 'xSplititIdempotencyKey', xSplititIdempotencyKey)
            // verify required parameter 'installmentPlanUpdateRequestByIdentifier' is not null or undefined
            assertParamExists('updateOrder2', 'installmentPlanUpdateRequestByIdentifier', installmentPlanUpdateRequestByIdentifier)
            const localVarPath = `/api/installmentplans/updateorder`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "bearer", ["api.v3"], configuration)

            if (xSplititIdempotencyKey != null) {
                localVarHeaderParameter['X-Splitit-IdempotencyKey'] = String(xSplititIdempotencyKey);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(installmentPlanUpdateRequestByIdentifier, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} installmentPlanNumber 
         * @param {string} xSplititIdempotencyKey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyAuthorization: async (installmentPlanNumber: string, xSplititIdempotencyKey: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'installmentPlanNumber' is not null or undefined
            assertParamExists('verifyAuthorization', 'installmentPlanNumber', installmentPlanNumber)
            // verify required parameter 'xSplititIdempotencyKey' is not null or undefined
            assertParamExists('verifyAuthorization', 'xSplititIdempotencyKey', xSplititIdempotencyKey)
            const localVarPath = `/api/installmentplans/{installmentPlanNumber}/verifyauthorization`
                .replace(`{${"installmentPlanNumber"}}`, encodeURIComponent(String(installmentPlanNumber)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "bearer", ["api.v3"], configuration)

            if (xSplititIdempotencyKey != null) {
                localVarHeaderParameter['X-Splitit-IdempotencyKey'] = String(xSplititIdempotencyKey);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InstallmentPlanApi - functional programming interface
 * @export
 */
export const InstallmentPlanApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = InstallmentPlanApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} installmentPlanNumber 
         * @param {string} xSplititIdempotencyKey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancel(installmentPlanNumber: string, xSplititIdempotencyKey: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InstallmentPlanCancelResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cancel(installmentPlanNumber, xSplititIdempotencyKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} installmentPlanNumber 
         * @param {string} xSplititIdempotencyKey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async get(installmentPlanNumber: string, xSplititIdempotencyKey: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InstallmentPlanModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.get(installmentPlanNumber, xSplititIdempotencyKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} xSplititIdempotencyKey 
         * @param {InstallmentPlanCreateRequest} installmentPlanCreateRequest 
         * @param {'None' | 'Regular' | 'Fast' | 'Automation'} [xSplititTestMode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async post(xSplititIdempotencyKey: string, installmentPlanCreateRequest: InstallmentPlanCreateRequest, xSplititTestMode?: 'None' | 'Regular' | 'Fast' | 'Automation', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InstallmentPlanModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.post(xSplititIdempotencyKey, installmentPlanCreateRequest, xSplititTestMode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} installmentPlanNumber 
         * @param {string} xSplititIdempotencyKey 
         * @param {InstallmentPlanRefundRequest} installmentPlanRefundRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refund(installmentPlanNumber: string, xSplititIdempotencyKey: string, installmentPlanRefundRequest: InstallmentPlanRefundRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InstallmentPlanRefundResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refund(installmentPlanNumber, xSplititIdempotencyKey, installmentPlanRefundRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} xSplititIdempotencyKey 
         * @param {string} [installmentPlanNumber] 
         * @param {string} [refOrderNumber] 
         * @param {{ [key: string]: string; }} [extendedParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async search(xSplititIdempotencyKey: string, installmentPlanNumber?: string, refOrderNumber?: string, extendedParams?: { [key: string]: string; }, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InstallmentPlanGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.search(xSplititIdempotencyKey, installmentPlanNumber, refOrderNumber, extendedParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} installmentPlanNumber 
         * @param {string} xSplititIdempotencyKey 
         * @param {UpdateOrderRequest} updateOrderRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateOrder(installmentPlanNumber: string, xSplititIdempotencyKey: string, updateOrderRequest: UpdateOrderRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InstallmentPlanUpdateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateOrder(installmentPlanNumber, xSplititIdempotencyKey, updateOrderRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} xSplititIdempotencyKey 
         * @param {InstallmentPlanUpdateRequestByIdentifier} installmentPlanUpdateRequestByIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateOrder2(xSplititIdempotencyKey: string, installmentPlanUpdateRequestByIdentifier: InstallmentPlanUpdateRequestByIdentifier, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InstallmentPlanUpdateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateOrder2(xSplititIdempotencyKey, installmentPlanUpdateRequestByIdentifier, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} installmentPlanNumber 
         * @param {string} xSplititIdempotencyKey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verifyAuthorization(installmentPlanNumber: string, xSplititIdempotencyKey: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VerifyAuthorizationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.verifyAuthorization(installmentPlanNumber, xSplititIdempotencyKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * InstallmentPlanApi - factory interface
 * @export
 */
export const InstallmentPlanApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = InstallmentPlanApiFp(configuration)
    return {
        /**
         * 
         * @param {string} installmentPlanNumber 
         * @param {string} xSplititIdempotencyKey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancel(installmentPlanNumber: string, xSplititIdempotencyKey: string, options?: any): AxiosPromise<InstallmentPlanCancelResponse> {
            return localVarFp.cancel(installmentPlanNumber, xSplititIdempotencyKey, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} installmentPlanNumber 
         * @param {string} xSplititIdempotencyKey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(installmentPlanNumber: string, xSplititIdempotencyKey: string, options?: any): AxiosPromise<InstallmentPlanModel> {
            return localVarFp.get(installmentPlanNumber, xSplititIdempotencyKey, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} xSplititIdempotencyKey 
         * @param {InstallmentPlanCreateRequest} installmentPlanCreateRequest 
         * @param {'None' | 'Regular' | 'Fast' | 'Automation'} [xSplititTestMode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        post(xSplititIdempotencyKey: string, installmentPlanCreateRequest: InstallmentPlanCreateRequest, xSplititTestMode?: 'None' | 'Regular' | 'Fast' | 'Automation', options?: any): AxiosPromise<InstallmentPlanModel> {
            return localVarFp.post(xSplititIdempotencyKey, installmentPlanCreateRequest, xSplititTestMode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} installmentPlanNumber 
         * @param {string} xSplititIdempotencyKey 
         * @param {InstallmentPlanRefundRequest} installmentPlanRefundRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refund(installmentPlanNumber: string, xSplititIdempotencyKey: string, installmentPlanRefundRequest: InstallmentPlanRefundRequest, options?: any): AxiosPromise<InstallmentPlanRefundResponse> {
            return localVarFp.refund(installmentPlanNumber, xSplititIdempotencyKey, installmentPlanRefundRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} xSplititIdempotencyKey 
         * @param {string} [installmentPlanNumber] 
         * @param {string} [refOrderNumber] 
         * @param {{ [key: string]: string; }} [extendedParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        search(xSplititIdempotencyKey: string, installmentPlanNumber?: string, refOrderNumber?: string, extendedParams?: { [key: string]: string; }, options?: any): AxiosPromise<InstallmentPlanGetResponse> {
            return localVarFp.search(xSplititIdempotencyKey, installmentPlanNumber, refOrderNumber, extendedParams, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} installmentPlanNumber 
         * @param {string} xSplititIdempotencyKey 
         * @param {UpdateOrderRequest} updateOrderRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrder(installmentPlanNumber: string, xSplititIdempotencyKey: string, updateOrderRequest: UpdateOrderRequest, options?: any): AxiosPromise<InstallmentPlanUpdateResponse> {
            return localVarFp.updateOrder(installmentPlanNumber, xSplititIdempotencyKey, updateOrderRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} xSplititIdempotencyKey 
         * @param {InstallmentPlanUpdateRequestByIdentifier} installmentPlanUpdateRequestByIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrder2(xSplititIdempotencyKey: string, installmentPlanUpdateRequestByIdentifier: InstallmentPlanUpdateRequestByIdentifier, options?: any): AxiosPromise<InstallmentPlanUpdateResponse> {
            return localVarFp.updateOrder2(xSplititIdempotencyKey, installmentPlanUpdateRequestByIdentifier, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} installmentPlanNumber 
         * @param {string} xSplititIdempotencyKey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyAuthorization(installmentPlanNumber: string, xSplititIdempotencyKey: string, options?: any): AxiosPromise<VerifyAuthorizationResponse> {
            return localVarFp.verifyAuthorization(installmentPlanNumber, xSplititIdempotencyKey, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * InstallmentPlanApi - object-oriented interface
 * @export
 * @class InstallmentPlanApi
 * @extends {BaseAPI}
 */
export class InstallmentPlanApi extends BaseAPI {
    /**
     * 
     * @param {string} installmentPlanNumber 
     * @param {string} xSplititIdempotencyKey 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstallmentPlanApi
     */
    public cancel(installmentPlanNumber: string, xSplititIdempotencyKey: string, options?: AxiosRequestConfig) {
        return InstallmentPlanApiFp(this.configuration).cancel(installmentPlanNumber, xSplititIdempotencyKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} installmentPlanNumber 
     * @param {string} xSplititIdempotencyKey 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstallmentPlanApi
     */
    public get(installmentPlanNumber: string, xSplititIdempotencyKey: string, options?: AxiosRequestConfig) {
        return InstallmentPlanApiFp(this.configuration).get(installmentPlanNumber, xSplititIdempotencyKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} xSplititIdempotencyKey 
     * @param {InstallmentPlanCreateRequest} installmentPlanCreateRequest 
     * @param {'None' | 'Regular' | 'Fast' | 'Automation'} [xSplititTestMode] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstallmentPlanApi
     */
    public post(xSplititIdempotencyKey: string, installmentPlanCreateRequest: InstallmentPlanCreateRequest, xSplititTestMode?: 'None' | 'Regular' | 'Fast' | 'Automation', options?: AxiosRequestConfig) {
        return InstallmentPlanApiFp(this.configuration).post(xSplititIdempotencyKey, installmentPlanCreateRequest, xSplititTestMode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} installmentPlanNumber 
     * @param {string} xSplititIdempotencyKey 
     * @param {InstallmentPlanRefundRequest} installmentPlanRefundRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstallmentPlanApi
     */
    public refund(installmentPlanNumber: string, xSplititIdempotencyKey: string, installmentPlanRefundRequest: InstallmentPlanRefundRequest, options?: AxiosRequestConfig) {
        return InstallmentPlanApiFp(this.configuration).refund(installmentPlanNumber, xSplititIdempotencyKey, installmentPlanRefundRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} xSplititIdempotencyKey 
     * @param {string} [installmentPlanNumber] 
     * @param {string} [refOrderNumber] 
     * @param {{ [key: string]: string; }} [extendedParams] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstallmentPlanApi
     */
    public search(xSplititIdempotencyKey: string, installmentPlanNumber?: string, refOrderNumber?: string, extendedParams?: { [key: string]: string; }, options?: AxiosRequestConfig) {
        return InstallmentPlanApiFp(this.configuration).search(xSplititIdempotencyKey, installmentPlanNumber, refOrderNumber, extendedParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} installmentPlanNumber 
     * @param {string} xSplititIdempotencyKey 
     * @param {UpdateOrderRequest} updateOrderRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstallmentPlanApi
     */
    public updateOrder(installmentPlanNumber: string, xSplititIdempotencyKey: string, updateOrderRequest: UpdateOrderRequest, options?: AxiosRequestConfig) {
        return InstallmentPlanApiFp(this.configuration).updateOrder(installmentPlanNumber, xSplititIdempotencyKey, updateOrderRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} xSplititIdempotencyKey 
     * @param {InstallmentPlanUpdateRequestByIdentifier} installmentPlanUpdateRequestByIdentifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstallmentPlanApi
     */
    public updateOrder2(xSplititIdempotencyKey: string, installmentPlanUpdateRequestByIdentifier: InstallmentPlanUpdateRequestByIdentifier, options?: AxiosRequestConfig) {
        return InstallmentPlanApiFp(this.configuration).updateOrder2(xSplititIdempotencyKey, installmentPlanUpdateRequestByIdentifier, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} installmentPlanNumber 
     * @param {string} xSplititIdempotencyKey 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstallmentPlanApi
     */
    public verifyAuthorization(installmentPlanNumber: string, xSplititIdempotencyKey: string, options?: AxiosRequestConfig) {
        return InstallmentPlanApiFp(this.configuration).verifyAuthorization(installmentPlanNumber, xSplititIdempotencyKey, options).then((request) => request(this.axios, this.basePath));
    }
}


