/*
 * splitit-web-api-v3
 *
 * Splitit's Web API
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://konfigthis.com
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Splitit.Web.Net.Client;
using Splitit.Web.Net.Client.Auth;
using Splitit.Web.Net.Model;

namespace Splitit.Web.Net.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInstallmentPlanApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Splitit.Web.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="xSplititTouchPoint">TouchPoint</param>
        /// <param name="checkInstallmentsEligibilityRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InstallmentsEligibilityResponse</returns>
        InstallmentsEligibilityResponse CheckEligibility(string xSplititIdempotencyKey, string xSplititTouchPoint, CheckInstallmentsEligibilityRequest checkInstallmentsEligibilityRequest, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.Web.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="xSplititTouchPoint">TouchPoint</param>
        /// <param name="checkInstallmentsEligibilityRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InstallmentsEligibilityResponse</returns>
        ApiResponse<InstallmentsEligibilityResponse> CheckEligibilityWithHttpInfo(string xSplititIdempotencyKey, string xSplititTouchPoint, CheckInstallmentsEligibilityRequest checkInstallmentsEligibilityRequest, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Splitit.Web.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="installmentPlanNumber"></param>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="xSplititTouchPoint">TouchPoint</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InstallmentPlanGetResponse</returns>
        InstallmentPlanGetResponse Get(string installmentPlanNumber, string xSplititIdempotencyKey, string xSplititTouchPoint, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.Web.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="installmentPlanNumber"></param>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="xSplititTouchPoint">TouchPoint</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InstallmentPlanGetResponse</returns>
        ApiResponse<InstallmentPlanGetResponse> GetWithHttpInfo(string installmentPlanNumber, string xSplititIdempotencyKey, string xSplititTouchPoint, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Splitit.Web.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="xSplititTouchPoint">TouchPoint</param>
        /// <param name="installmentPlanInitiateRequest"></param>
        /// <param name="xSplititTestMode"> (optional)</param>
        /// <param name="splititclientinfo"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InitiatePlanResponse</returns>
        InitiatePlanResponse Post(string xSplititIdempotencyKey, string xSplititTouchPoint, InstallmentPlanInitiateRequest installmentPlanInitiateRequest, string xSplititTestMode = default(string), string splititclientinfo = default(string), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.Web.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="xSplititTouchPoint">TouchPoint</param>
        /// <param name="installmentPlanInitiateRequest"></param>
        /// <param name="xSplititTestMode"> (optional)</param>
        /// <param name="splititclientinfo"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InitiatePlanResponse</returns>
        ApiResponse<InitiatePlanResponse> PostWithHttpInfo(string xSplititIdempotencyKey, string xSplititTouchPoint, InstallmentPlanInitiateRequest installmentPlanInitiateRequest, string xSplititTestMode = default(string), string splititclientinfo = default(string), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Splitit.Web.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="xSplititTouchPoint">TouchPoint</param>
        /// <param name="installmentPlanCreateRequest"></param>
        /// <param name="xSplititTestMode"> (optional)</param>
        /// <param name="splititclientinfo"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InstallmentPlanCreateResponse</returns>
        InstallmentPlanCreateResponse Post2(string xSplititIdempotencyKey, string xSplititTouchPoint, InstallmentPlanCreateRequest installmentPlanCreateRequest, string xSplititTestMode = default(string), string splititclientinfo = default(string), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.Web.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="xSplititTouchPoint">TouchPoint</param>
        /// <param name="installmentPlanCreateRequest"></param>
        /// <param name="xSplititTestMode"> (optional)</param>
        /// <param name="splititclientinfo"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InstallmentPlanCreateResponse</returns>
        ApiResponse<InstallmentPlanCreateResponse> Post2WithHttpInfo(string xSplititIdempotencyKey, string xSplititTouchPoint, InstallmentPlanCreateRequest installmentPlanCreateRequest, string xSplititTestMode = default(string), string splititclientinfo = default(string), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Splitit.Web.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="installmentPlanNumber"></param>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="xSplititTouchPoint">TouchPoint</param>
        /// <param name="installmentPlanRefundRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InstallmentPlanRefundResponse</returns>
        InstallmentPlanRefundResponse Refund(string installmentPlanNumber, string xSplititIdempotencyKey, string xSplititTouchPoint, InstallmentPlanRefundRequest installmentPlanRefundRequest, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.Web.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="installmentPlanNumber"></param>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="xSplititTouchPoint">TouchPoint</param>
        /// <param name="installmentPlanRefundRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InstallmentPlanRefundResponse</returns>
        ApiResponse<InstallmentPlanRefundResponse> RefundWithHttpInfo(string installmentPlanNumber, string xSplititIdempotencyKey, string xSplititTouchPoint, InstallmentPlanRefundRequest installmentPlanRefundRequest, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Splitit.Web.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="xSplititTouchPoint">TouchPoint</param>
        /// <param name="installmentPlanNumber"> (optional)</param>
        /// <param name="refOrderNumber"> (optional)</param>
        /// <param name="extendedParams"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InstallmentPlanSearchResponse</returns>
        InstallmentPlanSearchResponse Search(string xSplititIdempotencyKey, string xSplititTouchPoint, string installmentPlanNumber = default(string), string refOrderNumber = default(string), Dictionary<string, string> extendedParams = default(Dictionary<string, string>), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.Web.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="xSplititTouchPoint">TouchPoint</param>
        /// <param name="installmentPlanNumber"> (optional)</param>
        /// <param name="refOrderNumber"> (optional)</param>
        /// <param name="extendedParams"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InstallmentPlanSearchResponse</returns>
        ApiResponse<InstallmentPlanSearchResponse> SearchWithHttpInfo(string xSplititIdempotencyKey, string xSplititTouchPoint, string installmentPlanNumber = default(string), string refOrderNumber = default(string), Dictionary<string, string> extendedParams = default(Dictionary<string, string>), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Splitit.Web.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="installmentPlanNumber"></param>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="xSplititTouchPoint">TouchPoint</param>
        /// <param name="installmentPlanUpdateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InstallmentPlanUpdateResponse</returns>
        InstallmentPlanUpdateResponse UpdateOrder(string installmentPlanNumber, string xSplititIdempotencyKey, string xSplititTouchPoint, InstallmentPlanUpdateRequest installmentPlanUpdateRequest, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.Web.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="installmentPlanNumber"></param>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="xSplititTouchPoint">TouchPoint</param>
        /// <param name="installmentPlanUpdateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InstallmentPlanUpdateResponse</returns>
        ApiResponse<InstallmentPlanUpdateResponse> UpdateOrderWithHttpInfo(string installmentPlanNumber, string xSplititIdempotencyKey, string xSplititTouchPoint, InstallmentPlanUpdateRequest installmentPlanUpdateRequest, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Splitit.Web.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="xSplititTouchPoint">TouchPoint</param>
        /// <param name="installmentPlanUpdateRequestByIdentifier"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InstallmentPlanUpdateResponse</returns>
        InstallmentPlanUpdateResponse UpdateOrder2(string xSplititIdempotencyKey, string xSplititTouchPoint, InstallmentPlanUpdateRequestByIdentifier installmentPlanUpdateRequestByIdentifier, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.Web.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="xSplititTouchPoint">TouchPoint</param>
        /// <param name="installmentPlanUpdateRequestByIdentifier"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InstallmentPlanUpdateResponse</returns>
        ApiResponse<InstallmentPlanUpdateResponse> UpdateOrder2WithHttpInfo(string xSplititIdempotencyKey, string xSplititTouchPoint, InstallmentPlanUpdateRequestByIdentifier installmentPlanUpdateRequestByIdentifier, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Splitit.Web.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="installmentPlanNumber"></param>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="xSplititTouchPoint">TouchPoint</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>VerifyAuthorizationResponse</returns>
        VerifyAuthorizationResponse VerifyAuthorization(string installmentPlanNumber, string xSplititIdempotencyKey, string xSplititTouchPoint, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.Web.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="installmentPlanNumber"></param>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="xSplititTouchPoint">TouchPoint</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of VerifyAuthorizationResponse</returns>
        ApiResponse<VerifyAuthorizationResponse> VerifyAuthorizationWithHttpInfo(string installmentPlanNumber, string xSplititIdempotencyKey, string xSplititTouchPoint, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInstallmentPlanApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.Web.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="xSplititTouchPoint">TouchPoint</param>
        /// <param name="checkInstallmentsEligibilityRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InstallmentsEligibilityResponse</returns>
        System.Threading.Tasks.Task<InstallmentsEligibilityResponse> CheckEligibilityAsync(string xSplititIdempotencyKey, string xSplititTouchPoint, CheckInstallmentsEligibilityRequest checkInstallmentsEligibilityRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.Web.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="xSplititTouchPoint">TouchPoint</param>
        /// <param name="checkInstallmentsEligibilityRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InstallmentsEligibilityResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<InstallmentsEligibilityResponse>> CheckEligibilityWithHttpInfoAsync(string xSplititIdempotencyKey, string xSplititTouchPoint, CheckInstallmentsEligibilityRequest checkInstallmentsEligibilityRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.Web.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="installmentPlanNumber"></param>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="xSplititTouchPoint">TouchPoint</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InstallmentPlanGetResponse</returns>
        System.Threading.Tasks.Task<InstallmentPlanGetResponse> GetAsync(string installmentPlanNumber, string xSplititIdempotencyKey, string xSplititTouchPoint, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.Web.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="installmentPlanNumber"></param>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="xSplititTouchPoint">TouchPoint</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InstallmentPlanGetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<InstallmentPlanGetResponse>> GetWithHttpInfoAsync(string installmentPlanNumber, string xSplititIdempotencyKey, string xSplititTouchPoint, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.Web.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="xSplititTouchPoint">TouchPoint</param>
        /// <param name="installmentPlanInitiateRequest"></param>
        /// <param name="xSplititTestMode"> (optional)</param>
        /// <param name="splititclientinfo"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InitiatePlanResponse</returns>
        System.Threading.Tasks.Task<InitiatePlanResponse> PostAsync(string xSplititIdempotencyKey, string xSplititTouchPoint, InstallmentPlanInitiateRequest installmentPlanInitiateRequest, string xSplititTestMode = default(string), string splititclientinfo = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.Web.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="xSplititTouchPoint">TouchPoint</param>
        /// <param name="installmentPlanInitiateRequest"></param>
        /// <param name="xSplititTestMode"> (optional)</param>
        /// <param name="splititclientinfo"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InitiatePlanResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<InitiatePlanResponse>> PostWithHttpInfoAsync(string xSplititIdempotencyKey, string xSplititTouchPoint, InstallmentPlanInitiateRequest installmentPlanInitiateRequest, string xSplititTestMode = default(string), string splititclientinfo = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.Web.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="xSplititTouchPoint">TouchPoint</param>
        /// <param name="installmentPlanCreateRequest"></param>
        /// <param name="xSplititTestMode"> (optional)</param>
        /// <param name="splititclientinfo"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InstallmentPlanCreateResponse</returns>
        System.Threading.Tasks.Task<InstallmentPlanCreateResponse> Post2Async(string xSplititIdempotencyKey, string xSplititTouchPoint, InstallmentPlanCreateRequest installmentPlanCreateRequest, string xSplititTestMode = default(string), string splititclientinfo = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.Web.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="xSplititTouchPoint">TouchPoint</param>
        /// <param name="installmentPlanCreateRequest"></param>
        /// <param name="xSplititTestMode"> (optional)</param>
        /// <param name="splititclientinfo"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InstallmentPlanCreateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<InstallmentPlanCreateResponse>> Post2WithHttpInfoAsync(string xSplititIdempotencyKey, string xSplititTouchPoint, InstallmentPlanCreateRequest installmentPlanCreateRequest, string xSplititTestMode = default(string), string splititclientinfo = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.Web.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="installmentPlanNumber"></param>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="xSplititTouchPoint">TouchPoint</param>
        /// <param name="installmentPlanRefundRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InstallmentPlanRefundResponse</returns>
        System.Threading.Tasks.Task<InstallmentPlanRefundResponse> RefundAsync(string installmentPlanNumber, string xSplititIdempotencyKey, string xSplititTouchPoint, InstallmentPlanRefundRequest installmentPlanRefundRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.Web.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="installmentPlanNumber"></param>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="xSplititTouchPoint">TouchPoint</param>
        /// <param name="installmentPlanRefundRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InstallmentPlanRefundResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<InstallmentPlanRefundResponse>> RefundWithHttpInfoAsync(string installmentPlanNumber, string xSplititIdempotencyKey, string xSplititTouchPoint, InstallmentPlanRefundRequest installmentPlanRefundRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.Web.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="xSplititTouchPoint">TouchPoint</param>
        /// <param name="installmentPlanNumber"> (optional)</param>
        /// <param name="refOrderNumber"> (optional)</param>
        /// <param name="extendedParams"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InstallmentPlanSearchResponse</returns>
        System.Threading.Tasks.Task<InstallmentPlanSearchResponse> SearchAsync(string xSplititIdempotencyKey, string xSplititTouchPoint, string installmentPlanNumber = default(string), string refOrderNumber = default(string), Dictionary<string, string> extendedParams = default(Dictionary<string, string>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.Web.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="xSplititTouchPoint">TouchPoint</param>
        /// <param name="installmentPlanNumber"> (optional)</param>
        /// <param name="refOrderNumber"> (optional)</param>
        /// <param name="extendedParams"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InstallmentPlanSearchResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<InstallmentPlanSearchResponse>> SearchWithHttpInfoAsync(string xSplititIdempotencyKey, string xSplititTouchPoint, string installmentPlanNumber = default(string), string refOrderNumber = default(string), Dictionary<string, string> extendedParams = default(Dictionary<string, string>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.Web.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="installmentPlanNumber"></param>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="xSplititTouchPoint">TouchPoint</param>
        /// <param name="installmentPlanUpdateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InstallmentPlanUpdateResponse</returns>
        System.Threading.Tasks.Task<InstallmentPlanUpdateResponse> UpdateOrderAsync(string installmentPlanNumber, string xSplititIdempotencyKey, string xSplititTouchPoint, InstallmentPlanUpdateRequest installmentPlanUpdateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.Web.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="installmentPlanNumber"></param>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="xSplititTouchPoint">TouchPoint</param>
        /// <param name="installmentPlanUpdateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InstallmentPlanUpdateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<InstallmentPlanUpdateResponse>> UpdateOrderWithHttpInfoAsync(string installmentPlanNumber, string xSplititIdempotencyKey, string xSplititTouchPoint, InstallmentPlanUpdateRequest installmentPlanUpdateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.Web.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="xSplititTouchPoint">TouchPoint</param>
        /// <param name="installmentPlanUpdateRequestByIdentifier"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InstallmentPlanUpdateResponse</returns>
        System.Threading.Tasks.Task<InstallmentPlanUpdateResponse> UpdateOrder2Async(string xSplititIdempotencyKey, string xSplititTouchPoint, InstallmentPlanUpdateRequestByIdentifier installmentPlanUpdateRequestByIdentifier, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.Web.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="xSplititTouchPoint">TouchPoint</param>
        /// <param name="installmentPlanUpdateRequestByIdentifier"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InstallmentPlanUpdateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<InstallmentPlanUpdateResponse>> UpdateOrder2WithHttpInfoAsync(string xSplititIdempotencyKey, string xSplititTouchPoint, InstallmentPlanUpdateRequestByIdentifier installmentPlanUpdateRequestByIdentifier, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.Web.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="installmentPlanNumber"></param>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="xSplititTouchPoint">TouchPoint</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VerifyAuthorizationResponse</returns>
        System.Threading.Tasks.Task<VerifyAuthorizationResponse> VerifyAuthorizationAsync(string installmentPlanNumber, string xSplititIdempotencyKey, string xSplititTouchPoint, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.Web.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="installmentPlanNumber"></param>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="xSplititTouchPoint">TouchPoint</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VerifyAuthorizationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerifyAuthorizationResponse>> VerifyAuthorizationWithHttpInfoAsync(string installmentPlanNumber, string xSplititIdempotencyKey, string xSplititTouchPoint, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInstallmentPlanApi : IInstallmentPlanApiSync, IInstallmentPlanApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class InstallmentPlanApi : IInstallmentPlanApi
    {
        private Splitit.Web.Net.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="InstallmentPlanApi"/> class.
        /// </summary>
        /// <returns></returns>
        public InstallmentPlanApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InstallmentPlanApi"/> class.
        /// </summary>
        /// <returns></returns>
        public InstallmentPlanApi(string basePath)
        {
            this.Configuration = Splitit.Web.Net.Client.Configuration.MergeConfigurations(
                Splitit.Web.Net.Client.GlobalConfiguration.Instance,
                new Splitit.Web.Net.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Splitit.Web.Net.Client.ApiClient(this.Configuration);
            this.AsynchronousClient = new Splitit.Web.Net.Client.ApiClient(this.Configuration);
            this.ExceptionFactory = Splitit.Web.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InstallmentPlanApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public InstallmentPlanApi(Splitit.Web.Net.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Splitit.Web.Net.Client.Configuration.MergeConfigurations(
                Splitit.Web.Net.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Splitit.Web.Net.Client.ApiClient(this.Configuration);
            this.AsynchronousClient = new Splitit.Web.Net.Client.ApiClient(this.Configuration);
            this.ExceptionFactory = Splitit.Web.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InstallmentPlanApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public InstallmentPlanApi(Splitit.Web.Net.Client.ISynchronousClient client, Splitit.Web.Net.Client.IAsynchronousClient asyncClient, Splitit.Web.Net.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Splitit.Web.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Splitit.Web.Net.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Splitit.Web.Net.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Splitit.Web.Net.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Splitit.Web.Net.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.Web.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="xSplititTouchPoint">TouchPoint</param>
        /// <param name="checkInstallmentsEligibilityRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InstallmentsEligibilityResponse</returns>
        public InstallmentsEligibilityResponse CheckEligibility(string xSplititIdempotencyKey, string xSplititTouchPoint, CheckInstallmentsEligibilityRequest checkInstallmentsEligibilityRequest, int operationIndex = 0)
        {
            Splitit.Web.Net.Client.ApiResponse<InstallmentsEligibilityResponse> localVarResponse = CheckEligibilityWithHttpInfo(xSplititIdempotencyKey, xSplititTouchPoint, checkInstallmentsEligibilityRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.Web.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="xSplititTouchPoint">TouchPoint</param>
        /// <param name="checkInstallmentsEligibilityRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InstallmentsEligibilityResponse</returns>
        public Splitit.Web.Net.Client.ApiResponse<InstallmentsEligibilityResponse> CheckEligibilityWithHttpInfo(string xSplititIdempotencyKey, string xSplititTouchPoint, CheckInstallmentsEligibilityRequest checkInstallmentsEligibilityRequest, int operationIndex = 0)
        {
            // verify the required parameter 'xSplititIdempotencyKey' is set
            if (xSplititIdempotencyKey == null)
            {
                throw new Splitit.Web.Net.Client.ApiException(400, "Missing required parameter 'xSplititIdempotencyKey' when calling InstallmentPlanApi->CheckEligibility");
            }

            // verify the required parameter 'xSplititTouchPoint' is set
            if (xSplititTouchPoint == null)
            {
                throw new Splitit.Web.Net.Client.ApiException(400, "Missing required parameter 'xSplititTouchPoint' when calling InstallmentPlanApi->CheckEligibility");
            }

            // verify the required parameter 'checkInstallmentsEligibilityRequest' is set
            if (checkInstallmentsEligibilityRequest == null)
            {
                throw new Splitit.Web.Net.Client.ApiException(400, "Missing required parameter 'checkInstallmentsEligibilityRequest' when calling InstallmentPlanApi->CheckEligibility");
            }

            Splitit.Web.Net.Client.RequestOptions localVarRequestOptions = new Splitit.Web.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/json-patch+json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "text/plain"
            };

            var localVarContentType = Splitit.Web.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Splitit.Web.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("X-Splitit-IdempotencyKey", Splitit.Web.Net.Client.ClientUtils.ParameterToString(xSplititIdempotencyKey)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("X-Splitit-TouchPoint", Splitit.Web.Net.Client.ClientUtils.ParameterToString(xSplititTouchPoint)); // header parameter
            localVarRequestOptions.Data = checkInstallmentsEligibilityRequest;

            localVarRequestOptions.Operation = "InstallmentPlanApi.CheckEligibility";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<InstallmentsEligibilityResponse>("/api/installmentplans/check-eligibility", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CheckEligibility", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.Web.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="xSplititTouchPoint">TouchPoint</param>
        /// <param name="checkInstallmentsEligibilityRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InstallmentsEligibilityResponse</returns>
        public async System.Threading.Tasks.Task<InstallmentsEligibilityResponse> CheckEligibilityAsync(string xSplititIdempotencyKey, string xSplititTouchPoint, CheckInstallmentsEligibilityRequest checkInstallmentsEligibilityRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Splitit.Web.Net.Client.ApiResponse<InstallmentsEligibilityResponse> localVarResponse = await CheckEligibilityWithHttpInfoAsync(xSplititIdempotencyKey, xSplititTouchPoint, checkInstallmentsEligibilityRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.Web.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="xSplititTouchPoint">TouchPoint</param>
        /// <param name="checkInstallmentsEligibilityRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InstallmentsEligibilityResponse)</returns>
        public async System.Threading.Tasks.Task<Splitit.Web.Net.Client.ApiResponse<InstallmentsEligibilityResponse>> CheckEligibilityWithHttpInfoAsync(string xSplititIdempotencyKey, string xSplititTouchPoint, CheckInstallmentsEligibilityRequest checkInstallmentsEligibilityRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xSplititIdempotencyKey' is set
            if (xSplititIdempotencyKey == null)
            {
                throw new Splitit.Web.Net.Client.ApiException(400, "Missing required parameter 'xSplititIdempotencyKey' when calling InstallmentPlanApi->CheckEligibility");
            }

            // verify the required parameter 'xSplititTouchPoint' is set
            if (xSplititTouchPoint == null)
            {
                throw new Splitit.Web.Net.Client.ApiException(400, "Missing required parameter 'xSplititTouchPoint' when calling InstallmentPlanApi->CheckEligibility");
            }

            // verify the required parameter 'checkInstallmentsEligibilityRequest' is set
            if (checkInstallmentsEligibilityRequest == null)
            {
                throw new Splitit.Web.Net.Client.ApiException(400, "Missing required parameter 'checkInstallmentsEligibilityRequest' when calling InstallmentPlanApi->CheckEligibility");
            }


            Splitit.Web.Net.Client.RequestOptions localVarRequestOptions = new Splitit.Web.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/json-patch+json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "text/plain"
            };

            var localVarContentType = Splitit.Web.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Splitit.Web.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("X-Splitit-IdempotencyKey", Splitit.Web.Net.Client.ClientUtils.ParameterToString(xSplititIdempotencyKey, dataFormat: "")); // header parameter
            localVarRequestOptions.HeaderParameters.Add("X-Splitit-TouchPoint", Splitit.Web.Net.Client.ClientUtils.ParameterToString(xSplititTouchPoint, dataFormat: "")); // header parameter
            localVarRequestOptions.Data = checkInstallmentsEligibilityRequest;

            localVarRequestOptions.Operation = "InstallmentPlanApi.CheckEligibility";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InstallmentsEligibilityResponse>("/api/installmentplans/check-eligibility", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CheckEligibility", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.Web.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="installmentPlanNumber"></param>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="xSplititTouchPoint">TouchPoint</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InstallmentPlanGetResponse</returns>
        public InstallmentPlanGetResponse Get(string installmentPlanNumber, string xSplititIdempotencyKey, string xSplititTouchPoint, int operationIndex = 0)
        {
            Splitit.Web.Net.Client.ApiResponse<InstallmentPlanGetResponse> localVarResponse = GetWithHttpInfo(installmentPlanNumber, xSplititIdempotencyKey, xSplititTouchPoint);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.Web.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="installmentPlanNumber"></param>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="xSplititTouchPoint">TouchPoint</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InstallmentPlanGetResponse</returns>
        public Splitit.Web.Net.Client.ApiResponse<InstallmentPlanGetResponse> GetWithHttpInfo(string installmentPlanNumber, string xSplititIdempotencyKey, string xSplititTouchPoint, int operationIndex = 0)
        {
            // verify the required parameter 'installmentPlanNumber' is set
            if (installmentPlanNumber == null)
            {
                throw new Splitit.Web.Net.Client.ApiException(400, "Missing required parameter 'installmentPlanNumber' when calling InstallmentPlanApi->Get");
            }

            // verify the required parameter 'xSplititIdempotencyKey' is set
            if (xSplititIdempotencyKey == null)
            {
                throw new Splitit.Web.Net.Client.ApiException(400, "Missing required parameter 'xSplititIdempotencyKey' when calling InstallmentPlanApi->Get");
            }

            // verify the required parameter 'xSplititTouchPoint' is set
            if (xSplititTouchPoint == null)
            {
                throw new Splitit.Web.Net.Client.ApiException(400, "Missing required parameter 'xSplititTouchPoint' when calling InstallmentPlanApi->Get");
            }

            Splitit.Web.Net.Client.RequestOptions localVarRequestOptions = new Splitit.Web.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "text/plain"
            };

            var localVarContentType = Splitit.Web.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Splitit.Web.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("installmentPlanNumber", Splitit.Web.Net.Client.ClientUtils.ParameterToString(installmentPlanNumber)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("X-Splitit-IdempotencyKey", Splitit.Web.Net.Client.ClientUtils.ParameterToString(xSplititIdempotencyKey)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("X-Splitit-TouchPoint", Splitit.Web.Net.Client.ClientUtils.ParameterToString(xSplititTouchPoint)); // header parameter

            localVarRequestOptions.Operation = "InstallmentPlanApi.Get";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<InstallmentPlanGetResponse>("/api/installmentplans/{installmentPlanNumber}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Get", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.Web.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="installmentPlanNumber"></param>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="xSplititTouchPoint">TouchPoint</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InstallmentPlanGetResponse</returns>
        public async System.Threading.Tasks.Task<InstallmentPlanGetResponse> GetAsync(string installmentPlanNumber, string xSplititIdempotencyKey, string xSplititTouchPoint, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Splitit.Web.Net.Client.ApiResponse<InstallmentPlanGetResponse> localVarResponse = await GetWithHttpInfoAsync(installmentPlanNumber, xSplititIdempotencyKey, xSplititTouchPoint, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.Web.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="installmentPlanNumber"></param>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="xSplititTouchPoint">TouchPoint</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InstallmentPlanGetResponse)</returns>
        public async System.Threading.Tasks.Task<Splitit.Web.Net.Client.ApiResponse<InstallmentPlanGetResponse>> GetWithHttpInfoAsync(string installmentPlanNumber, string xSplititIdempotencyKey, string xSplititTouchPoint, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'installmentPlanNumber' is set
            if (installmentPlanNumber == null)
            {
                throw new Splitit.Web.Net.Client.ApiException(400, "Missing required parameter 'installmentPlanNumber' when calling InstallmentPlanApi->Get");
            }

            // verify the required parameter 'xSplititIdempotencyKey' is set
            if (xSplititIdempotencyKey == null)
            {
                throw new Splitit.Web.Net.Client.ApiException(400, "Missing required parameter 'xSplititIdempotencyKey' when calling InstallmentPlanApi->Get");
            }

            // verify the required parameter 'xSplititTouchPoint' is set
            if (xSplititTouchPoint == null)
            {
                throw new Splitit.Web.Net.Client.ApiException(400, "Missing required parameter 'xSplititTouchPoint' when calling InstallmentPlanApi->Get");
            }


            Splitit.Web.Net.Client.RequestOptions localVarRequestOptions = new Splitit.Web.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "text/plain"
            };

            var localVarContentType = Splitit.Web.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Splitit.Web.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("installmentPlanNumber", Splitit.Web.Net.Client.ClientUtils.ParameterToString(installmentPlanNumber)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("X-Splitit-IdempotencyKey", Splitit.Web.Net.Client.ClientUtils.ParameterToString(xSplititIdempotencyKey, dataFormat: "")); // header parameter
            localVarRequestOptions.HeaderParameters.Add("X-Splitit-TouchPoint", Splitit.Web.Net.Client.ClientUtils.ParameterToString(xSplititTouchPoint, dataFormat: "")); // header parameter

            localVarRequestOptions.Operation = "InstallmentPlanApi.Get";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InstallmentPlanGetResponse>("/api/installmentplans/{installmentPlanNumber}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Get", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.Web.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="xSplititTouchPoint">TouchPoint</param>
        /// <param name="installmentPlanInitiateRequest"></param>
        /// <param name="xSplititTestMode"> (optional)</param>
        /// <param name="splititclientinfo"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InitiatePlanResponse</returns>
        public InitiatePlanResponse Post(string xSplititIdempotencyKey, string xSplititTouchPoint, InstallmentPlanInitiateRequest installmentPlanInitiateRequest, string xSplititTestMode = default(string), string splititclientinfo = default(string), int operationIndex = 0)
        {
            Splitit.Web.Net.Client.ApiResponse<InitiatePlanResponse> localVarResponse = PostWithHttpInfo(xSplititIdempotencyKey, xSplititTouchPoint, installmentPlanInitiateRequest, xSplititTestMode, splititclientinfo);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.Web.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="xSplititTouchPoint">TouchPoint</param>
        /// <param name="installmentPlanInitiateRequest"></param>
        /// <param name="xSplititTestMode"> (optional)</param>
        /// <param name="splititclientinfo"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InitiatePlanResponse</returns>
        public Splitit.Web.Net.Client.ApiResponse<InitiatePlanResponse> PostWithHttpInfo(string xSplititIdempotencyKey, string xSplititTouchPoint, InstallmentPlanInitiateRequest installmentPlanInitiateRequest, string xSplititTestMode = default(string), string splititclientinfo = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'xSplititIdempotencyKey' is set
            if (xSplititIdempotencyKey == null)
            {
                throw new Splitit.Web.Net.Client.ApiException(400, "Missing required parameter 'xSplititIdempotencyKey' when calling InstallmentPlanApi->Post");
            }

            // verify the required parameter 'xSplititTouchPoint' is set
            if (xSplititTouchPoint == null)
            {
                throw new Splitit.Web.Net.Client.ApiException(400, "Missing required parameter 'xSplititTouchPoint' when calling InstallmentPlanApi->Post");
            }

            // verify the required parameter 'installmentPlanInitiateRequest' is set
            if (installmentPlanInitiateRequest == null)
            {
                throw new Splitit.Web.Net.Client.ApiException(400, "Missing required parameter 'installmentPlanInitiateRequest' when calling InstallmentPlanApi->Post");
            }

            Splitit.Web.Net.Client.RequestOptions localVarRequestOptions = new Splitit.Web.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/json-patch+json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "text/plain"
            };

            var localVarContentType = Splitit.Web.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Splitit.Web.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (xSplititTestMode != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Splitit-TestMode", Splitit.Web.Net.Client.ClientUtils.ParameterToString(xSplititTestMode)); // header parameter
            }
            if (splititclientinfo != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Splititclientinfo", Splitit.Web.Net.Client.ClientUtils.ParameterToString(splititclientinfo)); // header parameter
            }
            localVarRequestOptions.HeaderParameters.Add("X-Splitit-IdempotencyKey", Splitit.Web.Net.Client.ClientUtils.ParameterToString(xSplititIdempotencyKey)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("X-Splitit-TouchPoint", Splitit.Web.Net.Client.ClientUtils.ParameterToString(xSplititTouchPoint)); // header parameter
            localVarRequestOptions.Data = installmentPlanInitiateRequest;

            localVarRequestOptions.Operation = "InstallmentPlanApi.Post";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<InitiatePlanResponse>("/api/installmentplans/initiate", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Post", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.Web.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="xSplititTouchPoint">TouchPoint</param>
        /// <param name="installmentPlanInitiateRequest"></param>
        /// <param name="xSplititTestMode"> (optional)</param>
        /// <param name="splititclientinfo"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InitiatePlanResponse</returns>
        public async System.Threading.Tasks.Task<InitiatePlanResponse> PostAsync(string xSplititIdempotencyKey, string xSplititTouchPoint, InstallmentPlanInitiateRequest installmentPlanInitiateRequest, string xSplititTestMode = default(string), string splititclientinfo = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Splitit.Web.Net.Client.ApiResponse<InitiatePlanResponse> localVarResponse = await PostWithHttpInfoAsync(xSplititIdempotencyKey, xSplititTouchPoint, installmentPlanInitiateRequest, xSplititTestMode, splititclientinfo, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.Web.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="xSplititTouchPoint">TouchPoint</param>
        /// <param name="installmentPlanInitiateRequest"></param>
        /// <param name="xSplititTestMode"> (optional)</param>
        /// <param name="splititclientinfo"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InitiatePlanResponse)</returns>
        public async System.Threading.Tasks.Task<Splitit.Web.Net.Client.ApiResponse<InitiatePlanResponse>> PostWithHttpInfoAsync(string xSplititIdempotencyKey, string xSplititTouchPoint, InstallmentPlanInitiateRequest installmentPlanInitiateRequest, string xSplititTestMode = default(string), string splititclientinfo = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xSplititIdempotencyKey' is set
            if (xSplititIdempotencyKey == null)
            {
                throw new Splitit.Web.Net.Client.ApiException(400, "Missing required parameter 'xSplititIdempotencyKey' when calling InstallmentPlanApi->Post");
            }

            // verify the required parameter 'xSplititTouchPoint' is set
            if (xSplititTouchPoint == null)
            {
                throw new Splitit.Web.Net.Client.ApiException(400, "Missing required parameter 'xSplititTouchPoint' when calling InstallmentPlanApi->Post");
            }

            // verify the required parameter 'installmentPlanInitiateRequest' is set
            if (installmentPlanInitiateRequest == null)
            {
                throw new Splitit.Web.Net.Client.ApiException(400, "Missing required parameter 'installmentPlanInitiateRequest' when calling InstallmentPlanApi->Post");
            }


            Splitit.Web.Net.Client.RequestOptions localVarRequestOptions = new Splitit.Web.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/json-patch+json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "text/plain"
            };

            var localVarContentType = Splitit.Web.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Splitit.Web.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (xSplititTestMode != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Splitit-TestMode", Splitit.Web.Net.Client.ClientUtils.ParameterToString(xSplititTestMode, dataFormat: "")); // header parameter
            }
            if (splititclientinfo != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Splititclientinfo", Splitit.Web.Net.Client.ClientUtils.ParameterToString(splititclientinfo, dataFormat: "")); // header parameter
            }
            localVarRequestOptions.HeaderParameters.Add("X-Splitit-IdempotencyKey", Splitit.Web.Net.Client.ClientUtils.ParameterToString(xSplititIdempotencyKey, dataFormat: "")); // header parameter
            localVarRequestOptions.HeaderParameters.Add("X-Splitit-TouchPoint", Splitit.Web.Net.Client.ClientUtils.ParameterToString(xSplititTouchPoint, dataFormat: "")); // header parameter
            localVarRequestOptions.Data = installmentPlanInitiateRequest;

            localVarRequestOptions.Operation = "InstallmentPlanApi.Post";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InitiatePlanResponse>("/api/installmentplans/initiate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Post", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.Web.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="xSplititTouchPoint">TouchPoint</param>
        /// <param name="installmentPlanCreateRequest"></param>
        /// <param name="xSplititTestMode"> (optional)</param>
        /// <param name="splititclientinfo"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InstallmentPlanCreateResponse</returns>
        public InstallmentPlanCreateResponse Post2(string xSplititIdempotencyKey, string xSplititTouchPoint, InstallmentPlanCreateRequest installmentPlanCreateRequest, string xSplititTestMode = default(string), string splititclientinfo = default(string), int operationIndex = 0)
        {
            Splitit.Web.Net.Client.ApiResponse<InstallmentPlanCreateResponse> localVarResponse = Post2WithHttpInfo(xSplititIdempotencyKey, xSplititTouchPoint, installmentPlanCreateRequest, xSplititTestMode, splititclientinfo);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.Web.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="xSplititTouchPoint">TouchPoint</param>
        /// <param name="installmentPlanCreateRequest"></param>
        /// <param name="xSplititTestMode"> (optional)</param>
        /// <param name="splititclientinfo"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InstallmentPlanCreateResponse</returns>
        public Splitit.Web.Net.Client.ApiResponse<InstallmentPlanCreateResponse> Post2WithHttpInfo(string xSplititIdempotencyKey, string xSplititTouchPoint, InstallmentPlanCreateRequest installmentPlanCreateRequest, string xSplititTestMode = default(string), string splititclientinfo = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'xSplititIdempotencyKey' is set
            if (xSplititIdempotencyKey == null)
            {
                throw new Splitit.Web.Net.Client.ApiException(400, "Missing required parameter 'xSplititIdempotencyKey' when calling InstallmentPlanApi->Post2");
            }

            // verify the required parameter 'xSplititTouchPoint' is set
            if (xSplititTouchPoint == null)
            {
                throw new Splitit.Web.Net.Client.ApiException(400, "Missing required parameter 'xSplititTouchPoint' when calling InstallmentPlanApi->Post2");
            }

            // verify the required parameter 'installmentPlanCreateRequest' is set
            if (installmentPlanCreateRequest == null)
            {
                throw new Splitit.Web.Net.Client.ApiException(400, "Missing required parameter 'installmentPlanCreateRequest' when calling InstallmentPlanApi->Post2");
            }

            Splitit.Web.Net.Client.RequestOptions localVarRequestOptions = new Splitit.Web.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/json-patch+json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "text/plain"
            };

            var localVarContentType = Splitit.Web.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Splitit.Web.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (xSplititTestMode != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Splitit-TestMode", Splitit.Web.Net.Client.ClientUtils.ParameterToString(xSplititTestMode)); // header parameter
            }
            if (splititclientinfo != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Splititclientinfo", Splitit.Web.Net.Client.ClientUtils.ParameterToString(splititclientinfo)); // header parameter
            }
            localVarRequestOptions.HeaderParameters.Add("X-Splitit-IdempotencyKey", Splitit.Web.Net.Client.ClientUtils.ParameterToString(xSplititIdempotencyKey)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("X-Splitit-TouchPoint", Splitit.Web.Net.Client.ClientUtils.ParameterToString(xSplititTouchPoint)); // header parameter
            localVarRequestOptions.Data = installmentPlanCreateRequest;

            localVarRequestOptions.Operation = "InstallmentPlanApi.Post2";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<InstallmentPlanCreateResponse>("/api/installmentplans", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Post2", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.Web.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="xSplititTouchPoint">TouchPoint</param>
        /// <param name="installmentPlanCreateRequest"></param>
        /// <param name="xSplititTestMode"> (optional)</param>
        /// <param name="splititclientinfo"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InstallmentPlanCreateResponse</returns>
        public async System.Threading.Tasks.Task<InstallmentPlanCreateResponse> Post2Async(string xSplititIdempotencyKey, string xSplititTouchPoint, InstallmentPlanCreateRequest installmentPlanCreateRequest, string xSplititTestMode = default(string), string splititclientinfo = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Splitit.Web.Net.Client.ApiResponse<InstallmentPlanCreateResponse> localVarResponse = await Post2WithHttpInfoAsync(xSplititIdempotencyKey, xSplititTouchPoint, installmentPlanCreateRequest, xSplititTestMode, splititclientinfo, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.Web.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="xSplititTouchPoint">TouchPoint</param>
        /// <param name="installmentPlanCreateRequest"></param>
        /// <param name="xSplititTestMode"> (optional)</param>
        /// <param name="splititclientinfo"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InstallmentPlanCreateResponse)</returns>
        public async System.Threading.Tasks.Task<Splitit.Web.Net.Client.ApiResponse<InstallmentPlanCreateResponse>> Post2WithHttpInfoAsync(string xSplititIdempotencyKey, string xSplititTouchPoint, InstallmentPlanCreateRequest installmentPlanCreateRequest, string xSplititTestMode = default(string), string splititclientinfo = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xSplititIdempotencyKey' is set
            if (xSplititIdempotencyKey == null)
            {
                throw new Splitit.Web.Net.Client.ApiException(400, "Missing required parameter 'xSplititIdempotencyKey' when calling InstallmentPlanApi->Post2");
            }

            // verify the required parameter 'xSplititTouchPoint' is set
            if (xSplititTouchPoint == null)
            {
                throw new Splitit.Web.Net.Client.ApiException(400, "Missing required parameter 'xSplititTouchPoint' when calling InstallmentPlanApi->Post2");
            }

            // verify the required parameter 'installmentPlanCreateRequest' is set
            if (installmentPlanCreateRequest == null)
            {
                throw new Splitit.Web.Net.Client.ApiException(400, "Missing required parameter 'installmentPlanCreateRequest' when calling InstallmentPlanApi->Post2");
            }


            Splitit.Web.Net.Client.RequestOptions localVarRequestOptions = new Splitit.Web.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/json-patch+json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "text/plain"
            };

            var localVarContentType = Splitit.Web.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Splitit.Web.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (xSplititTestMode != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Splitit-TestMode", Splitit.Web.Net.Client.ClientUtils.ParameterToString(xSplititTestMode, dataFormat: "")); // header parameter
            }
            if (splititclientinfo != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Splititclientinfo", Splitit.Web.Net.Client.ClientUtils.ParameterToString(splititclientinfo, dataFormat: "")); // header parameter
            }
            localVarRequestOptions.HeaderParameters.Add("X-Splitit-IdempotencyKey", Splitit.Web.Net.Client.ClientUtils.ParameterToString(xSplititIdempotencyKey, dataFormat: "")); // header parameter
            localVarRequestOptions.HeaderParameters.Add("X-Splitit-TouchPoint", Splitit.Web.Net.Client.ClientUtils.ParameterToString(xSplititTouchPoint, dataFormat: "")); // header parameter
            localVarRequestOptions.Data = installmentPlanCreateRequest;

            localVarRequestOptions.Operation = "InstallmentPlanApi.Post2";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InstallmentPlanCreateResponse>("/api/installmentplans", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Post2", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.Web.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="installmentPlanNumber"></param>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="xSplititTouchPoint">TouchPoint</param>
        /// <param name="installmentPlanRefundRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InstallmentPlanRefundResponse</returns>
        public InstallmentPlanRefundResponse Refund(string installmentPlanNumber, string xSplititIdempotencyKey, string xSplititTouchPoint, InstallmentPlanRefundRequest installmentPlanRefundRequest, int operationIndex = 0)
        {
            Splitit.Web.Net.Client.ApiResponse<InstallmentPlanRefundResponse> localVarResponse = RefundWithHttpInfo(installmentPlanNumber, xSplititIdempotencyKey, xSplititTouchPoint, installmentPlanRefundRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.Web.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="installmentPlanNumber"></param>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="xSplititTouchPoint">TouchPoint</param>
        /// <param name="installmentPlanRefundRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InstallmentPlanRefundResponse</returns>
        public Splitit.Web.Net.Client.ApiResponse<InstallmentPlanRefundResponse> RefundWithHttpInfo(string installmentPlanNumber, string xSplititIdempotencyKey, string xSplititTouchPoint, InstallmentPlanRefundRequest installmentPlanRefundRequest, int operationIndex = 0)
        {
            // verify the required parameter 'installmentPlanNumber' is set
            if (installmentPlanNumber == null)
            {
                throw new Splitit.Web.Net.Client.ApiException(400, "Missing required parameter 'installmentPlanNumber' when calling InstallmentPlanApi->Refund");
            }

            // verify the required parameter 'xSplititIdempotencyKey' is set
            if (xSplititIdempotencyKey == null)
            {
                throw new Splitit.Web.Net.Client.ApiException(400, "Missing required parameter 'xSplititIdempotencyKey' when calling InstallmentPlanApi->Refund");
            }

            // verify the required parameter 'xSplititTouchPoint' is set
            if (xSplititTouchPoint == null)
            {
                throw new Splitit.Web.Net.Client.ApiException(400, "Missing required parameter 'xSplititTouchPoint' when calling InstallmentPlanApi->Refund");
            }

            // verify the required parameter 'installmentPlanRefundRequest' is set
            if (installmentPlanRefundRequest == null)
            {
                throw new Splitit.Web.Net.Client.ApiException(400, "Missing required parameter 'installmentPlanRefundRequest' when calling InstallmentPlanApi->Refund");
            }

            Splitit.Web.Net.Client.RequestOptions localVarRequestOptions = new Splitit.Web.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/json-patch+json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "text/plain"
            };

            var localVarContentType = Splitit.Web.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Splitit.Web.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("installmentPlanNumber", Splitit.Web.Net.Client.ClientUtils.ParameterToString(installmentPlanNumber)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("X-Splitit-IdempotencyKey", Splitit.Web.Net.Client.ClientUtils.ParameterToString(xSplititIdempotencyKey)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("X-Splitit-TouchPoint", Splitit.Web.Net.Client.ClientUtils.ParameterToString(xSplititTouchPoint)); // header parameter
            localVarRequestOptions.Data = installmentPlanRefundRequest;

            localVarRequestOptions.Operation = "InstallmentPlanApi.Refund";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<InstallmentPlanRefundResponse>("/api/installmentplans/{installmentPlanNumber}/refund", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Refund", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.Web.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="installmentPlanNumber"></param>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="xSplititTouchPoint">TouchPoint</param>
        /// <param name="installmentPlanRefundRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InstallmentPlanRefundResponse</returns>
        public async System.Threading.Tasks.Task<InstallmentPlanRefundResponse> RefundAsync(string installmentPlanNumber, string xSplititIdempotencyKey, string xSplititTouchPoint, InstallmentPlanRefundRequest installmentPlanRefundRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Splitit.Web.Net.Client.ApiResponse<InstallmentPlanRefundResponse> localVarResponse = await RefundWithHttpInfoAsync(installmentPlanNumber, xSplititIdempotencyKey, xSplititTouchPoint, installmentPlanRefundRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.Web.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="installmentPlanNumber"></param>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="xSplititTouchPoint">TouchPoint</param>
        /// <param name="installmentPlanRefundRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InstallmentPlanRefundResponse)</returns>
        public async System.Threading.Tasks.Task<Splitit.Web.Net.Client.ApiResponse<InstallmentPlanRefundResponse>> RefundWithHttpInfoAsync(string installmentPlanNumber, string xSplititIdempotencyKey, string xSplititTouchPoint, InstallmentPlanRefundRequest installmentPlanRefundRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'installmentPlanNumber' is set
            if (installmentPlanNumber == null)
            {
                throw new Splitit.Web.Net.Client.ApiException(400, "Missing required parameter 'installmentPlanNumber' when calling InstallmentPlanApi->Refund");
            }

            // verify the required parameter 'xSplititIdempotencyKey' is set
            if (xSplititIdempotencyKey == null)
            {
                throw new Splitit.Web.Net.Client.ApiException(400, "Missing required parameter 'xSplititIdempotencyKey' when calling InstallmentPlanApi->Refund");
            }

            // verify the required parameter 'xSplititTouchPoint' is set
            if (xSplititTouchPoint == null)
            {
                throw new Splitit.Web.Net.Client.ApiException(400, "Missing required parameter 'xSplititTouchPoint' when calling InstallmentPlanApi->Refund");
            }

            // verify the required parameter 'installmentPlanRefundRequest' is set
            if (installmentPlanRefundRequest == null)
            {
                throw new Splitit.Web.Net.Client.ApiException(400, "Missing required parameter 'installmentPlanRefundRequest' when calling InstallmentPlanApi->Refund");
            }


            Splitit.Web.Net.Client.RequestOptions localVarRequestOptions = new Splitit.Web.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/json-patch+json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "text/plain"
            };

            var localVarContentType = Splitit.Web.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Splitit.Web.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("installmentPlanNumber", Splitit.Web.Net.Client.ClientUtils.ParameterToString(installmentPlanNumber)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("X-Splitit-IdempotencyKey", Splitit.Web.Net.Client.ClientUtils.ParameterToString(xSplititIdempotencyKey, dataFormat: "")); // header parameter
            localVarRequestOptions.HeaderParameters.Add("X-Splitit-TouchPoint", Splitit.Web.Net.Client.ClientUtils.ParameterToString(xSplititTouchPoint, dataFormat: "")); // header parameter
            localVarRequestOptions.Data = installmentPlanRefundRequest;

            localVarRequestOptions.Operation = "InstallmentPlanApi.Refund";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InstallmentPlanRefundResponse>("/api/installmentplans/{installmentPlanNumber}/refund", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Refund", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.Web.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="xSplititTouchPoint">TouchPoint</param>
        /// <param name="installmentPlanNumber"> (optional)</param>
        /// <param name="refOrderNumber"> (optional)</param>
        /// <param name="extendedParams"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InstallmentPlanSearchResponse</returns>
        public InstallmentPlanSearchResponse Search(string xSplititIdempotencyKey, string xSplititTouchPoint, string installmentPlanNumber = default(string), string refOrderNumber = default(string), Dictionary<string, string> extendedParams = default(Dictionary<string, string>), int operationIndex = 0)
        {
            Splitit.Web.Net.Client.ApiResponse<InstallmentPlanSearchResponse> localVarResponse = SearchWithHttpInfo(xSplititIdempotencyKey, xSplititTouchPoint, installmentPlanNumber, refOrderNumber, extendedParams);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.Web.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="xSplititTouchPoint">TouchPoint</param>
        /// <param name="installmentPlanNumber"> (optional)</param>
        /// <param name="refOrderNumber"> (optional)</param>
        /// <param name="extendedParams"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InstallmentPlanSearchResponse</returns>
        public Splitit.Web.Net.Client.ApiResponse<InstallmentPlanSearchResponse> SearchWithHttpInfo(string xSplititIdempotencyKey, string xSplititTouchPoint, string installmentPlanNumber = default(string), string refOrderNumber = default(string), Dictionary<string, string> extendedParams = default(Dictionary<string, string>), int operationIndex = 0)
        {
            // verify the required parameter 'xSplititIdempotencyKey' is set
            if (xSplititIdempotencyKey == null)
            {
                throw new Splitit.Web.Net.Client.ApiException(400, "Missing required parameter 'xSplititIdempotencyKey' when calling InstallmentPlanApi->Search");
            }

            // verify the required parameter 'xSplititTouchPoint' is set
            if (xSplititTouchPoint == null)
            {
                throw new Splitit.Web.Net.Client.ApiException(400, "Missing required parameter 'xSplititTouchPoint' when calling InstallmentPlanApi->Search");
            }

            Splitit.Web.Net.Client.RequestOptions localVarRequestOptions = new Splitit.Web.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "text/plain"
            };

            var localVarContentType = Splitit.Web.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Splitit.Web.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (installmentPlanNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(Splitit.Web.Net.Client.ClientUtils.ParameterToMultiMap("", "installmentPlanNumber", installmentPlanNumber, ""));
            }
            if (refOrderNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(Splitit.Web.Net.Client.ClientUtils.ParameterToMultiMap("", "refOrderNumber", refOrderNumber, ""));
            }
            if (extendedParams != null)
            {
                localVarRequestOptions.QueryParameters.Add(Splitit.Web.Net.Client.ClientUtils.ParameterToMultiMap("", "extendedParams", extendedParams, ""));
            }
            localVarRequestOptions.HeaderParameters.Add("X-Splitit-IdempotencyKey", Splitit.Web.Net.Client.ClientUtils.ParameterToString(xSplititIdempotencyKey)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("X-Splitit-TouchPoint", Splitit.Web.Net.Client.ClientUtils.ParameterToString(xSplititTouchPoint)); // header parameter

            localVarRequestOptions.Operation = "InstallmentPlanApi.Search";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<InstallmentPlanSearchResponse>("/api/installmentplans/search", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Search", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.Web.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="xSplititTouchPoint">TouchPoint</param>
        /// <param name="installmentPlanNumber"> (optional)</param>
        /// <param name="refOrderNumber"> (optional)</param>
        /// <param name="extendedParams"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InstallmentPlanSearchResponse</returns>
        public async System.Threading.Tasks.Task<InstallmentPlanSearchResponse> SearchAsync(string xSplititIdempotencyKey, string xSplititTouchPoint, string installmentPlanNumber = default(string), string refOrderNumber = default(string), Dictionary<string, string> extendedParams = default(Dictionary<string, string>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Splitit.Web.Net.Client.ApiResponse<InstallmentPlanSearchResponse> localVarResponse = await SearchWithHttpInfoAsync(xSplititIdempotencyKey, xSplititTouchPoint, installmentPlanNumber, refOrderNumber, extendedParams, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.Web.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="xSplititTouchPoint">TouchPoint</param>
        /// <param name="installmentPlanNumber"> (optional)</param>
        /// <param name="refOrderNumber"> (optional)</param>
        /// <param name="extendedParams"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InstallmentPlanSearchResponse)</returns>
        public async System.Threading.Tasks.Task<Splitit.Web.Net.Client.ApiResponse<InstallmentPlanSearchResponse>> SearchWithHttpInfoAsync(string xSplititIdempotencyKey, string xSplititTouchPoint, string installmentPlanNumber = default(string), string refOrderNumber = default(string), Dictionary<string, string> extendedParams = default(Dictionary<string, string>), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xSplititIdempotencyKey' is set
            if (xSplititIdempotencyKey == null)
            {
                throw new Splitit.Web.Net.Client.ApiException(400, "Missing required parameter 'xSplititIdempotencyKey' when calling InstallmentPlanApi->Search");
            }

            // verify the required parameter 'xSplititTouchPoint' is set
            if (xSplititTouchPoint == null)
            {
                throw new Splitit.Web.Net.Client.ApiException(400, "Missing required parameter 'xSplititTouchPoint' when calling InstallmentPlanApi->Search");
            }


            Splitit.Web.Net.Client.RequestOptions localVarRequestOptions = new Splitit.Web.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "text/plain"
            };

            var localVarContentType = Splitit.Web.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Splitit.Web.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (installmentPlanNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(Splitit.Web.Net.Client.ClientUtils.ParameterToMultiMap("", "installmentPlanNumber", installmentPlanNumber, ""));
            }
            if (refOrderNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(Splitit.Web.Net.Client.ClientUtils.ParameterToMultiMap("", "refOrderNumber", refOrderNumber, ""));
            }
            if (extendedParams != null)
            {
                localVarRequestOptions.QueryParameters.Add(Splitit.Web.Net.Client.ClientUtils.ParameterToMultiMap("", "extendedParams", extendedParams, ""));
            }
            localVarRequestOptions.HeaderParameters.Add("X-Splitit-IdempotencyKey", Splitit.Web.Net.Client.ClientUtils.ParameterToString(xSplititIdempotencyKey, dataFormat: "")); // header parameter
            localVarRequestOptions.HeaderParameters.Add("X-Splitit-TouchPoint", Splitit.Web.Net.Client.ClientUtils.ParameterToString(xSplititTouchPoint, dataFormat: "")); // header parameter

            localVarRequestOptions.Operation = "InstallmentPlanApi.Search";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InstallmentPlanSearchResponse>("/api/installmentplans/search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Search", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.Web.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="installmentPlanNumber"></param>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="xSplititTouchPoint">TouchPoint</param>
        /// <param name="installmentPlanUpdateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InstallmentPlanUpdateResponse</returns>
        public InstallmentPlanUpdateResponse UpdateOrder(string installmentPlanNumber, string xSplititIdempotencyKey, string xSplititTouchPoint, InstallmentPlanUpdateRequest installmentPlanUpdateRequest, int operationIndex = 0)
        {
            Splitit.Web.Net.Client.ApiResponse<InstallmentPlanUpdateResponse> localVarResponse = UpdateOrderWithHttpInfo(installmentPlanNumber, xSplititIdempotencyKey, xSplititTouchPoint, installmentPlanUpdateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.Web.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="installmentPlanNumber"></param>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="xSplititTouchPoint">TouchPoint</param>
        /// <param name="installmentPlanUpdateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InstallmentPlanUpdateResponse</returns>
        public Splitit.Web.Net.Client.ApiResponse<InstallmentPlanUpdateResponse> UpdateOrderWithHttpInfo(string installmentPlanNumber, string xSplititIdempotencyKey, string xSplititTouchPoint, InstallmentPlanUpdateRequest installmentPlanUpdateRequest, int operationIndex = 0)
        {
            // verify the required parameter 'installmentPlanNumber' is set
            if (installmentPlanNumber == null)
            {
                throw new Splitit.Web.Net.Client.ApiException(400, "Missing required parameter 'installmentPlanNumber' when calling InstallmentPlanApi->UpdateOrder");
            }

            // verify the required parameter 'xSplititIdempotencyKey' is set
            if (xSplititIdempotencyKey == null)
            {
                throw new Splitit.Web.Net.Client.ApiException(400, "Missing required parameter 'xSplititIdempotencyKey' when calling InstallmentPlanApi->UpdateOrder");
            }

            // verify the required parameter 'xSplititTouchPoint' is set
            if (xSplititTouchPoint == null)
            {
                throw new Splitit.Web.Net.Client.ApiException(400, "Missing required parameter 'xSplititTouchPoint' when calling InstallmentPlanApi->UpdateOrder");
            }

            // verify the required parameter 'installmentPlanUpdateRequest' is set
            if (installmentPlanUpdateRequest == null)
            {
                throw new Splitit.Web.Net.Client.ApiException(400, "Missing required parameter 'installmentPlanUpdateRequest' when calling InstallmentPlanApi->UpdateOrder");
            }

            Splitit.Web.Net.Client.RequestOptions localVarRequestOptions = new Splitit.Web.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/json-patch+json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "text/plain"
            };

            var localVarContentType = Splitit.Web.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Splitit.Web.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("installmentPlanNumber", Splitit.Web.Net.Client.ClientUtils.ParameterToString(installmentPlanNumber)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("X-Splitit-IdempotencyKey", Splitit.Web.Net.Client.ClientUtils.ParameterToString(xSplititIdempotencyKey)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("X-Splitit-TouchPoint", Splitit.Web.Net.Client.ClientUtils.ParameterToString(xSplititTouchPoint)); // header parameter
            localVarRequestOptions.Data = installmentPlanUpdateRequest;

            localVarRequestOptions.Operation = "InstallmentPlanApi.UpdateOrder";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<InstallmentPlanUpdateResponse>("/api/installmentplans/{installmentPlanNumber}/updateorder", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateOrder", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.Web.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="installmentPlanNumber"></param>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="xSplititTouchPoint">TouchPoint</param>
        /// <param name="installmentPlanUpdateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InstallmentPlanUpdateResponse</returns>
        public async System.Threading.Tasks.Task<InstallmentPlanUpdateResponse> UpdateOrderAsync(string installmentPlanNumber, string xSplititIdempotencyKey, string xSplititTouchPoint, InstallmentPlanUpdateRequest installmentPlanUpdateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Splitit.Web.Net.Client.ApiResponse<InstallmentPlanUpdateResponse> localVarResponse = await UpdateOrderWithHttpInfoAsync(installmentPlanNumber, xSplititIdempotencyKey, xSplititTouchPoint, installmentPlanUpdateRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.Web.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="installmentPlanNumber"></param>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="xSplititTouchPoint">TouchPoint</param>
        /// <param name="installmentPlanUpdateRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InstallmentPlanUpdateResponse)</returns>
        public async System.Threading.Tasks.Task<Splitit.Web.Net.Client.ApiResponse<InstallmentPlanUpdateResponse>> UpdateOrderWithHttpInfoAsync(string installmentPlanNumber, string xSplititIdempotencyKey, string xSplititTouchPoint, InstallmentPlanUpdateRequest installmentPlanUpdateRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'installmentPlanNumber' is set
            if (installmentPlanNumber == null)
            {
                throw new Splitit.Web.Net.Client.ApiException(400, "Missing required parameter 'installmentPlanNumber' when calling InstallmentPlanApi->UpdateOrder");
            }

            // verify the required parameter 'xSplititIdempotencyKey' is set
            if (xSplititIdempotencyKey == null)
            {
                throw new Splitit.Web.Net.Client.ApiException(400, "Missing required parameter 'xSplititIdempotencyKey' when calling InstallmentPlanApi->UpdateOrder");
            }

            // verify the required parameter 'xSplititTouchPoint' is set
            if (xSplititTouchPoint == null)
            {
                throw new Splitit.Web.Net.Client.ApiException(400, "Missing required parameter 'xSplititTouchPoint' when calling InstallmentPlanApi->UpdateOrder");
            }

            // verify the required parameter 'installmentPlanUpdateRequest' is set
            if (installmentPlanUpdateRequest == null)
            {
                throw new Splitit.Web.Net.Client.ApiException(400, "Missing required parameter 'installmentPlanUpdateRequest' when calling InstallmentPlanApi->UpdateOrder");
            }


            Splitit.Web.Net.Client.RequestOptions localVarRequestOptions = new Splitit.Web.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/json-patch+json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "text/plain"
            };

            var localVarContentType = Splitit.Web.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Splitit.Web.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("installmentPlanNumber", Splitit.Web.Net.Client.ClientUtils.ParameterToString(installmentPlanNumber)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("X-Splitit-IdempotencyKey", Splitit.Web.Net.Client.ClientUtils.ParameterToString(xSplititIdempotencyKey, dataFormat: "")); // header parameter
            localVarRequestOptions.HeaderParameters.Add("X-Splitit-TouchPoint", Splitit.Web.Net.Client.ClientUtils.ParameterToString(xSplititTouchPoint, dataFormat: "")); // header parameter
            localVarRequestOptions.Data = installmentPlanUpdateRequest;

            localVarRequestOptions.Operation = "InstallmentPlanApi.UpdateOrder";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<InstallmentPlanUpdateResponse>("/api/installmentplans/{installmentPlanNumber}/updateorder", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateOrder", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.Web.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="xSplititTouchPoint">TouchPoint</param>
        /// <param name="installmentPlanUpdateRequestByIdentifier"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InstallmentPlanUpdateResponse</returns>
        public InstallmentPlanUpdateResponse UpdateOrder2(string xSplititIdempotencyKey, string xSplititTouchPoint, InstallmentPlanUpdateRequestByIdentifier installmentPlanUpdateRequestByIdentifier, int operationIndex = 0)
        {
            Splitit.Web.Net.Client.ApiResponse<InstallmentPlanUpdateResponse> localVarResponse = UpdateOrder2WithHttpInfo(xSplititIdempotencyKey, xSplititTouchPoint, installmentPlanUpdateRequestByIdentifier);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.Web.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="xSplititTouchPoint">TouchPoint</param>
        /// <param name="installmentPlanUpdateRequestByIdentifier"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InstallmentPlanUpdateResponse</returns>
        public Splitit.Web.Net.Client.ApiResponse<InstallmentPlanUpdateResponse> UpdateOrder2WithHttpInfo(string xSplititIdempotencyKey, string xSplititTouchPoint, InstallmentPlanUpdateRequestByIdentifier installmentPlanUpdateRequestByIdentifier, int operationIndex = 0)
        {
            // verify the required parameter 'xSplititIdempotencyKey' is set
            if (xSplititIdempotencyKey == null)
            {
                throw new Splitit.Web.Net.Client.ApiException(400, "Missing required parameter 'xSplititIdempotencyKey' when calling InstallmentPlanApi->UpdateOrder2");
            }

            // verify the required parameter 'xSplititTouchPoint' is set
            if (xSplititTouchPoint == null)
            {
                throw new Splitit.Web.Net.Client.ApiException(400, "Missing required parameter 'xSplititTouchPoint' when calling InstallmentPlanApi->UpdateOrder2");
            }

            // verify the required parameter 'installmentPlanUpdateRequestByIdentifier' is set
            if (installmentPlanUpdateRequestByIdentifier == null)
            {
                throw new Splitit.Web.Net.Client.ApiException(400, "Missing required parameter 'installmentPlanUpdateRequestByIdentifier' when calling InstallmentPlanApi->UpdateOrder2");
            }

            Splitit.Web.Net.Client.RequestOptions localVarRequestOptions = new Splitit.Web.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/json-patch+json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "text/plain"
            };

            var localVarContentType = Splitit.Web.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Splitit.Web.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("X-Splitit-IdempotencyKey", Splitit.Web.Net.Client.ClientUtils.ParameterToString(xSplititIdempotencyKey)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("X-Splitit-TouchPoint", Splitit.Web.Net.Client.ClientUtils.ParameterToString(xSplititTouchPoint)); // header parameter
            localVarRequestOptions.Data = installmentPlanUpdateRequestByIdentifier;

            localVarRequestOptions.Operation = "InstallmentPlanApi.UpdateOrder2";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<InstallmentPlanUpdateResponse>("/api/installmentplans/updateorder", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateOrder2", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.Web.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="xSplititTouchPoint">TouchPoint</param>
        /// <param name="installmentPlanUpdateRequestByIdentifier"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InstallmentPlanUpdateResponse</returns>
        public async System.Threading.Tasks.Task<InstallmentPlanUpdateResponse> UpdateOrder2Async(string xSplititIdempotencyKey, string xSplititTouchPoint, InstallmentPlanUpdateRequestByIdentifier installmentPlanUpdateRequestByIdentifier, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Splitit.Web.Net.Client.ApiResponse<InstallmentPlanUpdateResponse> localVarResponse = await UpdateOrder2WithHttpInfoAsync(xSplititIdempotencyKey, xSplititTouchPoint, installmentPlanUpdateRequestByIdentifier, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.Web.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="xSplititTouchPoint">TouchPoint</param>
        /// <param name="installmentPlanUpdateRequestByIdentifier"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InstallmentPlanUpdateResponse)</returns>
        public async System.Threading.Tasks.Task<Splitit.Web.Net.Client.ApiResponse<InstallmentPlanUpdateResponse>> UpdateOrder2WithHttpInfoAsync(string xSplititIdempotencyKey, string xSplititTouchPoint, InstallmentPlanUpdateRequestByIdentifier installmentPlanUpdateRequestByIdentifier, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xSplititIdempotencyKey' is set
            if (xSplititIdempotencyKey == null)
            {
                throw new Splitit.Web.Net.Client.ApiException(400, "Missing required parameter 'xSplititIdempotencyKey' when calling InstallmentPlanApi->UpdateOrder2");
            }

            // verify the required parameter 'xSplititTouchPoint' is set
            if (xSplititTouchPoint == null)
            {
                throw new Splitit.Web.Net.Client.ApiException(400, "Missing required parameter 'xSplititTouchPoint' when calling InstallmentPlanApi->UpdateOrder2");
            }

            // verify the required parameter 'installmentPlanUpdateRequestByIdentifier' is set
            if (installmentPlanUpdateRequestByIdentifier == null)
            {
                throw new Splitit.Web.Net.Client.ApiException(400, "Missing required parameter 'installmentPlanUpdateRequestByIdentifier' when calling InstallmentPlanApi->UpdateOrder2");
            }


            Splitit.Web.Net.Client.RequestOptions localVarRequestOptions = new Splitit.Web.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/json-patch+json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "text/plain"
            };

            var localVarContentType = Splitit.Web.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Splitit.Web.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("X-Splitit-IdempotencyKey", Splitit.Web.Net.Client.ClientUtils.ParameterToString(xSplititIdempotencyKey, dataFormat: "")); // header parameter
            localVarRequestOptions.HeaderParameters.Add("X-Splitit-TouchPoint", Splitit.Web.Net.Client.ClientUtils.ParameterToString(xSplititTouchPoint, dataFormat: "")); // header parameter
            localVarRequestOptions.Data = installmentPlanUpdateRequestByIdentifier;

            localVarRequestOptions.Operation = "InstallmentPlanApi.UpdateOrder2";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<InstallmentPlanUpdateResponse>("/api/installmentplans/updateorder", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateOrder2", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.Web.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="installmentPlanNumber"></param>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="xSplititTouchPoint">TouchPoint</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>VerifyAuthorizationResponse</returns>
        public VerifyAuthorizationResponse VerifyAuthorization(string installmentPlanNumber, string xSplititIdempotencyKey, string xSplititTouchPoint, int operationIndex = 0)
        {
            Splitit.Web.Net.Client.ApiResponse<VerifyAuthorizationResponse> localVarResponse = VerifyAuthorizationWithHttpInfo(installmentPlanNumber, xSplititIdempotencyKey, xSplititTouchPoint);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.Web.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="installmentPlanNumber"></param>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="xSplititTouchPoint">TouchPoint</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of VerifyAuthorizationResponse</returns>
        public Splitit.Web.Net.Client.ApiResponse<VerifyAuthorizationResponse> VerifyAuthorizationWithHttpInfo(string installmentPlanNumber, string xSplititIdempotencyKey, string xSplititTouchPoint, int operationIndex = 0)
        {
            // verify the required parameter 'installmentPlanNumber' is set
            if (installmentPlanNumber == null)
            {
                throw new Splitit.Web.Net.Client.ApiException(400, "Missing required parameter 'installmentPlanNumber' when calling InstallmentPlanApi->VerifyAuthorization");
            }

            // verify the required parameter 'xSplititIdempotencyKey' is set
            if (xSplititIdempotencyKey == null)
            {
                throw new Splitit.Web.Net.Client.ApiException(400, "Missing required parameter 'xSplititIdempotencyKey' when calling InstallmentPlanApi->VerifyAuthorization");
            }

            // verify the required parameter 'xSplititTouchPoint' is set
            if (xSplititTouchPoint == null)
            {
                throw new Splitit.Web.Net.Client.ApiException(400, "Missing required parameter 'xSplititTouchPoint' when calling InstallmentPlanApi->VerifyAuthorization");
            }

            Splitit.Web.Net.Client.RequestOptions localVarRequestOptions = new Splitit.Web.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "text/plain"
            };

            var localVarContentType = Splitit.Web.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Splitit.Web.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("installmentPlanNumber", Splitit.Web.Net.Client.ClientUtils.ParameterToString(installmentPlanNumber)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("X-Splitit-IdempotencyKey", Splitit.Web.Net.Client.ClientUtils.ParameterToString(xSplititIdempotencyKey)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("X-Splitit-TouchPoint", Splitit.Web.Net.Client.ClientUtils.ParameterToString(xSplititTouchPoint)); // header parameter

            localVarRequestOptions.Operation = "InstallmentPlanApi.VerifyAuthorization";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<VerifyAuthorizationResponse>("/api/installmentplans/{installmentPlanNumber}/verifyauthorization", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VerifyAuthorization", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.Web.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="installmentPlanNumber"></param>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="xSplititTouchPoint">TouchPoint</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VerifyAuthorizationResponse</returns>
        public async System.Threading.Tasks.Task<VerifyAuthorizationResponse> VerifyAuthorizationAsync(string installmentPlanNumber, string xSplititIdempotencyKey, string xSplititTouchPoint, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Splitit.Web.Net.Client.ApiResponse<VerifyAuthorizationResponse> localVarResponse = await VerifyAuthorizationWithHttpInfoAsync(installmentPlanNumber, xSplititIdempotencyKey, xSplititTouchPoint, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.Web.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="installmentPlanNumber"></param>
        /// <param name="xSplititIdempotencyKey"></param>
        /// <param name="xSplititTouchPoint">TouchPoint</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VerifyAuthorizationResponse)</returns>
        public async System.Threading.Tasks.Task<Splitit.Web.Net.Client.ApiResponse<VerifyAuthorizationResponse>> VerifyAuthorizationWithHttpInfoAsync(string installmentPlanNumber, string xSplititIdempotencyKey, string xSplititTouchPoint, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'installmentPlanNumber' is set
            if (installmentPlanNumber == null)
            {
                throw new Splitit.Web.Net.Client.ApiException(400, "Missing required parameter 'installmentPlanNumber' when calling InstallmentPlanApi->VerifyAuthorization");
            }

            // verify the required parameter 'xSplititIdempotencyKey' is set
            if (xSplititIdempotencyKey == null)
            {
                throw new Splitit.Web.Net.Client.ApiException(400, "Missing required parameter 'xSplititIdempotencyKey' when calling InstallmentPlanApi->VerifyAuthorization");
            }

            // verify the required parameter 'xSplititTouchPoint' is set
            if (xSplititTouchPoint == null)
            {
                throw new Splitit.Web.Net.Client.ApiException(400, "Missing required parameter 'xSplititTouchPoint' when calling InstallmentPlanApi->VerifyAuthorization");
            }


            Splitit.Web.Net.Client.RequestOptions localVarRequestOptions = new Splitit.Web.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "text/plain"
            };

            var localVarContentType = Splitit.Web.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Splitit.Web.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("installmentPlanNumber", Splitit.Web.Net.Client.ClientUtils.ParameterToString(installmentPlanNumber)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("X-Splitit-IdempotencyKey", Splitit.Web.Net.Client.ClientUtils.ParameterToString(xSplititIdempotencyKey, dataFormat: "")); // header parameter
            localVarRequestOptions.HeaderParameters.Add("X-Splitit-TouchPoint", Splitit.Web.Net.Client.ClientUtils.ParameterToString(xSplititTouchPoint, dataFormat: "")); // header parameter

            localVarRequestOptions.Operation = "InstallmentPlanApi.VerifyAuthorization";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<VerifyAuthorizationResponse>("/api/installmentplans/{installmentPlanNumber}/verifyauthorization", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VerifyAuthorization", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
