/*
 * splitit-web-api-v3
 *
 * Splitit's Web API
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://konfigthis.com
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Splitit.Web.Net.Client.OpenAPIDateConverter;

namespace Splitit.Web.Net.Model
{
    /// <summary>
    /// PlanErrorResponse
    /// </summary>
    [DataContract(Name = "PlanErrorResponse")]
    public partial class PlanErrorResponse : IEquatable<PlanErrorResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PlanErrorResponse" /> class.
        /// </summary>
        /// <param name="traceId">traceId.</param>
        /// <param name="error">error.</param>
        /// <param name="installmentPlanNumber">installmentPlanNumber.</param>
        /// <param name="paymentInfo">paymentInfo.</param>
        public PlanErrorResponse(string traceId = default(string), ErrorExtended error = default(ErrorExtended), string installmentPlanNumber = default(string), PaymentInfo paymentInfo = default(PaymentInfo))
        {
            this.TraceId = traceId;
            this.Error = error;
            this.InstallmentPlanNumber = installmentPlanNumber;
            this.PaymentInfo = paymentInfo;
        }

        /// <summary>
        /// Gets or Sets TraceId
        /// </summary>
        [DataMember(Name = "TraceId", EmitDefaultValue = false)]
        public string TraceId { get; set; }

        /// <summary>
        /// Gets or Sets Error
        /// </summary>
        [DataMember(Name = "Error", EmitDefaultValue = false)]
        public ErrorExtended Error { get; set; }

        /// <summary>
        /// Gets or Sets InstallmentPlanNumber
        /// </summary>
        [DataMember(Name = "InstallmentPlanNumber", EmitDefaultValue = false)]
        public string InstallmentPlanNumber { get; set; }

        /// <summary>
        /// Gets or Sets PaymentInfo
        /// </summary>
        [DataMember(Name = "PaymentInfo", EmitDefaultValue = false)]
        public PaymentInfo PaymentInfo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PlanErrorResponse {\n");
            sb.Append("  TraceId: ").Append(TraceId).Append("\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("  InstallmentPlanNumber: ").Append(InstallmentPlanNumber).Append("\n");
            sb.Append("  PaymentInfo: ").Append(PaymentInfo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PlanErrorResponse);
        }

        /// <summary>
        /// Returns true if PlanErrorResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of PlanErrorResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PlanErrorResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.TraceId == input.TraceId ||
                    (this.TraceId != null &&
                    this.TraceId.Equals(input.TraceId))
                ) && 
                (
                    this.Error == input.Error ||
                    (this.Error != null &&
                    this.Error.Equals(input.Error))
                ) && 
                (
                    this.InstallmentPlanNumber == input.InstallmentPlanNumber ||
                    (this.InstallmentPlanNumber != null &&
                    this.InstallmentPlanNumber.Equals(input.InstallmentPlanNumber))
                ) && 
                (
                    this.PaymentInfo == input.PaymentInfo ||
                    (this.PaymentInfo != null &&
                    this.PaymentInfo.Equals(input.PaymentInfo))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TraceId != null)
                {
                    hashCode = (hashCode * 59) + this.TraceId.GetHashCode();
                }
                if (this.Error != null)
                {
                    hashCode = (hashCode * 59) + this.Error.GetHashCode();
                }
                if (this.InstallmentPlanNumber != null)
                {
                    hashCode = (hashCode * 59) + this.InstallmentPlanNumber.GetHashCode();
                }
                if (this.PaymentInfo != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentInfo.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
