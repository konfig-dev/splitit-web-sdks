/*
 * splitit-web-api-v3
 *
 * Splitit's Web API
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://konfigthis.com
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Splitit.Web.Net.Client.OpenAPIDateConverter;

namespace Splitit.Web.Net.Model
{
    /// <summary>
    /// Installment
    /// </summary>
    [DataContract(Name = "Installment")]
    public partial class Installment : IEquatable<Installment>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "Status", IsRequired = true, EmitDefaultValue = true)]
        public InstallmentStatus Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Installment" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Installment() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Installment" /> class.
        /// </summary>
        /// <param name="installmentNumber">installmentNumber (required).</param>
        /// <param name="amount">amount (required).</param>
        /// <param name="processDateTime">processDateTime.</param>
        /// <param name="status">status (required).</param>
        public Installment(int installmentNumber = default(int), decimal amount = default(decimal), DateTime processDateTime = default(DateTime), InstallmentStatus status = default(InstallmentStatus))
        {
            this.InstallmentNumber = installmentNumber;
            this.Amount = amount;
            this.Status = status;
            this.ProcessDateTime = processDateTime;
        }

        /// <summary>
        /// Gets or Sets InstallmentNumber
        /// </summary>
        [DataMember(Name = "InstallmentNumber", IsRequired = true, EmitDefaultValue = true)]
        public int InstallmentNumber { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name = "Amount", IsRequired = true, EmitDefaultValue = true)]
        public decimal Amount { get; set; }

        /// <summary>
        /// Gets or Sets ProcessDateTime
        /// </summary>
        [DataMember(Name = "ProcessDateTime", EmitDefaultValue = false)]
        public DateTime ProcessDateTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Installment {\n");
            sb.Append("  InstallmentNumber: ").Append(InstallmentNumber).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  ProcessDateTime: ").Append(ProcessDateTime).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Installment);
        }

        /// <summary>
        /// Returns true if Installment instances are equal
        /// </summary>
        /// <param name="input">Instance of Installment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Installment input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.InstallmentNumber == input.InstallmentNumber ||
                    this.InstallmentNumber.Equals(input.InstallmentNumber)
                ) && 
                (
                    this.Amount == input.Amount ||
                    this.Amount.Equals(input.Amount)
                ) && 
                (
                    this.ProcessDateTime == input.ProcessDateTime ||
                    (this.ProcessDateTime != null &&
                    this.ProcessDateTime.Equals(input.ProcessDateTime))
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.InstallmentNumber.GetHashCode();
                hashCode = (hashCode * 59) + this.Amount.GetHashCode();
                if (this.ProcessDateTime != null)
                {
                    hashCode = (hashCode * 59) + this.ProcessDateTime.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
