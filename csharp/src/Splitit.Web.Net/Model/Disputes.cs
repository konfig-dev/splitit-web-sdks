/*
 * splitit-web-api-v3
 *
 * Splitit's Web API
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://konfigthis.com
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Splitit.Web.Net.Client.OpenAPIDateConverter;

namespace Splitit.Web.Net.Model
{
    /// <summary>
    /// Disputes
    /// </summary>
    [DataContract(Name = "Disputes")]
    public partial class Disputes : IEquatable<Disputes>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Disputes" /> class.
        /// </summary>
        /// <param name="inDispute">inDispute.</param>
        /// <param name="evidenceProvidedOn">evidenceProvidedOn.</param>
        public Disputes(bool inDispute = default(bool), DateTime evidenceProvidedOn = default(DateTime))
        {
            this.InDispute = inDispute;
            this.EvidenceProvidedOn = evidenceProvidedOn;
        }

        /// <summary>
        /// Gets or Sets InDispute
        /// </summary>
        [DataMember(Name = "InDispute", EmitDefaultValue = true)]
        public bool InDispute { get; set; }

        /// <summary>
        /// Gets or Sets EvidenceProvidedOn
        /// </summary>
        [DataMember(Name = "EvidenceProvidedOn", EmitDefaultValue = false)]
        public DateTime EvidenceProvidedOn { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Disputes {\n");
            sb.Append("  InDispute: ").Append(InDispute).Append("\n");
            sb.Append("  EvidenceProvidedOn: ").Append(EvidenceProvidedOn).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Disputes);
        }

        /// <summary>
        /// Returns true if Disputes instances are equal
        /// </summary>
        /// <param name="input">Instance of Disputes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Disputes input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.InDispute == input.InDispute ||
                    this.InDispute.Equals(input.InDispute)
                ) && 
                (
                    this.EvidenceProvidedOn == input.EvidenceProvidedOn ||
                    (this.EvidenceProvidedOn != null &&
                    this.EvidenceProvidedOn.Equals(input.EvidenceProvidedOn))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.InDispute.GetHashCode();
                if (this.EvidenceProvidedOn != null)
                {
                    hashCode = (hashCode * 59) + this.EvidenceProvidedOn.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
