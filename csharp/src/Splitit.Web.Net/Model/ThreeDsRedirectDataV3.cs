/*
 * splitit-web-api-v3
 *
 * Splitit's Web API
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://konfigthis.com
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Splitit.Web.Net.Client.OpenAPIDateConverter;

namespace Splitit.Web.Net.Model
{
    /// <summary>
    /// ThreeDsRedirectDataV3
    /// </summary>
    [DataContract(Name = "ThreeDsRedirectDataV3")]
    public partial class ThreeDsRedirectDataV3 : IEquatable<ThreeDsRedirectDataV3>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ThreeDsRedirectDataV3" /> class.
        /// </summary>
        /// <param name="url">url.</param>
        /// <param name="verb">verb.</param>
        /// <param name="_params">_params.</param>
        /// <param name="clientRedirectUrl">clientRedirectUrl.</param>
        public ThreeDsRedirectDataV3(string url = default(string), string verb = default(string), Dictionary<string, string> _params = default(Dictionary<string, string>), string clientRedirectUrl = default(string))
        {
            this.Url = url;
            this.Verb = verb;
            this.Params = _params;
            this.ClientRedirectUrl = clientRedirectUrl;
        }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [DataMember(Name = "Url", EmitDefaultValue = false)]
        public string Url { get; set; }

        /// <summary>
        /// Gets or Sets Verb
        /// </summary>
        [DataMember(Name = "Verb", EmitDefaultValue = false)]
        public string Verb { get; set; }

        /// <summary>
        /// Gets or Sets Params
        /// </summary>
        [DataMember(Name = "Params", EmitDefaultValue = false)]
        public Dictionary<string, string> Params { get; set; }

        /// <summary>
        /// Gets or Sets ClientRedirectUrl
        /// </summary>
        [DataMember(Name = "ClientRedirectUrl", EmitDefaultValue = false)]
        public string ClientRedirectUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ThreeDsRedirectDataV3 {\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Verb: ").Append(Verb).Append("\n");
            sb.Append("  Params: ").Append(Params).Append("\n");
            sb.Append("  ClientRedirectUrl: ").Append(ClientRedirectUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ThreeDsRedirectDataV3);
        }

        /// <summary>
        /// Returns true if ThreeDsRedirectDataV3 instances are equal
        /// </summary>
        /// <param name="input">Instance of ThreeDsRedirectDataV3 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ThreeDsRedirectDataV3 input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.Verb == input.Verb ||
                    (this.Verb != null &&
                    this.Verb.Equals(input.Verb))
                ) && 
                (
                    this.Params == input.Params ||
                    this.Params != null &&
                    input.Params != null &&
                    this.Params.SequenceEqual(input.Params)
                ) && 
                (
                    this.ClientRedirectUrl == input.ClientRedirectUrl ||
                    (this.ClientRedirectUrl != null &&
                    this.ClientRedirectUrl.Equals(input.ClientRedirectUrl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Url != null)
                {
                    hashCode = (hashCode * 59) + this.Url.GetHashCode();
                }
                if (this.Verb != null)
                {
                    hashCode = (hashCode * 59) + this.Verb.GetHashCode();
                }
                if (this.Params != null)
                {
                    hashCode = (hashCode * 59) + this.Params.GetHashCode();
                }
                if (this.ClientRedirectUrl != null)
                {
                    hashCode = (hashCode * 59) + this.ClientRedirectUrl.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
