/*
 * splitit-web-api-v3
 *
 * Splitit's Web API
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://konfigthis.com
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Splitit.Web.Net.Client.OpenAPIDateConverter;

namespace Splitit.Web.Net.Model
{
    /// <summary>
    /// InstallmentsEligibilityResponse
    /// </summary>
    [DataContract(Name = "InstallmentsEligibilityResponse")]
    public partial class InstallmentsEligibilityResponse : IEquatable<InstallmentsEligibilityResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InstallmentsEligibilityResponse" /> class.
        /// </summary>
        /// <param name="installmentProvider">installmentProvider.</param>
        /// <param name="paymentPlanOptions">paymentPlanOptions.</param>
        public InstallmentsEligibilityResponse(string installmentProvider = default(string), List<PaymentPlanOptionModel> paymentPlanOptions = default(List<PaymentPlanOptionModel>))
        {
            this.InstallmentProvider = installmentProvider;
            this.PaymentPlanOptions = paymentPlanOptions;
        }

        /// <summary>
        /// Gets or Sets InstallmentProvider
        /// </summary>
        [DataMember(Name = "InstallmentProvider", EmitDefaultValue = false)]
        public string InstallmentProvider { get; set; }

        /// <summary>
        /// Gets or Sets PaymentPlanOptions
        /// </summary>
        [DataMember(Name = "PaymentPlanOptions", EmitDefaultValue = false)]
        public List<PaymentPlanOptionModel> PaymentPlanOptions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InstallmentsEligibilityResponse {\n");
            sb.Append("  InstallmentProvider: ").Append(InstallmentProvider).Append("\n");
            sb.Append("  PaymentPlanOptions: ").Append(PaymentPlanOptions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InstallmentsEligibilityResponse);
        }

        /// <summary>
        /// Returns true if InstallmentsEligibilityResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of InstallmentsEligibilityResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InstallmentsEligibilityResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.InstallmentProvider == input.InstallmentProvider ||
                    (this.InstallmentProvider != null &&
                    this.InstallmentProvider.Equals(input.InstallmentProvider))
                ) && 
                (
                    this.PaymentPlanOptions == input.PaymentPlanOptions ||
                    this.PaymentPlanOptions != null &&
                    input.PaymentPlanOptions != null &&
                    this.PaymentPlanOptions.SequenceEqual(input.PaymentPlanOptions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.InstallmentProvider != null)
                {
                    hashCode = (hashCode * 59) + this.InstallmentProvider.GetHashCode();
                }
                if (this.PaymentPlanOptions != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentPlanOptions.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
