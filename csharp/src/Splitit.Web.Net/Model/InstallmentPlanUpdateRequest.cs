/*
 * splitit-web-api-v3
 *
 * Splitit's Web API
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://konfigthis.com
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Splitit.Web.Net.Client.OpenAPIDateConverter;

namespace Splitit.Web.Net.Model
{
    /// <summary>
    /// InstallmentPlanUpdateRequest
    /// </summary>
    [DataContract(Name = "InstallmentPlanUpdateRequest")]
    public partial class InstallmentPlanUpdateRequest : IEquatable<InstallmentPlanUpdateRequest>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets ShippingStatus
        /// </summary>
        [DataMember(Name = "ShippingStatus", EmitDefaultValue = false)]
        public ShippingStatus2? ShippingStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="InstallmentPlanUpdateRequest" /> class.
        /// </summary>
        /// <param name="refOrderNumber">refOrderNumber.</param>
        /// <param name="trackingNumber">trackingNumber.</param>
        /// <param name="capture">capture.</param>
        /// <param name="shippingStatus">shippingStatus.</param>
        public InstallmentPlanUpdateRequest(string refOrderNumber = default(string), string trackingNumber = default(string), bool capture = default(bool), ShippingStatus2? shippingStatus = default(ShippingStatus2?))
        {
            this.RefOrderNumber = refOrderNumber;
            this.TrackingNumber = trackingNumber;
            this.Capture = capture;
            this.ShippingStatus = shippingStatus;
        }

        /// <summary>
        /// Gets or Sets RefOrderNumber
        /// </summary>
        [DataMember(Name = "RefOrderNumber", EmitDefaultValue = false)]
        public string RefOrderNumber { get; set; }

        /// <summary>
        /// Gets or Sets TrackingNumber
        /// </summary>
        [DataMember(Name = "TrackingNumber", EmitDefaultValue = false)]
        public string TrackingNumber { get; set; }

        /// <summary>
        /// Gets or Sets Capture
        /// </summary>
        [DataMember(Name = "Capture", EmitDefaultValue = true)]
        public bool Capture { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InstallmentPlanUpdateRequest {\n");
            sb.Append("  RefOrderNumber: ").Append(RefOrderNumber).Append("\n");
            sb.Append("  TrackingNumber: ").Append(TrackingNumber).Append("\n");
            sb.Append("  Capture: ").Append(Capture).Append("\n");
            sb.Append("  ShippingStatus: ").Append(ShippingStatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InstallmentPlanUpdateRequest);
        }

        /// <summary>
        /// Returns true if InstallmentPlanUpdateRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of InstallmentPlanUpdateRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InstallmentPlanUpdateRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.RefOrderNumber == input.RefOrderNumber ||
                    (this.RefOrderNumber != null &&
                    this.RefOrderNumber.Equals(input.RefOrderNumber))
                ) && 
                (
                    this.TrackingNumber == input.TrackingNumber ||
                    (this.TrackingNumber != null &&
                    this.TrackingNumber.Equals(input.TrackingNumber))
                ) && 
                (
                    this.Capture == input.Capture ||
                    this.Capture.Equals(input.Capture)
                ) && 
                (
                    this.ShippingStatus == input.ShippingStatus ||
                    this.ShippingStatus.Equals(input.ShippingStatus)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RefOrderNumber != null)
                {
                    hashCode = (hashCode * 59) + this.RefOrderNumber.GetHashCode();
                }
                if (this.TrackingNumber != null)
                {
                    hashCode = (hashCode * 59) + this.TrackingNumber.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Capture.GetHashCode();
                hashCode = (hashCode * 59) + this.ShippingStatus.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
