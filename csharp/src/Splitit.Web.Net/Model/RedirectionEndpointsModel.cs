/*
 * splitit-web-api-v3
 *
 * Splitit's Web API
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://konfigthis.com
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Splitit.Web.Net.Client.OpenAPIDateConverter;

namespace Splitit.Web.Net.Model
{
    /// <summary>
    /// RedirectionEndpointsModel
    /// </summary>
    [DataContract(Name = "RedirectionEndpointsModel")]
    public partial class RedirectionEndpointsModel : IEquatable<RedirectionEndpointsModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RedirectionEndpointsModel" /> class.
        /// </summary>
        /// <param name="authorizeSucceeded">authorizeSucceeded.</param>
        /// <param name="succeeded">succeeded.</param>
        /// <param name="authorizeFailed">authorizeFailed.</param>
        /// <param name="failed">failed.</param>
        public RedirectionEndpointsModel(string authorizeSucceeded = default(string), string succeeded = default(string), string authorizeFailed = default(string), string failed = default(string))
        {
            this.AuthorizeSucceeded = authorizeSucceeded;
            this.Succeeded = succeeded;
            this.AuthorizeFailed = authorizeFailed;
            this.Failed = failed;
        }

        /// <summary>
        /// Gets or Sets AuthorizeSucceeded
        /// </summary>
        [DataMember(Name = "AuthorizeSucceeded", EmitDefaultValue = false)]
        public string AuthorizeSucceeded { get; set; }

        /// <summary>
        /// Gets or Sets Succeeded
        /// </summary>
        [DataMember(Name = "Succeeded", EmitDefaultValue = false)]
        public string Succeeded { get; set; }

        /// <summary>
        /// Gets or Sets AuthorizeFailed
        /// </summary>
        [DataMember(Name = "AuthorizeFailed", EmitDefaultValue = false)]
        public string AuthorizeFailed { get; set; }

        /// <summary>
        /// Gets or Sets Failed
        /// </summary>
        [DataMember(Name = "Failed", EmitDefaultValue = false)]
        public string Failed { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RedirectionEndpointsModel {\n");
            sb.Append("  AuthorizeSucceeded: ").Append(AuthorizeSucceeded).Append("\n");
            sb.Append("  Succeeded: ").Append(Succeeded).Append("\n");
            sb.Append("  AuthorizeFailed: ").Append(AuthorizeFailed).Append("\n");
            sb.Append("  Failed: ").Append(Failed).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RedirectionEndpointsModel);
        }

        /// <summary>
        /// Returns true if RedirectionEndpointsModel instances are equal
        /// </summary>
        /// <param name="input">Instance of RedirectionEndpointsModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RedirectionEndpointsModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AuthorizeSucceeded == input.AuthorizeSucceeded ||
                    (this.AuthorizeSucceeded != null &&
                    this.AuthorizeSucceeded.Equals(input.AuthorizeSucceeded))
                ) && 
                (
                    this.Succeeded == input.Succeeded ||
                    (this.Succeeded != null &&
                    this.Succeeded.Equals(input.Succeeded))
                ) && 
                (
                    this.AuthorizeFailed == input.AuthorizeFailed ||
                    (this.AuthorizeFailed != null &&
                    this.AuthorizeFailed.Equals(input.AuthorizeFailed))
                ) && 
                (
                    this.Failed == input.Failed ||
                    (this.Failed != null &&
                    this.Failed.Equals(input.Failed))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AuthorizeSucceeded != null)
                {
                    hashCode = (hashCode * 59) + this.AuthorizeSucceeded.GetHashCode();
                }
                if (this.Succeeded != null)
                {
                    hashCode = (hashCode * 59) + this.Succeeded.GetHashCode();
                }
                if (this.AuthorizeFailed != null)
                {
                    hashCode = (hashCode * 59) + this.AuthorizeFailed.GetHashCode();
                }
                if (this.Failed != null)
                {
                    hashCode = (hashCode * 59) + this.Failed.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
