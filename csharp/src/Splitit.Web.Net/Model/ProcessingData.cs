/*
 * splitit-web-api-v3
 *
 * Splitit's Web API
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://konfigthis.com
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Splitit.Web.Net.Client.OpenAPIDateConverter;

namespace Splitit.Web.Net.Model
{
    /// <summary>
    /// ProcessingData
    /// </summary>
    [DataContract(Name = "ProcessingData")]
    public partial class ProcessingData : IEquatable<ProcessingData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessingData" /> class.
        /// </summary>
        /// <param name="attemptThreeDSecured">attemptThreeDSecured.</param>
        /// <param name="softDescriptor">softDescriptor.</param>
        /// <param name="threeDSData">threeDSData.</param>
        public ProcessingData(bool attemptThreeDSecured = default(bool), string softDescriptor = default(string), ThreeDSData threeDSData = default(ThreeDSData))
        {
            this.AttemptThreeDSecured = attemptThreeDSecured;
            this.SoftDescriptor = softDescriptor;
            this.ThreeDSData = threeDSData;
        }

        /// <summary>
        /// Gets or Sets AttemptThreeDSecured
        /// </summary>
        [DataMember(Name = "AttemptThreeDSecured", EmitDefaultValue = true)]
        public bool AttemptThreeDSecured { get; set; }

        /// <summary>
        /// Gets or Sets SoftDescriptor
        /// </summary>
        [DataMember(Name = "SoftDescriptor", EmitDefaultValue = false)]
        public string SoftDescriptor { get; set; }

        /// <summary>
        /// Gets or Sets ThreeDSData
        /// </summary>
        [DataMember(Name = "ThreeDSData", EmitDefaultValue = false)]
        public ThreeDSData ThreeDSData { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ProcessingData {\n");
            sb.Append("  AttemptThreeDSecured: ").Append(AttemptThreeDSecured).Append("\n");
            sb.Append("  SoftDescriptor: ").Append(SoftDescriptor).Append("\n");
            sb.Append("  ThreeDSData: ").Append(ThreeDSData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProcessingData);
        }

        /// <summary>
        /// Returns true if ProcessingData instances are equal
        /// </summary>
        /// <param name="input">Instance of ProcessingData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProcessingData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AttemptThreeDSecured == input.AttemptThreeDSecured ||
                    this.AttemptThreeDSecured.Equals(input.AttemptThreeDSecured)
                ) && 
                (
                    this.SoftDescriptor == input.SoftDescriptor ||
                    (this.SoftDescriptor != null &&
                    this.SoftDescriptor.Equals(input.SoftDescriptor))
                ) && 
                (
                    this.ThreeDSData == input.ThreeDSData ||
                    (this.ThreeDSData != null &&
                    this.ThreeDSData.Equals(input.ThreeDSData))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.AttemptThreeDSecured.GetHashCode();
                if (this.SoftDescriptor != null)
                {
                    hashCode = (hashCode * 59) + this.SoftDescriptor.GetHashCode();
                }
                if (this.ThreeDSData != null)
                {
                    hashCode = (hashCode * 59) + this.ThreeDSData.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
