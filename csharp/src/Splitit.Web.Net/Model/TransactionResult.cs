/*
 * splitit-web-api-v3
 *
 * Splitit's Web API
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://konfigthis.com
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Splitit.Web.Net.Client.OpenAPIDateConverter;

namespace Splitit.Web.Net.Model
{
    /// <summary>
    /// TransactionResult
    /// </summary>
    [DataContract(Name = "TransactionResult")]
    public partial class TransactionResult : IEquatable<TransactionResult>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets DisputeStatus
        /// </summary>
        [DataMember(Name = "DisputeStatus", EmitDefaultValue = false)]
        public DisputeStatus? DisputeStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionResult" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TransactionResult() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionResult" /> class.
        /// </summary>
        /// <param name="gatewayTransactionId">gatewayTransactionId.</param>
        /// <param name="splititTransactionId">splititTransactionId (required).</param>
        /// <param name="splititGatewayTransactionId">splititGatewayTransactionId.</param>
        /// <param name="gatewayResultCode">gatewayResultCode.</param>
        /// <param name="gatewayResultMessage">gatewayResultMessage.</param>
        /// <param name="operationType">operationType.</param>
        /// <param name="gatewayResult">gatewayResult (required).</param>
        /// <param name="gatewayTransactionDate">gatewayTransactionDate (required).</param>
        /// <param name="isChargeback">isChargeback (required).</param>
        /// <param name="aVSResult">aVSResult.</param>
        /// <param name="cVCResult">cVCResult.</param>
        /// <param name="isInDispute">isInDispute.</param>
        /// <param name="disputeStatus">disputeStatus.</param>
        public TransactionResult(string gatewayTransactionId = default(string), long splititTransactionId = default(long), string splititGatewayTransactionId = default(string), string gatewayResultCode = default(string), string gatewayResultMessage = default(string), ReferenceEntityBase operationType = default(ReferenceEntityBase), bool gatewayResult = default(bool), DateTime gatewayTransactionDate = default(DateTime), bool isChargeback = default(bool), CardResult aVSResult = default(CardResult), CardResult cVCResult = default(CardResult), bool isInDispute = default(bool), DisputeStatus? disputeStatus = default(DisputeStatus?))
        {
            this.SplititTransactionId = splititTransactionId;
            this.GatewayResult = gatewayResult;
            this.GatewayTransactionDate = gatewayTransactionDate;
            this.IsChargeback = isChargeback;
            this.GatewayTransactionId = gatewayTransactionId;
            this.SplititGatewayTransactionId = splititGatewayTransactionId;
            this.GatewayResultCode = gatewayResultCode;
            this.GatewayResultMessage = gatewayResultMessage;
            this.OperationType = operationType;
            this.AVSResult = aVSResult;
            this.CVCResult = cVCResult;
            this.IsInDispute = isInDispute;
            this.DisputeStatus = disputeStatus;
        }

        /// <summary>
        /// Gets or Sets GatewayTransactionId
        /// </summary>
        [DataMember(Name = "GatewayTransactionId", EmitDefaultValue = false)]
        public string GatewayTransactionId { get; set; }

        /// <summary>
        /// Gets or Sets SplititTransactionId
        /// </summary>
        [DataMember(Name = "SplititTransactionId", IsRequired = true, EmitDefaultValue = true)]
        public long SplititTransactionId { get; set; }

        /// <summary>
        /// Gets or Sets SplititGatewayTransactionId
        /// </summary>
        [DataMember(Name = "SplititGatewayTransactionId", EmitDefaultValue = false)]
        public string SplititGatewayTransactionId { get; set; }

        /// <summary>
        /// Gets or Sets GatewayResultCode
        /// </summary>
        [DataMember(Name = "GatewayResultCode", EmitDefaultValue = false)]
        public string GatewayResultCode { get; set; }

        /// <summary>
        /// Gets or Sets GatewayResultMessage
        /// </summary>
        [DataMember(Name = "GatewayResultMessage", EmitDefaultValue = false)]
        public string GatewayResultMessage { get; set; }

        /// <summary>
        /// Gets or Sets OperationType
        /// </summary>
        [DataMember(Name = "OperationType", EmitDefaultValue = false)]
        public ReferenceEntityBase OperationType { get; set; }

        /// <summary>
        /// Gets or Sets GatewayResult
        /// </summary>
        [DataMember(Name = "GatewayResult", IsRequired = true, EmitDefaultValue = true)]
        public bool GatewayResult { get; set; }

        /// <summary>
        /// Gets or Sets GatewayTransactionDate
        /// </summary>
        [DataMember(Name = "GatewayTransactionDate", IsRequired = true, EmitDefaultValue = true)]
        public DateTime GatewayTransactionDate { get; set; }

        /// <summary>
        /// Gets or Sets IsChargeback
        /// </summary>
        [DataMember(Name = "IsChargeback", IsRequired = true, EmitDefaultValue = true)]
        public bool IsChargeback { get; set; }

        /// <summary>
        /// Gets or Sets AVSResult
        /// </summary>
        [DataMember(Name = "AVSResult", EmitDefaultValue = false)]
        public CardResult AVSResult { get; set; }

        /// <summary>
        /// Gets or Sets CVCResult
        /// </summary>
        [DataMember(Name = "CVCResult", EmitDefaultValue = false)]
        public CardResult CVCResult { get; set; }

        /// <summary>
        /// Gets or Sets IsInDispute
        /// </summary>
        [DataMember(Name = "IsInDispute", EmitDefaultValue = true)]
        public bool IsInDispute { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TransactionResult {\n");
            sb.Append("  GatewayTransactionId: ").Append(GatewayTransactionId).Append("\n");
            sb.Append("  SplititTransactionId: ").Append(SplititTransactionId).Append("\n");
            sb.Append("  SplititGatewayTransactionId: ").Append(SplititGatewayTransactionId).Append("\n");
            sb.Append("  GatewayResultCode: ").Append(GatewayResultCode).Append("\n");
            sb.Append("  GatewayResultMessage: ").Append(GatewayResultMessage).Append("\n");
            sb.Append("  OperationType: ").Append(OperationType).Append("\n");
            sb.Append("  GatewayResult: ").Append(GatewayResult).Append("\n");
            sb.Append("  GatewayTransactionDate: ").Append(GatewayTransactionDate).Append("\n");
            sb.Append("  IsChargeback: ").Append(IsChargeback).Append("\n");
            sb.Append("  AVSResult: ").Append(AVSResult).Append("\n");
            sb.Append("  CVCResult: ").Append(CVCResult).Append("\n");
            sb.Append("  IsInDispute: ").Append(IsInDispute).Append("\n");
            sb.Append("  DisputeStatus: ").Append(DisputeStatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransactionResult);
        }

        /// <summary>
        /// Returns true if TransactionResult instances are equal
        /// </summary>
        /// <param name="input">Instance of TransactionResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransactionResult input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.GatewayTransactionId == input.GatewayTransactionId ||
                    (this.GatewayTransactionId != null &&
                    this.GatewayTransactionId.Equals(input.GatewayTransactionId))
                ) && 
                (
                    this.SplititTransactionId == input.SplititTransactionId ||
                    this.SplititTransactionId.Equals(input.SplititTransactionId)
                ) && 
                (
                    this.SplititGatewayTransactionId == input.SplititGatewayTransactionId ||
                    (this.SplititGatewayTransactionId != null &&
                    this.SplititGatewayTransactionId.Equals(input.SplititGatewayTransactionId))
                ) && 
                (
                    this.GatewayResultCode == input.GatewayResultCode ||
                    (this.GatewayResultCode != null &&
                    this.GatewayResultCode.Equals(input.GatewayResultCode))
                ) && 
                (
                    this.GatewayResultMessage == input.GatewayResultMessage ||
                    (this.GatewayResultMessage != null &&
                    this.GatewayResultMessage.Equals(input.GatewayResultMessage))
                ) && 
                (
                    this.OperationType == input.OperationType ||
                    (this.OperationType != null &&
                    this.OperationType.Equals(input.OperationType))
                ) && 
                (
                    this.GatewayResult == input.GatewayResult ||
                    this.GatewayResult.Equals(input.GatewayResult)
                ) && 
                (
                    this.GatewayTransactionDate == input.GatewayTransactionDate ||
                    (this.GatewayTransactionDate != null &&
                    this.GatewayTransactionDate.Equals(input.GatewayTransactionDate))
                ) && 
                (
                    this.IsChargeback == input.IsChargeback ||
                    this.IsChargeback.Equals(input.IsChargeback)
                ) && 
                (
                    this.AVSResult == input.AVSResult ||
                    (this.AVSResult != null &&
                    this.AVSResult.Equals(input.AVSResult))
                ) && 
                (
                    this.CVCResult == input.CVCResult ||
                    (this.CVCResult != null &&
                    this.CVCResult.Equals(input.CVCResult))
                ) && 
                (
                    this.IsInDispute == input.IsInDispute ||
                    this.IsInDispute.Equals(input.IsInDispute)
                ) && 
                (
                    this.DisputeStatus == input.DisputeStatus ||
                    this.DisputeStatus.Equals(input.DisputeStatus)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.GatewayTransactionId != null)
                {
                    hashCode = (hashCode * 59) + this.GatewayTransactionId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SplititTransactionId.GetHashCode();
                if (this.SplititGatewayTransactionId != null)
                {
                    hashCode = (hashCode * 59) + this.SplititGatewayTransactionId.GetHashCode();
                }
                if (this.GatewayResultCode != null)
                {
                    hashCode = (hashCode * 59) + this.GatewayResultCode.GetHashCode();
                }
                if (this.GatewayResultMessage != null)
                {
                    hashCode = (hashCode * 59) + this.GatewayResultMessage.GetHashCode();
                }
                if (this.OperationType != null)
                {
                    hashCode = (hashCode * 59) + this.OperationType.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.GatewayResult.GetHashCode();
                if (this.GatewayTransactionDate != null)
                {
                    hashCode = (hashCode * 59) + this.GatewayTransactionDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsChargeback.GetHashCode();
                if (this.AVSResult != null)
                {
                    hashCode = (hashCode * 59) + this.AVSResult.GetHashCode();
                }
                if (this.CVCResult != null)
                {
                    hashCode = (hashCode * 59) + this.CVCResult.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsInDispute.GetHashCode();
                hashCode = (hashCode * 59) + this.DisputeStatus.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
