/*
 * splitit-web-api-v3
 *
 * Splitit's Web API
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://konfigthis.com
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Splitit.Web.Net.Client.OpenAPIDateConverter;

namespace Splitit.Web.Net.Model
{
    /// <summary>
    /// InitiatePlanResponse
    /// </summary>
    [DataContract(Name = "InitiatePlanResponse")]
    public partial class InitiatePlanResponse : IEquatable<InitiatePlanResponse>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets PurchaseMethod
        /// </summary>
        [DataMember(Name = "PurchaseMethod", EmitDefaultValue = false)]
        public PurchaseMethod? PurchaseMethod { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "Status", IsRequired = true, EmitDefaultValue = true)]
        public PlanStatus Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="InitiatePlanResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InitiatePlanResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InitiatePlanResponse" /> class.
        /// </summary>
        /// <param name="installmentPlanNumber">installmentPlanNumber.</param>
        /// <param name="refOrderNumber">refOrderNumber.</param>
        /// <param name="purchaseMethod">purchaseMethod.</param>
        /// <param name="status">status (required).</param>
        /// <param name="currency">currency.</param>
        /// <param name="amount">amount.</param>
        /// <param name="extendedParams">extendedParams.</param>
        /// <param name="shopper">shopper.</param>
        /// <param name="billingAddress">billingAddress.</param>
        /// <param name="checkoutUrl">checkoutUrl.</param>
        /// <param name="principalAmount">principalAmount.</param>
        public InitiatePlanResponse(string installmentPlanNumber = default(string), string refOrderNumber = default(string), PurchaseMethod? purchaseMethod = default(PurchaseMethod?), PlanStatus status = default(PlanStatus), string currency = default(string), double amount = default(double), Dictionary<string, string> extendedParams = default(Dictionary<string, string>), ShopperData shopper = default(ShopperData), AddressData billingAddress = default(AddressData), string checkoutUrl = default(string), double principalAmount = default(double))
        {
            this.Status = status;
            this.InstallmentPlanNumber = installmentPlanNumber;
            this.RefOrderNumber = refOrderNumber;
            this.PurchaseMethod = purchaseMethod;
            this.Currency = currency;
            this.Amount = amount;
            this.ExtendedParams = extendedParams;
            this.Shopper = shopper;
            this.BillingAddress = billingAddress;
            this.CheckoutUrl = checkoutUrl;
            this.PrincipalAmount = principalAmount;
        }

        /// <summary>
        /// Gets or Sets InstallmentPlanNumber
        /// </summary>
        [DataMember(Name = "InstallmentPlanNumber", EmitDefaultValue = false)]
        public string InstallmentPlanNumber { get; set; }

        /// <summary>
        /// Gets or Sets RefOrderNumber
        /// </summary>
        [DataMember(Name = "RefOrderNumber", EmitDefaultValue = false)]
        public string RefOrderNumber { get; set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name = "Currency", EmitDefaultValue = false)]
        public string Currency { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name = "Amount", EmitDefaultValue = false)]
        public double Amount { get; set; }

        /// <summary>
        /// Gets or Sets ExtendedParams
        /// </summary>
        [DataMember(Name = "ExtendedParams", EmitDefaultValue = false)]
        public Dictionary<string, string> ExtendedParams { get; set; }

        /// <summary>
        /// Gets or Sets Shopper
        /// </summary>
        [DataMember(Name = "Shopper", EmitDefaultValue = false)]
        public ShopperData Shopper { get; set; }

        /// <summary>
        /// Gets or Sets BillingAddress
        /// </summary>
        [DataMember(Name = "BillingAddress", EmitDefaultValue = false)]
        public AddressData BillingAddress { get; set; }

        /// <summary>
        /// Gets or Sets CheckoutUrl
        /// </summary>
        [DataMember(Name = "CheckoutUrl", EmitDefaultValue = false)]
        public string CheckoutUrl { get; set; }

        /// <summary>
        /// Gets or Sets PrincipalAmount
        /// </summary>
        [DataMember(Name = "PrincipalAmount", EmitDefaultValue = false)]
        public double PrincipalAmount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InitiatePlanResponse {\n");
            sb.Append("  InstallmentPlanNumber: ").Append(InstallmentPlanNumber).Append("\n");
            sb.Append("  RefOrderNumber: ").Append(RefOrderNumber).Append("\n");
            sb.Append("  PurchaseMethod: ").Append(PurchaseMethod).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  ExtendedParams: ").Append(ExtendedParams).Append("\n");
            sb.Append("  Shopper: ").Append(Shopper).Append("\n");
            sb.Append("  BillingAddress: ").Append(BillingAddress).Append("\n");
            sb.Append("  CheckoutUrl: ").Append(CheckoutUrl).Append("\n");
            sb.Append("  PrincipalAmount: ").Append(PrincipalAmount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InitiatePlanResponse);
        }

        /// <summary>
        /// Returns true if InitiatePlanResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of InitiatePlanResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InitiatePlanResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.InstallmentPlanNumber == input.InstallmentPlanNumber ||
                    (this.InstallmentPlanNumber != null &&
                    this.InstallmentPlanNumber.Equals(input.InstallmentPlanNumber))
                ) && 
                (
                    this.RefOrderNumber == input.RefOrderNumber ||
                    (this.RefOrderNumber != null &&
                    this.RefOrderNumber.Equals(input.RefOrderNumber))
                ) && 
                (
                    this.PurchaseMethod == input.PurchaseMethod ||
                    this.PurchaseMethod.Equals(input.PurchaseMethod)
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.Amount == input.Amount ||
                    this.Amount.Equals(input.Amount)
                ) && 
                (
                    this.ExtendedParams == input.ExtendedParams ||
                    this.ExtendedParams != null &&
                    input.ExtendedParams != null &&
                    this.ExtendedParams.SequenceEqual(input.ExtendedParams)
                ) && 
                (
                    this.Shopper == input.Shopper ||
                    (this.Shopper != null &&
                    this.Shopper.Equals(input.Shopper))
                ) && 
                (
                    this.BillingAddress == input.BillingAddress ||
                    (this.BillingAddress != null &&
                    this.BillingAddress.Equals(input.BillingAddress))
                ) && 
                (
                    this.CheckoutUrl == input.CheckoutUrl ||
                    (this.CheckoutUrl != null &&
                    this.CheckoutUrl.Equals(input.CheckoutUrl))
                ) && 
                (
                    this.PrincipalAmount == input.PrincipalAmount ||
                    this.PrincipalAmount.Equals(input.PrincipalAmount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.InstallmentPlanNumber != null)
                {
                    hashCode = (hashCode * 59) + this.InstallmentPlanNumber.GetHashCode();
                }
                if (this.RefOrderNumber != null)
                {
                    hashCode = (hashCode * 59) + this.RefOrderNumber.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PurchaseMethod.GetHashCode();
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                if (this.Currency != null)
                {
                    hashCode = (hashCode * 59) + this.Currency.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Amount.GetHashCode();
                if (this.ExtendedParams != null)
                {
                    hashCode = (hashCode * 59) + this.ExtendedParams.GetHashCode();
                }
                if (this.Shopper != null)
                {
                    hashCode = (hashCode * 59) + this.Shopper.GetHashCode();
                }
                if (this.BillingAddress != null)
                {
                    hashCode = (hashCode * 59) + this.BillingAddress.GetHashCode();
                }
                if (this.CheckoutUrl != null)
                {
                    hashCode = (hashCode * 59) + this.CheckoutUrl.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PrincipalAmount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
