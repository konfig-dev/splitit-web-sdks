/*
 * splitit-web-api-v3
 *
 * Splitit's Web API
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://konfigthis.com
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Splitit.Web.Net.Client.OpenAPIDateConverter;

namespace Splitit.Web.Net.Model
{
    /// <summary>
    /// PlanDataModel
    /// </summary>
    [DataContract(Name = "PlanDataModel")]
    public partial class PlanDataModel : IEquatable<PlanDataModel>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets PurchaseMethod
        /// </summary>
        [DataMember(Name = "PurchaseMethod", IsRequired = true, EmitDefaultValue = true)]
        public PurchaseMethod PurchaseMethod { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PlanDataModel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PlanDataModel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PlanDataModel" /> class.
        /// </summary>
        /// <param name="totalAmount">totalAmount (required).</param>
        /// <param name="currency">currency.</param>
        /// <param name="numberOfInstallments">numberOfInstallments.</param>
        /// <param name="terminalId">terminalId.</param>
        /// <param name="purchaseMethod">purchaseMethod (required).</param>
        /// <param name="refOrderNumber">refOrderNumber.</param>
        /// <param name="extendedParams">extendedParams.</param>
        /// <param name="firstInstallmentAmount">firstInstallmentAmount.</param>
        /// <param name="firstInstallmentDate">firstInstallmentDate.</param>
        public PlanDataModel(double totalAmount = default(double), string currency = default(string), int numberOfInstallments = default(int), string terminalId = default(string), PurchaseMethod purchaseMethod = default(PurchaseMethod), string refOrderNumber = default(string), Dictionary<string, string> extendedParams = default(Dictionary<string, string>), double firstInstallmentAmount = default(double), DateTime firstInstallmentDate = default(DateTime))
        {
            this.TotalAmount = totalAmount;
            this.PurchaseMethod = purchaseMethod;
            this.Currency = currency;
            this.NumberOfInstallments = numberOfInstallments;
            this.TerminalId = terminalId;
            this.RefOrderNumber = refOrderNumber;
            this.ExtendedParams = extendedParams;
            this.FirstInstallmentAmount = firstInstallmentAmount;
            this.FirstInstallmentDate = firstInstallmentDate;
        }

        /// <summary>
        /// Gets or Sets TotalAmount
        /// </summary>
        [DataMember(Name = "TotalAmount", IsRequired = true, EmitDefaultValue = true)]
        public double TotalAmount { get; set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name = "Currency", EmitDefaultValue = false)]
        public string Currency { get; set; }

        /// <summary>
        /// Gets or Sets NumberOfInstallments
        /// </summary>
        [DataMember(Name = "NumberOfInstallments", EmitDefaultValue = false)]
        public int NumberOfInstallments { get; set; }

        /// <summary>
        /// Gets or Sets TerminalId
        /// </summary>
        [DataMember(Name = "TerminalId", EmitDefaultValue = false)]
        public string TerminalId { get; set; }

        /// <summary>
        /// Gets or Sets RefOrderNumber
        /// </summary>
        [DataMember(Name = "RefOrderNumber", EmitDefaultValue = false)]
        public string RefOrderNumber { get; set; }

        /// <summary>
        /// Gets or Sets ExtendedParams
        /// </summary>
        [DataMember(Name = "ExtendedParams", EmitDefaultValue = false)]
        public Dictionary<string, string> ExtendedParams { get; set; }

        /// <summary>
        /// Gets or Sets FirstInstallmentAmount
        /// </summary>
        [DataMember(Name = "FirstInstallmentAmount", EmitDefaultValue = false)]
        public double FirstInstallmentAmount { get; set; }

        /// <summary>
        /// Gets or Sets FirstInstallmentDate
        /// </summary>
        [DataMember(Name = "FirstInstallmentDate", EmitDefaultValue = false)]
        public DateTime FirstInstallmentDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PlanDataModel {\n");
            sb.Append("  TotalAmount: ").Append(TotalAmount).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  NumberOfInstallments: ").Append(NumberOfInstallments).Append("\n");
            sb.Append("  TerminalId: ").Append(TerminalId).Append("\n");
            sb.Append("  PurchaseMethod: ").Append(PurchaseMethod).Append("\n");
            sb.Append("  RefOrderNumber: ").Append(RefOrderNumber).Append("\n");
            sb.Append("  ExtendedParams: ").Append(ExtendedParams).Append("\n");
            sb.Append("  FirstInstallmentAmount: ").Append(FirstInstallmentAmount).Append("\n");
            sb.Append("  FirstInstallmentDate: ").Append(FirstInstallmentDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PlanDataModel);
        }

        /// <summary>
        /// Returns true if PlanDataModel instances are equal
        /// </summary>
        /// <param name="input">Instance of PlanDataModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PlanDataModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.TotalAmount == input.TotalAmount ||
                    this.TotalAmount.Equals(input.TotalAmount)
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.NumberOfInstallments == input.NumberOfInstallments ||
                    this.NumberOfInstallments.Equals(input.NumberOfInstallments)
                ) && 
                (
                    this.TerminalId == input.TerminalId ||
                    (this.TerminalId != null &&
                    this.TerminalId.Equals(input.TerminalId))
                ) && 
                (
                    this.PurchaseMethod == input.PurchaseMethod ||
                    this.PurchaseMethod.Equals(input.PurchaseMethod)
                ) && 
                (
                    this.RefOrderNumber == input.RefOrderNumber ||
                    (this.RefOrderNumber != null &&
                    this.RefOrderNumber.Equals(input.RefOrderNumber))
                ) && 
                (
                    this.ExtendedParams == input.ExtendedParams ||
                    this.ExtendedParams != null &&
                    input.ExtendedParams != null &&
                    this.ExtendedParams.SequenceEqual(input.ExtendedParams)
                ) && 
                (
                    this.FirstInstallmentAmount == input.FirstInstallmentAmount ||
                    this.FirstInstallmentAmount.Equals(input.FirstInstallmentAmount)
                ) && 
                (
                    this.FirstInstallmentDate == input.FirstInstallmentDate ||
                    (this.FirstInstallmentDate != null &&
                    this.FirstInstallmentDate.Equals(input.FirstInstallmentDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.TotalAmount.GetHashCode();
                if (this.Currency != null)
                {
                    hashCode = (hashCode * 59) + this.Currency.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.NumberOfInstallments.GetHashCode();
                if (this.TerminalId != null)
                {
                    hashCode = (hashCode * 59) + this.TerminalId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PurchaseMethod.GetHashCode();
                if (this.RefOrderNumber != null)
                {
                    hashCode = (hashCode * 59) + this.RefOrderNumber.GetHashCode();
                }
                if (this.ExtendedParams != null)
                {
                    hashCode = (hashCode * 59) + this.ExtendedParams.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.FirstInstallmentAmount.GetHashCode();
                if (this.FirstInstallmentDate != null)
                {
                    hashCode = (hashCode * 59) + this.FirstInstallmentDate.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
