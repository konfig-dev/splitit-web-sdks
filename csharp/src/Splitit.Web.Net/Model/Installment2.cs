/*
 * splitit-web-api-v3
 *
 * Splitit's Web API
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://konfigthis.com
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Splitit.Web.Net.Client.OpenAPIDateConverter;

namespace Splitit.Web.Net.Model
{
    /// <summary>
    /// Installment2
    /// </summary>
    [DataContract(Name = "Installment2")]
    public partial class Installment2 : IEquatable<Installment2>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Installment2" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Installment2() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Installment2" /> class.
        /// </summary>
        /// <param name="installmentId">installmentId.</param>
        /// <param name="installmentNumber">installmentNumber (required).</param>
        /// <param name="amount">amount.</param>
        /// <param name="originalAmount">originalAmount.</param>
        /// <param name="refundAmount">refundAmount.</param>
        /// <param name="processDateTime">processDateTime.</param>
        /// <param name="isRefund">isRefund (required).</param>
        /// <param name="requiredCredit">requiredCredit.</param>
        /// <param name="createdDateTime">createdDateTime (required).</param>
        /// <param name="status">status.</param>
        /// <param name="transactionResults">transactionResults.</param>
        /// <param name="cardDetails">cardDetails.</param>
        /// <param name="result">result.</param>
        /// <param name="paymentMethod">paymentMethod.</param>
        public Installment2(string installmentId = default(string), int installmentNumber = default(int), Money amount = default(Money), Money originalAmount = default(Money), Money refundAmount = default(Money), DateTime processDateTime = default(DateTime), bool isRefund = default(bool), Money requiredCredit = default(Money), DateTime createdDateTime = default(DateTime), ReferenceEntityBase status = default(ReferenceEntityBase), List<TransactionResult> transactionResults = default(List<TransactionResult>), CardData2 cardDetails = default(CardData2), bool result = default(bool), string paymentMethod = default(string))
        {
            this.InstallmentNumber = installmentNumber;
            this.IsRefund = isRefund;
            this.CreatedDateTime = createdDateTime;
            this.InstallmentId = installmentId;
            this.Amount = amount;
            this.OriginalAmount = originalAmount;
            this.RefundAmount = refundAmount;
            this.ProcessDateTime = processDateTime;
            this.RequiredCredit = requiredCredit;
            this.Status = status;
            this.TransactionResults = transactionResults;
            this.CardDetails = cardDetails;
            this.Result = result;
            this.PaymentMethod = paymentMethod;
        }

        /// <summary>
        /// Gets or Sets InstallmentId
        /// </summary>
        [DataMember(Name = "InstallmentId", EmitDefaultValue = false)]
        public string InstallmentId { get; set; }

        /// <summary>
        /// Gets or Sets InstallmentNumber
        /// </summary>
        [DataMember(Name = "InstallmentNumber", IsRequired = true, EmitDefaultValue = true)]
        public int InstallmentNumber { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name = "Amount", EmitDefaultValue = false)]
        public Money Amount { get; set; }

        /// <summary>
        /// Gets or Sets OriginalAmount
        /// </summary>
        [DataMember(Name = "OriginalAmount", EmitDefaultValue = false)]
        public Money OriginalAmount { get; set; }

        /// <summary>
        /// Gets or Sets RefundAmount
        /// </summary>
        [DataMember(Name = "RefundAmount", EmitDefaultValue = false)]
        public Money RefundAmount { get; set; }

        /// <summary>
        /// Gets or Sets ProcessDateTime
        /// </summary>
        [DataMember(Name = "ProcessDateTime", EmitDefaultValue = false)]
        public DateTime ProcessDateTime { get; set; }

        /// <summary>
        /// Gets or Sets IsRefund
        /// </summary>
        [DataMember(Name = "IsRefund", IsRequired = true, EmitDefaultValue = true)]
        public bool IsRefund { get; set; }

        /// <summary>
        /// Gets or Sets RequiredCredit
        /// </summary>
        [DataMember(Name = "RequiredCredit", EmitDefaultValue = false)]
        public Money RequiredCredit { get; set; }

        /// <summary>
        /// Gets or Sets CreatedDateTime
        /// </summary>
        [DataMember(Name = "CreatedDateTime", IsRequired = true, EmitDefaultValue = true)]
        public DateTime CreatedDateTime { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "Status", EmitDefaultValue = false)]
        public ReferenceEntityBase Status { get; set; }

        /// <summary>
        /// Gets or Sets TransactionResults
        /// </summary>
        [DataMember(Name = "TransactionResults", EmitDefaultValue = false)]
        public List<TransactionResult> TransactionResults { get; set; }

        /// <summary>
        /// Gets or Sets CardDetails
        /// </summary>
        [DataMember(Name = "CardDetails", EmitDefaultValue = false)]
        public CardData2 CardDetails { get; set; }

        /// <summary>
        /// Gets or Sets Result
        /// </summary>
        [DataMember(Name = "Result", EmitDefaultValue = true)]
        public bool Result { get; set; }

        /// <summary>
        /// Gets or Sets PaymentMethod
        /// </summary>
        [DataMember(Name = "PaymentMethod", EmitDefaultValue = false)]
        public string PaymentMethod { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Installment2 {\n");
            sb.Append("  InstallmentId: ").Append(InstallmentId).Append("\n");
            sb.Append("  InstallmentNumber: ").Append(InstallmentNumber).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  OriginalAmount: ").Append(OriginalAmount).Append("\n");
            sb.Append("  RefundAmount: ").Append(RefundAmount).Append("\n");
            sb.Append("  ProcessDateTime: ").Append(ProcessDateTime).Append("\n");
            sb.Append("  IsRefund: ").Append(IsRefund).Append("\n");
            sb.Append("  RequiredCredit: ").Append(RequiredCredit).Append("\n");
            sb.Append("  CreatedDateTime: ").Append(CreatedDateTime).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  TransactionResults: ").Append(TransactionResults).Append("\n");
            sb.Append("  CardDetails: ").Append(CardDetails).Append("\n");
            sb.Append("  Result: ").Append(Result).Append("\n");
            sb.Append("  PaymentMethod: ").Append(PaymentMethod).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Installment2);
        }

        /// <summary>
        /// Returns true if Installment2 instances are equal
        /// </summary>
        /// <param name="input">Instance of Installment2 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Installment2 input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.InstallmentId == input.InstallmentId ||
                    (this.InstallmentId != null &&
                    this.InstallmentId.Equals(input.InstallmentId))
                ) && 
                (
                    this.InstallmentNumber == input.InstallmentNumber ||
                    this.InstallmentNumber.Equals(input.InstallmentNumber)
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.OriginalAmount == input.OriginalAmount ||
                    (this.OriginalAmount != null &&
                    this.OriginalAmount.Equals(input.OriginalAmount))
                ) && 
                (
                    this.RefundAmount == input.RefundAmount ||
                    (this.RefundAmount != null &&
                    this.RefundAmount.Equals(input.RefundAmount))
                ) && 
                (
                    this.ProcessDateTime == input.ProcessDateTime ||
                    (this.ProcessDateTime != null &&
                    this.ProcessDateTime.Equals(input.ProcessDateTime))
                ) && 
                (
                    this.IsRefund == input.IsRefund ||
                    this.IsRefund.Equals(input.IsRefund)
                ) && 
                (
                    this.RequiredCredit == input.RequiredCredit ||
                    (this.RequiredCredit != null &&
                    this.RequiredCredit.Equals(input.RequiredCredit))
                ) && 
                (
                    this.CreatedDateTime == input.CreatedDateTime ||
                    (this.CreatedDateTime != null &&
                    this.CreatedDateTime.Equals(input.CreatedDateTime))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.TransactionResults == input.TransactionResults ||
                    this.TransactionResults != null &&
                    input.TransactionResults != null &&
                    this.TransactionResults.SequenceEqual(input.TransactionResults)
                ) && 
                (
                    this.CardDetails == input.CardDetails ||
                    (this.CardDetails != null &&
                    this.CardDetails.Equals(input.CardDetails))
                ) && 
                (
                    this.Result == input.Result ||
                    this.Result.Equals(input.Result)
                ) && 
                (
                    this.PaymentMethod == input.PaymentMethod ||
                    (this.PaymentMethod != null &&
                    this.PaymentMethod.Equals(input.PaymentMethod))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.InstallmentId != null)
                {
                    hashCode = (hashCode * 59) + this.InstallmentId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.InstallmentNumber.GetHashCode();
                if (this.Amount != null)
                {
                    hashCode = (hashCode * 59) + this.Amount.GetHashCode();
                }
                if (this.OriginalAmount != null)
                {
                    hashCode = (hashCode * 59) + this.OriginalAmount.GetHashCode();
                }
                if (this.RefundAmount != null)
                {
                    hashCode = (hashCode * 59) + this.RefundAmount.GetHashCode();
                }
                if (this.ProcessDateTime != null)
                {
                    hashCode = (hashCode * 59) + this.ProcessDateTime.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsRefund.GetHashCode();
                if (this.RequiredCredit != null)
                {
                    hashCode = (hashCode * 59) + this.RequiredCredit.GetHashCode();
                }
                if (this.CreatedDateTime != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedDateTime.GetHashCode();
                }
                if (this.Status != null)
                {
                    hashCode = (hashCode * 59) + this.Status.GetHashCode();
                }
                if (this.TransactionResults != null)
                {
                    hashCode = (hashCode * 59) + this.TransactionResults.GetHashCode();
                }
                if (this.CardDetails != null)
                {
                    hashCode = (hashCode * 59) + this.CardDetails.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Result.GetHashCode();
                if (this.PaymentMethod != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentMethod.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
