/*
 * splitit-web-api-v3
 *
 * Splitit's Web API
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://konfigthis.com
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Splitit.Web.Net.Client.OpenAPIDateConverter;

namespace Splitit.Web.Net.Model
{
    /// <summary>
    /// ThreeDSData
    /// </summary>
    [DataContract(Name = "ThreeDSData")]
    public partial class ThreeDSData : IEquatable<ThreeDSData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ThreeDSData" /> class.
        /// </summary>
        /// <param name="eCI">eCI.</param>
        /// <param name="cAVV">cAVV.</param>
        /// <param name="xID">xID.</param>
        /// <param name="directoryServerTxnId">directoryServerTxnId.</param>
        /// <param name="threeDSVersion">threeDSVersion.</param>
        /// <param name="transactionId">transactionId.</param>
        public ThreeDSData(string eCI = default(string), string cAVV = default(string), string xID = default(string), string directoryServerTxnId = default(string), string threeDSVersion = default(string), string transactionId = default(string))
        {
            this.ECI = eCI;
            this.CAVV = cAVV;
            this.XID = xID;
            this.DirectoryServerTxnId = directoryServerTxnId;
            this.ThreeDSVersion = threeDSVersion;
            this.TransactionId = transactionId;
        }

        /// <summary>
        /// Gets or Sets ECI
        /// </summary>
        [DataMember(Name = "ECI", EmitDefaultValue = false)]
        public string ECI { get; set; }

        /// <summary>
        /// Gets or Sets CAVV
        /// </summary>
        [DataMember(Name = "CAVV", EmitDefaultValue = false)]
        public string CAVV { get; set; }

        /// <summary>
        /// Gets or Sets XID
        /// </summary>
        [DataMember(Name = "XID", EmitDefaultValue = false)]
        public string XID { get; set; }

        /// <summary>
        /// Gets or Sets DirectoryServerTxnId
        /// </summary>
        [DataMember(Name = "DirectoryServerTxnId", EmitDefaultValue = false)]
        public string DirectoryServerTxnId { get; set; }

        /// <summary>
        /// Gets or Sets ThreeDSVersion
        /// </summary>
        [DataMember(Name = "ThreeDSVersion", EmitDefaultValue = false)]
        public string ThreeDSVersion { get; set; }

        /// <summary>
        /// Gets or Sets TransactionId
        /// </summary>
        [DataMember(Name = "TransactionId", EmitDefaultValue = false)]
        public string TransactionId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ThreeDSData {\n");
            sb.Append("  ECI: ").Append(ECI).Append("\n");
            sb.Append("  CAVV: ").Append(CAVV).Append("\n");
            sb.Append("  XID: ").Append(XID).Append("\n");
            sb.Append("  DirectoryServerTxnId: ").Append(DirectoryServerTxnId).Append("\n");
            sb.Append("  ThreeDSVersion: ").Append(ThreeDSVersion).Append("\n");
            sb.Append("  TransactionId: ").Append(TransactionId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ThreeDSData);
        }

        /// <summary>
        /// Returns true if ThreeDSData instances are equal
        /// </summary>
        /// <param name="input">Instance of ThreeDSData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ThreeDSData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ECI == input.ECI ||
                    (this.ECI != null &&
                    this.ECI.Equals(input.ECI))
                ) && 
                (
                    this.CAVV == input.CAVV ||
                    (this.CAVV != null &&
                    this.CAVV.Equals(input.CAVV))
                ) && 
                (
                    this.XID == input.XID ||
                    (this.XID != null &&
                    this.XID.Equals(input.XID))
                ) && 
                (
                    this.DirectoryServerTxnId == input.DirectoryServerTxnId ||
                    (this.DirectoryServerTxnId != null &&
                    this.DirectoryServerTxnId.Equals(input.DirectoryServerTxnId))
                ) && 
                (
                    this.ThreeDSVersion == input.ThreeDSVersion ||
                    (this.ThreeDSVersion != null &&
                    this.ThreeDSVersion.Equals(input.ThreeDSVersion))
                ) && 
                (
                    this.TransactionId == input.TransactionId ||
                    (this.TransactionId != null &&
                    this.TransactionId.Equals(input.TransactionId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ECI != null)
                {
                    hashCode = (hashCode * 59) + this.ECI.GetHashCode();
                }
                if (this.CAVV != null)
                {
                    hashCode = (hashCode * 59) + this.CAVV.GetHashCode();
                }
                if (this.XID != null)
                {
                    hashCode = (hashCode * 59) + this.XID.GetHashCode();
                }
                if (this.DirectoryServerTxnId != null)
                {
                    hashCode = (hashCode * 59) + this.DirectoryServerTxnId.GetHashCode();
                }
                if (this.ThreeDSVersion != null)
                {
                    hashCode = (hashCode * 59) + this.ThreeDSVersion.GetHashCode();
                }
                if (this.TransactionId != null)
                {
                    hashCode = (hashCode * 59) + this.TransactionId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
