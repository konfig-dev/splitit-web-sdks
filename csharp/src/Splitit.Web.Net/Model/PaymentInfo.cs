/*
 * splitit-web-api-v3
 *
 * Splitit's Web API
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://konfigthis.com
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Splitit.Web.Net.Client.OpenAPIDateConverter;

namespace Splitit.Web.Net.Model
{
    /// <summary>
    /// PaymentInfo
    /// </summary>
    [DataContract(Name = "PaymentInfo")]
    public partial class PaymentInfo : IEquatable<PaymentInfo>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets CardType
        /// </summary>
        [DataMember(Name = "CardType", EmitDefaultValue = false)]
        public CardType? CardType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentInfo" /> class.
        /// </summary>
        /// <param name="cardBin">cardBin.</param>
        /// <param name="cardType">cardType.</param>
        public PaymentInfo(string cardBin = default(string), CardType? cardType = default(CardType?))
        {
            this.CardBin = cardBin;
            this.CardType = cardType;
        }

        /// <summary>
        /// Gets or Sets CardBin
        /// </summary>
        [DataMember(Name = "CardBin", EmitDefaultValue = false)]
        public string CardBin { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PaymentInfo {\n");
            sb.Append("  CardBin: ").Append(CardBin).Append("\n");
            sb.Append("  CardType: ").Append(CardType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaymentInfo);
        }

        /// <summary>
        /// Returns true if PaymentInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of PaymentInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentInfo input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CardBin == input.CardBin ||
                    (this.CardBin != null &&
                    this.CardBin.Equals(input.CardBin))
                ) && 
                (
                    this.CardType == input.CardType ||
                    this.CardType.Equals(input.CardType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CardBin != null)
                {
                    hashCode = (hashCode * 59) + this.CardBin.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CardType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
