/*
 * splitit-web-api-v3
 *
 * Splitit's Web API
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://konfigthis.com
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Splitit.Web.Net.Client.OpenAPIDateConverter;

namespace Splitit.Web.Net.Model
{
    /// <summary>
    /// InstallmentPlanCreateRequest
    /// </summary>
    [DataContract(Name = "InstallmentPlanCreateRequest")]
    public partial class InstallmentPlanCreateRequest : IEquatable<InstallmentPlanCreateRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InstallmentPlanCreateRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InstallmentPlanCreateRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InstallmentPlanCreateRequest" /> class.
        /// </summary>
        /// <param name="autoCapture">autoCapture (required).</param>
        /// <param name="attempt3dSecure">attempt3dSecure.</param>
        /// <param name="termsAndConditionsAccepted">termsAndConditionsAccepted (required).</param>
        /// <param name="shopper">shopper.</param>
        /// <param name="planData">planData.</param>
        /// <param name="billingAddress">billingAddress.</param>
        /// <param name="paymentMethod">paymentMethod.</param>
        /// <param name="redirectUrls">redirectUrls.</param>
        /// <param name="processingData">processingData.</param>
        /// <param name="eventsEndpoints">eventsEndpoints.</param>
        public InstallmentPlanCreateRequest(bool autoCapture = default(bool), bool attempt3dSecure = default(bool), bool termsAndConditionsAccepted = default(bool), ShopperData shopper = default(ShopperData), PlanDataModel planData = default(PlanDataModel), AddressDataModel billingAddress = default(AddressDataModel), PaymentMethodModel paymentMethod = default(PaymentMethodModel), RedirectionEndpointsModel redirectUrls = default(RedirectionEndpointsModel), ProcessingData processingData = default(ProcessingData), EventsEndpointsModel eventsEndpoints = default(EventsEndpointsModel))
        {
            this.AutoCapture = autoCapture;
            this.TermsAndConditionsAccepted = termsAndConditionsAccepted;
            this.Attempt3dSecure = attempt3dSecure;
            this.Shopper = shopper;
            this.PlanData = planData;
            this.BillingAddress = billingAddress;
            this.PaymentMethod = paymentMethod;
            this.RedirectUrls = redirectUrls;
            this.ProcessingData = processingData;
            this.EventsEndpoints = eventsEndpoints;
        }

        /// <summary>
        /// Gets or Sets AutoCapture
        /// </summary>
        [DataMember(Name = "AutoCapture", IsRequired = true, EmitDefaultValue = true)]
        public bool AutoCapture { get; set; }

        /// <summary>
        /// Gets or Sets Attempt3dSecure
        /// </summary>
        [DataMember(Name = "Attempt3dSecure", EmitDefaultValue = true)]
        public bool Attempt3dSecure { get; set; }

        /// <summary>
        /// Gets or Sets TermsAndConditionsAccepted
        /// </summary>
        [DataMember(Name = "TermsAndConditionsAccepted", IsRequired = true, EmitDefaultValue = true)]
        public bool TermsAndConditionsAccepted { get; set; }

        /// <summary>
        /// Gets or Sets Shopper
        /// </summary>
        [DataMember(Name = "Shopper", EmitDefaultValue = false)]
        public ShopperData Shopper { get; set; }

        /// <summary>
        /// Gets or Sets PlanData
        /// </summary>
        [DataMember(Name = "PlanData", EmitDefaultValue = false)]
        public PlanDataModel PlanData { get; set; }

        /// <summary>
        /// Gets or Sets BillingAddress
        /// </summary>
        [DataMember(Name = "BillingAddress", EmitDefaultValue = false)]
        public AddressDataModel BillingAddress { get; set; }

        /// <summary>
        /// Gets or Sets PaymentMethod
        /// </summary>
        [DataMember(Name = "PaymentMethod", EmitDefaultValue = false)]
        public PaymentMethodModel PaymentMethod { get; set; }

        /// <summary>
        /// Gets or Sets RedirectUrls
        /// </summary>
        [DataMember(Name = "RedirectUrls", EmitDefaultValue = false)]
        public RedirectionEndpointsModel RedirectUrls { get; set; }

        /// <summary>
        /// Gets or Sets ProcessingData
        /// </summary>
        [DataMember(Name = "ProcessingData", EmitDefaultValue = false)]
        public ProcessingData ProcessingData { get; set; }

        /// <summary>
        /// Gets or Sets EventsEndpoints
        /// </summary>
        [DataMember(Name = "EventsEndpoints", EmitDefaultValue = false)]
        public EventsEndpointsModel EventsEndpoints { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InstallmentPlanCreateRequest {\n");
            sb.Append("  AutoCapture: ").Append(AutoCapture).Append("\n");
            sb.Append("  Attempt3dSecure: ").Append(Attempt3dSecure).Append("\n");
            sb.Append("  TermsAndConditionsAccepted: ").Append(TermsAndConditionsAccepted).Append("\n");
            sb.Append("  Shopper: ").Append(Shopper).Append("\n");
            sb.Append("  PlanData: ").Append(PlanData).Append("\n");
            sb.Append("  BillingAddress: ").Append(BillingAddress).Append("\n");
            sb.Append("  PaymentMethod: ").Append(PaymentMethod).Append("\n");
            sb.Append("  RedirectUrls: ").Append(RedirectUrls).Append("\n");
            sb.Append("  ProcessingData: ").Append(ProcessingData).Append("\n");
            sb.Append("  EventsEndpoints: ").Append(EventsEndpoints).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InstallmentPlanCreateRequest);
        }

        /// <summary>
        /// Returns true if InstallmentPlanCreateRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of InstallmentPlanCreateRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InstallmentPlanCreateRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AutoCapture == input.AutoCapture ||
                    this.AutoCapture.Equals(input.AutoCapture)
                ) && 
                (
                    this.Attempt3dSecure == input.Attempt3dSecure ||
                    this.Attempt3dSecure.Equals(input.Attempt3dSecure)
                ) && 
                (
                    this.TermsAndConditionsAccepted == input.TermsAndConditionsAccepted ||
                    this.TermsAndConditionsAccepted.Equals(input.TermsAndConditionsAccepted)
                ) && 
                (
                    this.Shopper == input.Shopper ||
                    (this.Shopper != null &&
                    this.Shopper.Equals(input.Shopper))
                ) && 
                (
                    this.PlanData == input.PlanData ||
                    (this.PlanData != null &&
                    this.PlanData.Equals(input.PlanData))
                ) && 
                (
                    this.BillingAddress == input.BillingAddress ||
                    (this.BillingAddress != null &&
                    this.BillingAddress.Equals(input.BillingAddress))
                ) && 
                (
                    this.PaymentMethod == input.PaymentMethod ||
                    (this.PaymentMethod != null &&
                    this.PaymentMethod.Equals(input.PaymentMethod))
                ) && 
                (
                    this.RedirectUrls == input.RedirectUrls ||
                    (this.RedirectUrls != null &&
                    this.RedirectUrls.Equals(input.RedirectUrls))
                ) && 
                (
                    this.ProcessingData == input.ProcessingData ||
                    (this.ProcessingData != null &&
                    this.ProcessingData.Equals(input.ProcessingData))
                ) && 
                (
                    this.EventsEndpoints == input.EventsEndpoints ||
                    (this.EventsEndpoints != null &&
                    this.EventsEndpoints.Equals(input.EventsEndpoints))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.AutoCapture.GetHashCode();
                hashCode = (hashCode * 59) + this.Attempt3dSecure.GetHashCode();
                hashCode = (hashCode * 59) + this.TermsAndConditionsAccepted.GetHashCode();
                if (this.Shopper != null)
                {
                    hashCode = (hashCode * 59) + this.Shopper.GetHashCode();
                }
                if (this.PlanData != null)
                {
                    hashCode = (hashCode * 59) + this.PlanData.GetHashCode();
                }
                if (this.BillingAddress != null)
                {
                    hashCode = (hashCode * 59) + this.BillingAddress.GetHashCode();
                }
                if (this.PaymentMethod != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentMethod.GetHashCode();
                }
                if (this.RedirectUrls != null)
                {
                    hashCode = (hashCode * 59) + this.RedirectUrls.GetHashCode();
                }
                if (this.ProcessingData != null)
                {
                    hashCode = (hashCode * 59) + this.ProcessingData.GetHashCode();
                }
                if (this.EventsEndpoints != null)
                {
                    hashCode = (hashCode * 59) + this.EventsEndpoints.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
