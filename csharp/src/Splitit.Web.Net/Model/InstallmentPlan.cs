/*
 * splitit-web-api-v3
 *
 * Splitit's Web API
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://konfigthis.com
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Splitit.Web.Net.Client.OpenAPIDateConverter;

namespace Splitit.Web.Net.Model
{
    /// <summary>
    /// InstallmentPlan
    /// </summary>
    [DataContract(Name = "InstallmentPlan")]
    public partial class InstallmentPlan : IEquatable<InstallmentPlan>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets FundingStatus
        /// </summary>
        [DataMember(Name = "FundingStatus", IsRequired = true, EmitDefaultValue = true)]
        public MoneyFlows FundingStatus { get; set; }

        /// <summary>
        /// Gets or Sets TestMode
        /// </summary>
        [DataMember(Name = "TestMode", IsRequired = true, EmitDefaultValue = true)]
        public TestModes TestMode { get; set; }

        /// <summary>
        /// Gets or Sets ExternalPaymentProvider
        /// </summary>
        [DataMember(Name = "ExternalPaymentProvider", EmitDefaultValue = false)]
        public ExternalProviderTypes? ExternalPaymentProvider { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="InstallmentPlan" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InstallmentPlan() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InstallmentPlan" /> class.
        /// </summary>
        /// <param name="installmentPlanNumber">installmentPlanNumber.</param>
        /// <param name="installmentPlanStatus">installmentPlanStatus.</param>
        /// <param name="amount">amount.</param>
        /// <param name="outstandingAmount">outstandingAmount.</param>
        /// <param name="disputes">disputes.</param>
        /// <param name="numberOfInstallments">numberOfInstallments (required).</param>
        /// <param name="numberOfProcessedInstallments">numberOfProcessedInstallments (required).</param>
        /// <param name="originalAmount">originalAmount.</param>
        /// <param name="refundAmount">refundAmount.</param>
        /// <param name="consumer">consumer.</param>
        /// <param name="activeCard">activeCard.</param>
        /// <param name="fraudCheck">fraudCheck.</param>
        /// <param name="terminal">terminal.</param>
        /// <param name="merchant">merchant.</param>
        /// <param name="refOrderNumber">refOrderNumber.</param>
        /// <param name="purchaseMethod">purchaseMethod.</param>
        /// <param name="strategy">strategy.</param>
        /// <param name="delayResolution">delayResolution.</param>
        /// <param name="extendedParams">extendedParams.</param>
        /// <param name="isFullCaptured">isFullCaptured (required).</param>
        /// <param name="isChargedBack">isChargedBack (required).</param>
        /// <param name="arePaymentsOnHold">arePaymentsOnHold (required).</param>
        /// <param name="scpFundingPercent">scpFundingPercent (required).</param>
        /// <param name="fundingStatus">fundingStatus (required).</param>
        /// <param name="testMode">testMode (required).</param>
        /// <param name="creationDateTime">creationDateTime (required).</param>
        /// <param name="lifeTimeUrlExpirationTime">lifeTimeUrlExpirationTime (required).</param>
        /// <param name="installments">installments.</param>
        /// <param name="secureAuthorizations">secureAuthorizations.</param>
        /// <param name="logoUrl">logoUrl.</param>
        /// <param name="isInAutoRetry">isInAutoRetry (required).</param>
        /// <param name="paymentMethod">paymentMethod.</param>
        /// <param name="allowCardUpdateOnSplititPortals">allowCardUpdateOnSplititPortals (required).</param>
        /// <param name="onHoldLastOpenDate">onHoldLastOpenDate.</param>
        /// <param name="onHoldLastOpenUserId">onHoldLastOpenUserId.</param>
        /// <param name="installmentsScheduleInterval">installmentsScheduleInterval (required).</param>
        /// <param name="externalPaymentProvider">externalPaymentProvider.</param>
        public InstallmentPlan(string installmentPlanNumber = default(string), ReferenceEntityBase installmentPlanStatus = default(ReferenceEntityBase), Money amount = default(Money), Money outstandingAmount = default(Money), Disputes disputes = default(Disputes), int numberOfInstallments = default(int), int numberOfProcessedInstallments = default(int), Money originalAmount = default(Money), Money refundAmount = default(Money), ConsumerData consumer = default(ConsumerData), CardData2 activeCard = default(CardData2), FraudCheck fraudCheck = default(FraudCheck), TerminalRef terminal = default(TerminalRef), MerchantRef merchant = default(MerchantRef), string refOrderNumber = default(string), ReferenceEntityBase purchaseMethod = default(ReferenceEntityBase), ReferenceEntityBase strategy = default(ReferenceEntityBase), ReferenceEntityBase delayResolution = default(ReferenceEntityBase), Dictionary<string, string> extendedParams = default(Dictionary<string, string>), bool isFullCaptured = default(bool), bool isChargedBack = default(bool), bool arePaymentsOnHold = default(bool), double scpFundingPercent = default(double), MoneyFlows fundingStatus = default(MoneyFlows), TestModes testMode = default(TestModes), DateTime creationDateTime = default(DateTime), DateTime lifeTimeUrlExpirationTime = default(DateTime), List<Installment2> installments = default(List<Installment2>), List<ReAuthorization> secureAuthorizations = default(List<ReAuthorization>), string logoUrl = default(string), bool isInAutoRetry = default(bool), string paymentMethod = default(string), bool allowCardUpdateOnSplititPortals = default(bool), DateTime onHoldLastOpenDate = default(DateTime), string onHoldLastOpenUserId = default(string), int installmentsScheduleInterval = default(int), ExternalProviderTypes? externalPaymentProvider = default(ExternalProviderTypes?))
        {
            this.NumberOfInstallments = numberOfInstallments;
            this.NumberOfProcessedInstallments = numberOfProcessedInstallments;
            this.IsFullCaptured = isFullCaptured;
            this.IsChargedBack = isChargedBack;
            this.ArePaymentsOnHold = arePaymentsOnHold;
            this.ScpFundingPercent = scpFundingPercent;
            this.FundingStatus = fundingStatus;
            this.TestMode = testMode;
            this.CreationDateTime = creationDateTime;
            this.LifeTimeUrlExpirationTime = lifeTimeUrlExpirationTime;
            this.IsInAutoRetry = isInAutoRetry;
            this.AllowCardUpdateOnSplititPortals = allowCardUpdateOnSplititPortals;
            this.InstallmentsScheduleInterval = installmentsScheduleInterval;
            this.InstallmentPlanNumber = installmentPlanNumber;
            this.InstallmentPlanStatus = installmentPlanStatus;
            this.Amount = amount;
            this.OutstandingAmount = outstandingAmount;
            this.Disputes = disputes;
            this.OriginalAmount = originalAmount;
            this.RefundAmount = refundAmount;
            this.Consumer = consumer;
            this.ActiveCard = activeCard;
            this.FraudCheck = fraudCheck;
            this.Terminal = terminal;
            this.Merchant = merchant;
            this.RefOrderNumber = refOrderNumber;
            this.PurchaseMethod = purchaseMethod;
            this.Strategy = strategy;
            this.DelayResolution = delayResolution;
            this.ExtendedParams = extendedParams;
            this.Installments = installments;
            this.SecureAuthorizations = secureAuthorizations;
            this.LogoUrl = logoUrl;
            this.PaymentMethod = paymentMethod;
            this.OnHoldLastOpenDate = onHoldLastOpenDate;
            this.OnHoldLastOpenUserId = onHoldLastOpenUserId;
            this.ExternalPaymentProvider = externalPaymentProvider;
        }

        /// <summary>
        /// Gets or Sets InstallmentPlanNumber
        /// </summary>
        [DataMember(Name = "InstallmentPlanNumber", EmitDefaultValue = false)]
        public string InstallmentPlanNumber { get; set; }

        /// <summary>
        /// Gets or Sets InstallmentPlanStatus
        /// </summary>
        [DataMember(Name = "InstallmentPlanStatus", EmitDefaultValue = false)]
        public ReferenceEntityBase InstallmentPlanStatus { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name = "Amount", EmitDefaultValue = false)]
        public Money Amount { get; set; }

        /// <summary>
        /// Gets or Sets OutstandingAmount
        /// </summary>
        [DataMember(Name = "OutstandingAmount", EmitDefaultValue = false)]
        public Money OutstandingAmount { get; set; }

        /// <summary>
        /// Gets or Sets Disputes
        /// </summary>
        [DataMember(Name = "Disputes", EmitDefaultValue = false)]
        public Disputes Disputes { get; set; }

        /// <summary>
        /// Gets or Sets NumberOfInstallments
        /// </summary>
        [DataMember(Name = "NumberOfInstallments", IsRequired = true, EmitDefaultValue = true)]
        public int NumberOfInstallments { get; set; }

        /// <summary>
        /// Gets or Sets NumberOfProcessedInstallments
        /// </summary>
        [DataMember(Name = "NumberOfProcessedInstallments", IsRequired = true, EmitDefaultValue = true)]
        public int NumberOfProcessedInstallments { get; set; }

        /// <summary>
        /// Gets or Sets OriginalAmount
        /// </summary>
        [DataMember(Name = "OriginalAmount", EmitDefaultValue = false)]
        public Money OriginalAmount { get; set; }

        /// <summary>
        /// Gets or Sets RefundAmount
        /// </summary>
        [DataMember(Name = "RefundAmount", EmitDefaultValue = false)]
        public Money RefundAmount { get; set; }

        /// <summary>
        /// Gets or Sets Consumer
        /// </summary>
        [DataMember(Name = "Consumer", EmitDefaultValue = false)]
        public ConsumerData Consumer { get; set; }

        /// <summary>
        /// Gets or Sets ActiveCard
        /// </summary>
        [DataMember(Name = "ActiveCard", EmitDefaultValue = false)]
        public CardData2 ActiveCard { get; set; }

        /// <summary>
        /// Gets or Sets FraudCheck
        /// </summary>
        [DataMember(Name = "FraudCheck", EmitDefaultValue = false)]
        public FraudCheck FraudCheck { get; set; }

        /// <summary>
        /// Gets or Sets Terminal
        /// </summary>
        [DataMember(Name = "Terminal", EmitDefaultValue = false)]
        public TerminalRef Terminal { get; set; }

        /// <summary>
        /// Gets or Sets Merchant
        /// </summary>
        [DataMember(Name = "Merchant", EmitDefaultValue = false)]
        public MerchantRef Merchant { get; set; }

        /// <summary>
        /// Gets or Sets RefOrderNumber
        /// </summary>
        [DataMember(Name = "RefOrderNumber", EmitDefaultValue = false)]
        public string RefOrderNumber { get; set; }

        /// <summary>
        /// Gets or Sets PurchaseMethod
        /// </summary>
        [DataMember(Name = "PurchaseMethod", EmitDefaultValue = false)]
        public ReferenceEntityBase PurchaseMethod { get; set; }

        /// <summary>
        /// Gets or Sets Strategy
        /// </summary>
        [DataMember(Name = "Strategy", EmitDefaultValue = false)]
        public ReferenceEntityBase Strategy { get; set; }

        /// <summary>
        /// Gets or Sets DelayResolution
        /// </summary>
        [DataMember(Name = "DelayResolution", EmitDefaultValue = false)]
        public ReferenceEntityBase DelayResolution { get; set; }

        /// <summary>
        /// Gets or Sets ExtendedParams
        /// </summary>
        [DataMember(Name = "ExtendedParams", EmitDefaultValue = false)]
        public Dictionary<string, string> ExtendedParams { get; set; }

        /// <summary>
        /// Gets or Sets IsFullCaptured
        /// </summary>
        [DataMember(Name = "IsFullCaptured", IsRequired = true, EmitDefaultValue = true)]
        public bool IsFullCaptured { get; set; }

        /// <summary>
        /// Gets or Sets IsChargedBack
        /// </summary>
        [DataMember(Name = "IsChargedBack", IsRequired = true, EmitDefaultValue = true)]
        public bool IsChargedBack { get; set; }

        /// <summary>
        /// Gets or Sets ArePaymentsOnHold
        /// </summary>
        [DataMember(Name = "ArePaymentsOnHold", IsRequired = true, EmitDefaultValue = true)]
        public bool ArePaymentsOnHold { get; set; }

        /// <summary>
        /// Gets or Sets ScpFundingPercent
        /// </summary>
        [DataMember(Name = "ScpFundingPercent", IsRequired = true, EmitDefaultValue = true)]
        public double ScpFundingPercent { get; set; }

        /// <summary>
        /// Gets or Sets CreationDateTime
        /// </summary>
        [DataMember(Name = "CreationDateTime", IsRequired = true, EmitDefaultValue = true)]
        public DateTime CreationDateTime { get; set; }

        /// <summary>
        /// Gets or Sets LifeTimeUrlExpirationTime
        /// </summary>
        [DataMember(Name = "LifeTimeUrlExpirationTime", IsRequired = true, EmitDefaultValue = true)]
        public DateTime LifeTimeUrlExpirationTime { get; set; }

        /// <summary>
        /// Gets or Sets Installments
        /// </summary>
        [DataMember(Name = "Installments", EmitDefaultValue = false)]
        public List<Installment2> Installments { get; set; }

        /// <summary>
        /// Gets or Sets SecureAuthorizations
        /// </summary>
        [DataMember(Name = "SecureAuthorizations", EmitDefaultValue = false)]
        public List<ReAuthorization> SecureAuthorizations { get; set; }

        /// <summary>
        /// Gets or Sets LogoUrl
        /// </summary>
        [DataMember(Name = "LogoUrl", EmitDefaultValue = false)]
        public string LogoUrl { get; set; }

        /// <summary>
        /// Gets or Sets IsInAutoRetry
        /// </summary>
        [DataMember(Name = "IsInAutoRetry", IsRequired = true, EmitDefaultValue = true)]
        public bool IsInAutoRetry { get; set; }

        /// <summary>
        /// Gets or Sets PaymentMethod
        /// </summary>
        [DataMember(Name = "PaymentMethod", EmitDefaultValue = false)]
        public string PaymentMethod { get; set; }

        /// <summary>
        /// Gets or Sets AllowCardUpdateOnSplititPortals
        /// </summary>
        [DataMember(Name = "AllowCardUpdateOnSplititPortals", IsRequired = true, EmitDefaultValue = true)]
        public bool AllowCardUpdateOnSplititPortals { get; set; }

        /// <summary>
        /// Gets or Sets OnHoldLastOpenDate
        /// </summary>
        [DataMember(Name = "OnHoldLastOpenDate", EmitDefaultValue = false)]
        public DateTime OnHoldLastOpenDate { get; set; }

        /// <summary>
        /// Gets or Sets OnHoldLastOpenUserId
        /// </summary>
        [DataMember(Name = "OnHoldLastOpenUserId", EmitDefaultValue = false)]
        public string OnHoldLastOpenUserId { get; set; }

        /// <summary>
        /// Gets or Sets InstallmentsScheduleInterval
        /// </summary>
        [DataMember(Name = "InstallmentsScheduleInterval", IsRequired = true, EmitDefaultValue = true)]
        public int InstallmentsScheduleInterval { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InstallmentPlan {\n");
            sb.Append("  InstallmentPlanNumber: ").Append(InstallmentPlanNumber).Append("\n");
            sb.Append("  InstallmentPlanStatus: ").Append(InstallmentPlanStatus).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  OutstandingAmount: ").Append(OutstandingAmount).Append("\n");
            sb.Append("  Disputes: ").Append(Disputes).Append("\n");
            sb.Append("  NumberOfInstallments: ").Append(NumberOfInstallments).Append("\n");
            sb.Append("  NumberOfProcessedInstallments: ").Append(NumberOfProcessedInstallments).Append("\n");
            sb.Append("  OriginalAmount: ").Append(OriginalAmount).Append("\n");
            sb.Append("  RefundAmount: ").Append(RefundAmount).Append("\n");
            sb.Append("  Consumer: ").Append(Consumer).Append("\n");
            sb.Append("  ActiveCard: ").Append(ActiveCard).Append("\n");
            sb.Append("  FraudCheck: ").Append(FraudCheck).Append("\n");
            sb.Append("  Terminal: ").Append(Terminal).Append("\n");
            sb.Append("  Merchant: ").Append(Merchant).Append("\n");
            sb.Append("  RefOrderNumber: ").Append(RefOrderNumber).Append("\n");
            sb.Append("  PurchaseMethod: ").Append(PurchaseMethod).Append("\n");
            sb.Append("  Strategy: ").Append(Strategy).Append("\n");
            sb.Append("  DelayResolution: ").Append(DelayResolution).Append("\n");
            sb.Append("  ExtendedParams: ").Append(ExtendedParams).Append("\n");
            sb.Append("  IsFullCaptured: ").Append(IsFullCaptured).Append("\n");
            sb.Append("  IsChargedBack: ").Append(IsChargedBack).Append("\n");
            sb.Append("  ArePaymentsOnHold: ").Append(ArePaymentsOnHold).Append("\n");
            sb.Append("  ScpFundingPercent: ").Append(ScpFundingPercent).Append("\n");
            sb.Append("  FundingStatus: ").Append(FundingStatus).Append("\n");
            sb.Append("  TestMode: ").Append(TestMode).Append("\n");
            sb.Append("  CreationDateTime: ").Append(CreationDateTime).Append("\n");
            sb.Append("  LifeTimeUrlExpirationTime: ").Append(LifeTimeUrlExpirationTime).Append("\n");
            sb.Append("  Installments: ").Append(Installments).Append("\n");
            sb.Append("  SecureAuthorizations: ").Append(SecureAuthorizations).Append("\n");
            sb.Append("  LogoUrl: ").Append(LogoUrl).Append("\n");
            sb.Append("  IsInAutoRetry: ").Append(IsInAutoRetry).Append("\n");
            sb.Append("  PaymentMethod: ").Append(PaymentMethod).Append("\n");
            sb.Append("  AllowCardUpdateOnSplititPortals: ").Append(AllowCardUpdateOnSplititPortals).Append("\n");
            sb.Append("  OnHoldLastOpenDate: ").Append(OnHoldLastOpenDate).Append("\n");
            sb.Append("  OnHoldLastOpenUserId: ").Append(OnHoldLastOpenUserId).Append("\n");
            sb.Append("  InstallmentsScheduleInterval: ").Append(InstallmentsScheduleInterval).Append("\n");
            sb.Append("  ExternalPaymentProvider: ").Append(ExternalPaymentProvider).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InstallmentPlan);
        }

        /// <summary>
        /// Returns true if InstallmentPlan instances are equal
        /// </summary>
        /// <param name="input">Instance of InstallmentPlan to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InstallmentPlan input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.InstallmentPlanNumber == input.InstallmentPlanNumber ||
                    (this.InstallmentPlanNumber != null &&
                    this.InstallmentPlanNumber.Equals(input.InstallmentPlanNumber))
                ) && 
                (
                    this.InstallmentPlanStatus == input.InstallmentPlanStatus ||
                    (this.InstallmentPlanStatus != null &&
                    this.InstallmentPlanStatus.Equals(input.InstallmentPlanStatus))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.OutstandingAmount == input.OutstandingAmount ||
                    (this.OutstandingAmount != null &&
                    this.OutstandingAmount.Equals(input.OutstandingAmount))
                ) && 
                (
                    this.Disputes == input.Disputes ||
                    (this.Disputes != null &&
                    this.Disputes.Equals(input.Disputes))
                ) && 
                (
                    this.NumberOfInstallments == input.NumberOfInstallments ||
                    this.NumberOfInstallments.Equals(input.NumberOfInstallments)
                ) && 
                (
                    this.NumberOfProcessedInstallments == input.NumberOfProcessedInstallments ||
                    this.NumberOfProcessedInstallments.Equals(input.NumberOfProcessedInstallments)
                ) && 
                (
                    this.OriginalAmount == input.OriginalAmount ||
                    (this.OriginalAmount != null &&
                    this.OriginalAmount.Equals(input.OriginalAmount))
                ) && 
                (
                    this.RefundAmount == input.RefundAmount ||
                    (this.RefundAmount != null &&
                    this.RefundAmount.Equals(input.RefundAmount))
                ) && 
                (
                    this.Consumer == input.Consumer ||
                    (this.Consumer != null &&
                    this.Consumer.Equals(input.Consumer))
                ) && 
                (
                    this.ActiveCard == input.ActiveCard ||
                    (this.ActiveCard != null &&
                    this.ActiveCard.Equals(input.ActiveCard))
                ) && 
                (
                    this.FraudCheck == input.FraudCheck ||
                    (this.FraudCheck != null &&
                    this.FraudCheck.Equals(input.FraudCheck))
                ) && 
                (
                    this.Terminal == input.Terminal ||
                    (this.Terminal != null &&
                    this.Terminal.Equals(input.Terminal))
                ) && 
                (
                    this.Merchant == input.Merchant ||
                    (this.Merchant != null &&
                    this.Merchant.Equals(input.Merchant))
                ) && 
                (
                    this.RefOrderNumber == input.RefOrderNumber ||
                    (this.RefOrderNumber != null &&
                    this.RefOrderNumber.Equals(input.RefOrderNumber))
                ) && 
                (
                    this.PurchaseMethod == input.PurchaseMethod ||
                    (this.PurchaseMethod != null &&
                    this.PurchaseMethod.Equals(input.PurchaseMethod))
                ) && 
                (
                    this.Strategy == input.Strategy ||
                    (this.Strategy != null &&
                    this.Strategy.Equals(input.Strategy))
                ) && 
                (
                    this.DelayResolution == input.DelayResolution ||
                    (this.DelayResolution != null &&
                    this.DelayResolution.Equals(input.DelayResolution))
                ) && 
                (
                    this.ExtendedParams == input.ExtendedParams ||
                    this.ExtendedParams != null &&
                    input.ExtendedParams != null &&
                    this.ExtendedParams.SequenceEqual(input.ExtendedParams)
                ) && 
                (
                    this.IsFullCaptured == input.IsFullCaptured ||
                    this.IsFullCaptured.Equals(input.IsFullCaptured)
                ) && 
                (
                    this.IsChargedBack == input.IsChargedBack ||
                    this.IsChargedBack.Equals(input.IsChargedBack)
                ) && 
                (
                    this.ArePaymentsOnHold == input.ArePaymentsOnHold ||
                    this.ArePaymentsOnHold.Equals(input.ArePaymentsOnHold)
                ) && 
                (
                    this.ScpFundingPercent == input.ScpFundingPercent ||
                    this.ScpFundingPercent.Equals(input.ScpFundingPercent)
                ) && 
                (
                    this.FundingStatus == input.FundingStatus ||
                    this.FundingStatus.Equals(input.FundingStatus)
                ) && 
                (
                    this.TestMode == input.TestMode ||
                    this.TestMode.Equals(input.TestMode)
                ) && 
                (
                    this.CreationDateTime == input.CreationDateTime ||
                    (this.CreationDateTime != null &&
                    this.CreationDateTime.Equals(input.CreationDateTime))
                ) && 
                (
                    this.LifeTimeUrlExpirationTime == input.LifeTimeUrlExpirationTime ||
                    (this.LifeTimeUrlExpirationTime != null &&
                    this.LifeTimeUrlExpirationTime.Equals(input.LifeTimeUrlExpirationTime))
                ) && 
                (
                    this.Installments == input.Installments ||
                    this.Installments != null &&
                    input.Installments != null &&
                    this.Installments.SequenceEqual(input.Installments)
                ) && 
                (
                    this.SecureAuthorizations == input.SecureAuthorizations ||
                    this.SecureAuthorizations != null &&
                    input.SecureAuthorizations != null &&
                    this.SecureAuthorizations.SequenceEqual(input.SecureAuthorizations)
                ) && 
                (
                    this.LogoUrl == input.LogoUrl ||
                    (this.LogoUrl != null &&
                    this.LogoUrl.Equals(input.LogoUrl))
                ) && 
                (
                    this.IsInAutoRetry == input.IsInAutoRetry ||
                    this.IsInAutoRetry.Equals(input.IsInAutoRetry)
                ) && 
                (
                    this.PaymentMethod == input.PaymentMethod ||
                    (this.PaymentMethod != null &&
                    this.PaymentMethod.Equals(input.PaymentMethod))
                ) && 
                (
                    this.AllowCardUpdateOnSplititPortals == input.AllowCardUpdateOnSplititPortals ||
                    this.AllowCardUpdateOnSplititPortals.Equals(input.AllowCardUpdateOnSplititPortals)
                ) && 
                (
                    this.OnHoldLastOpenDate == input.OnHoldLastOpenDate ||
                    (this.OnHoldLastOpenDate != null &&
                    this.OnHoldLastOpenDate.Equals(input.OnHoldLastOpenDate))
                ) && 
                (
                    this.OnHoldLastOpenUserId == input.OnHoldLastOpenUserId ||
                    (this.OnHoldLastOpenUserId != null &&
                    this.OnHoldLastOpenUserId.Equals(input.OnHoldLastOpenUserId))
                ) && 
                (
                    this.InstallmentsScheduleInterval == input.InstallmentsScheduleInterval ||
                    this.InstallmentsScheduleInterval.Equals(input.InstallmentsScheduleInterval)
                ) && 
                (
                    this.ExternalPaymentProvider == input.ExternalPaymentProvider ||
                    this.ExternalPaymentProvider.Equals(input.ExternalPaymentProvider)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.InstallmentPlanNumber != null)
                {
                    hashCode = (hashCode * 59) + this.InstallmentPlanNumber.GetHashCode();
                }
                if (this.InstallmentPlanStatus != null)
                {
                    hashCode = (hashCode * 59) + this.InstallmentPlanStatus.GetHashCode();
                }
                if (this.Amount != null)
                {
                    hashCode = (hashCode * 59) + this.Amount.GetHashCode();
                }
                if (this.OutstandingAmount != null)
                {
                    hashCode = (hashCode * 59) + this.OutstandingAmount.GetHashCode();
                }
                if (this.Disputes != null)
                {
                    hashCode = (hashCode * 59) + this.Disputes.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.NumberOfInstallments.GetHashCode();
                hashCode = (hashCode * 59) + this.NumberOfProcessedInstallments.GetHashCode();
                if (this.OriginalAmount != null)
                {
                    hashCode = (hashCode * 59) + this.OriginalAmount.GetHashCode();
                }
                if (this.RefundAmount != null)
                {
                    hashCode = (hashCode * 59) + this.RefundAmount.GetHashCode();
                }
                if (this.Consumer != null)
                {
                    hashCode = (hashCode * 59) + this.Consumer.GetHashCode();
                }
                if (this.ActiveCard != null)
                {
                    hashCode = (hashCode * 59) + this.ActiveCard.GetHashCode();
                }
                if (this.FraudCheck != null)
                {
                    hashCode = (hashCode * 59) + this.FraudCheck.GetHashCode();
                }
                if (this.Terminal != null)
                {
                    hashCode = (hashCode * 59) + this.Terminal.GetHashCode();
                }
                if (this.Merchant != null)
                {
                    hashCode = (hashCode * 59) + this.Merchant.GetHashCode();
                }
                if (this.RefOrderNumber != null)
                {
                    hashCode = (hashCode * 59) + this.RefOrderNumber.GetHashCode();
                }
                if (this.PurchaseMethod != null)
                {
                    hashCode = (hashCode * 59) + this.PurchaseMethod.GetHashCode();
                }
                if (this.Strategy != null)
                {
                    hashCode = (hashCode * 59) + this.Strategy.GetHashCode();
                }
                if (this.DelayResolution != null)
                {
                    hashCode = (hashCode * 59) + this.DelayResolution.GetHashCode();
                }
                if (this.ExtendedParams != null)
                {
                    hashCode = (hashCode * 59) + this.ExtendedParams.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsFullCaptured.GetHashCode();
                hashCode = (hashCode * 59) + this.IsChargedBack.GetHashCode();
                hashCode = (hashCode * 59) + this.ArePaymentsOnHold.GetHashCode();
                hashCode = (hashCode * 59) + this.ScpFundingPercent.GetHashCode();
                hashCode = (hashCode * 59) + this.FundingStatus.GetHashCode();
                hashCode = (hashCode * 59) + this.TestMode.GetHashCode();
                if (this.CreationDateTime != null)
                {
                    hashCode = (hashCode * 59) + this.CreationDateTime.GetHashCode();
                }
                if (this.LifeTimeUrlExpirationTime != null)
                {
                    hashCode = (hashCode * 59) + this.LifeTimeUrlExpirationTime.GetHashCode();
                }
                if (this.Installments != null)
                {
                    hashCode = (hashCode * 59) + this.Installments.GetHashCode();
                }
                if (this.SecureAuthorizations != null)
                {
                    hashCode = (hashCode * 59) + this.SecureAuthorizations.GetHashCode();
                }
                if (this.LogoUrl != null)
                {
                    hashCode = (hashCode * 59) + this.LogoUrl.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsInAutoRetry.GetHashCode();
                if (this.PaymentMethod != null)
                {
                    hashCode = (hashCode * 59) + this.PaymentMethod.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AllowCardUpdateOnSplititPortals.GetHashCode();
                if (this.OnHoldLastOpenDate != null)
                {
                    hashCode = (hashCode * 59) + this.OnHoldLastOpenDate.GetHashCode();
                }
                if (this.OnHoldLastOpenUserId != null)
                {
                    hashCode = (hashCode * 59) + this.OnHoldLastOpenUserId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.InstallmentsScheduleInterval.GetHashCode();
                hashCode = (hashCode * 59) + this.ExternalPaymentProvider.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
