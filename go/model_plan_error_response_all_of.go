/*
splitit-web-api-v3

Splitit's Web API

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package splitit

import (
	"encoding/json"
)

// PlanErrorResponseAllOf struct for PlanErrorResponseAllOf
type PlanErrorResponseAllOf struct {
	InstallmentPlanNumber *string `json:"InstallmentPlanNumber,omitempty"`
	PaymentInfo *PaymentInfo `json:"PaymentInfo,omitempty"`
}

// NewPlanErrorResponseAllOf instantiates a new PlanErrorResponseAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlanErrorResponseAllOf() *PlanErrorResponseAllOf {
	this := PlanErrorResponseAllOf{}
	return &this
}

// NewPlanErrorResponseAllOfWithDefaults instantiates a new PlanErrorResponseAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlanErrorResponseAllOfWithDefaults() *PlanErrorResponseAllOf {
	this := PlanErrorResponseAllOf{}
	return &this
}

// GetInstallmentPlanNumber returns the InstallmentPlanNumber field value if set, zero value otherwise.
func (o *PlanErrorResponseAllOf) GetInstallmentPlanNumber() string {
	if o == nil || isNil(o.InstallmentPlanNumber) {
		var ret string
		return ret
	}
	return *o.InstallmentPlanNumber
}

// GetInstallmentPlanNumberOk returns a tuple with the InstallmentPlanNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanErrorResponseAllOf) GetInstallmentPlanNumberOk() (*string, bool) {
	if o == nil || isNil(o.InstallmentPlanNumber) {
    return nil, false
	}
	return o.InstallmentPlanNumber, true
}

// HasInstallmentPlanNumber returns a boolean if a field has been set.
func (o *PlanErrorResponseAllOf) HasInstallmentPlanNumber() bool {
	if o != nil && !isNil(o.InstallmentPlanNumber) {
		return true
	}

	return false
}

// SetInstallmentPlanNumber gets a reference to the given string and assigns it to the InstallmentPlanNumber field.
func (o *PlanErrorResponseAllOf) SetInstallmentPlanNumber(v string) {
	o.InstallmentPlanNumber = &v
}

// GetPaymentInfo returns the PaymentInfo field value if set, zero value otherwise.
func (o *PlanErrorResponseAllOf) GetPaymentInfo() PaymentInfo {
	if o == nil || isNil(o.PaymentInfo) {
		var ret PaymentInfo
		return ret
	}
	return *o.PaymentInfo
}

// GetPaymentInfoOk returns a tuple with the PaymentInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanErrorResponseAllOf) GetPaymentInfoOk() (*PaymentInfo, bool) {
	if o == nil || isNil(o.PaymentInfo) {
    return nil, false
	}
	return o.PaymentInfo, true
}

// HasPaymentInfo returns a boolean if a field has been set.
func (o *PlanErrorResponseAllOf) HasPaymentInfo() bool {
	if o != nil && !isNil(o.PaymentInfo) {
		return true
	}

	return false
}

// SetPaymentInfo gets a reference to the given PaymentInfo and assigns it to the PaymentInfo field.
func (o *PlanErrorResponseAllOf) SetPaymentInfo(v PaymentInfo) {
	o.PaymentInfo = &v
}

func (o PlanErrorResponseAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.InstallmentPlanNumber) {
		toSerialize["InstallmentPlanNumber"] = o.InstallmentPlanNumber
	}
	if !isNil(o.PaymentInfo) {
		toSerialize["PaymentInfo"] = o.PaymentInfo
	}
	return json.Marshal(toSerialize)
}

type NullablePlanErrorResponseAllOf struct {
	value *PlanErrorResponseAllOf
	isSet bool
}

func (v NullablePlanErrorResponseAllOf) Get() *PlanErrorResponseAllOf {
	return v.value
}

func (v *NullablePlanErrorResponseAllOf) Set(val *PlanErrorResponseAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullablePlanErrorResponseAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullablePlanErrorResponseAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlanErrorResponseAllOf(val *PlanErrorResponseAllOf) *NullablePlanErrorResponseAllOf {
	return &NullablePlanErrorResponseAllOf{value: val, isSet: true}
}

func (v NullablePlanErrorResponseAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlanErrorResponseAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


