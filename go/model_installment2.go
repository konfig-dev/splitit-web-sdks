/*
splitit-web-api-v3

Splitit's Web API

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package splitit

import (
	"encoding/json"
	"time"
)

// Installment2 struct for Installment2
type Installment2 struct {
	InstallmentId *string `json:"InstallmentId,omitempty"`
	InstallmentNumber int32 `json:"InstallmentNumber"`
	Amount *Money `json:"Amount,omitempty"`
	OriginalAmount *Money `json:"OriginalAmount,omitempty"`
	RefundAmount *Money `json:"RefundAmount,omitempty"`
	ProcessDateTime *time.Time `json:"ProcessDateTime,omitempty"`
	IsRefund bool `json:"IsRefund"`
	RequiredCredit *Money `json:"RequiredCredit,omitempty"`
	CreatedDateTime time.Time `json:"CreatedDateTime"`
	Status *ReferenceEntityBase `json:"Status,omitempty"`
	TransactionResults []TransactionResult `json:"TransactionResults,omitempty"`
	CardDetails *CardData2 `json:"CardDetails,omitempty"`
	Result *bool `json:"Result,omitempty"`
	PaymentMethod *string `json:"PaymentMethod,omitempty"`
}

// NewInstallment2 instantiates a new Installment2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstallment2(installmentNumber int32, isRefund bool, createdDateTime time.Time) *Installment2 {
	this := Installment2{}
	this.InstallmentNumber = installmentNumber
	this.IsRefund = isRefund
	this.CreatedDateTime = createdDateTime
	return &this
}

// NewInstallment2WithDefaults instantiates a new Installment2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstallment2WithDefaults() *Installment2 {
	this := Installment2{}
	return &this
}

// GetInstallmentId returns the InstallmentId field value if set, zero value otherwise.
func (o *Installment2) GetInstallmentId() string {
	if o == nil || isNil(o.InstallmentId) {
		var ret string
		return ret
	}
	return *o.InstallmentId
}

// GetInstallmentIdOk returns a tuple with the InstallmentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Installment2) GetInstallmentIdOk() (*string, bool) {
	if o == nil || isNil(o.InstallmentId) {
    return nil, false
	}
	return o.InstallmentId, true
}

// HasInstallmentId returns a boolean if a field has been set.
func (o *Installment2) HasInstallmentId() bool {
	if o != nil && !isNil(o.InstallmentId) {
		return true
	}

	return false
}

// SetInstallmentId gets a reference to the given string and assigns it to the InstallmentId field.
func (o *Installment2) SetInstallmentId(v string) {
	o.InstallmentId = &v
}

// GetInstallmentNumber returns the InstallmentNumber field value
func (o *Installment2) GetInstallmentNumber() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.InstallmentNumber
}

// GetInstallmentNumberOk returns a tuple with the InstallmentNumber field value
// and a boolean to check if the value has been set.
func (o *Installment2) GetInstallmentNumberOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.InstallmentNumber, true
}

// SetInstallmentNumber sets field value
func (o *Installment2) SetInstallmentNumber(v int32) {
	o.InstallmentNumber = v
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *Installment2) GetAmount() Money {
	if o == nil || isNil(o.Amount) {
		var ret Money
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Installment2) GetAmountOk() (*Money, bool) {
	if o == nil || isNil(o.Amount) {
    return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *Installment2) HasAmount() bool {
	if o != nil && !isNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given Money and assigns it to the Amount field.
func (o *Installment2) SetAmount(v Money) {
	o.Amount = &v
}

// GetOriginalAmount returns the OriginalAmount field value if set, zero value otherwise.
func (o *Installment2) GetOriginalAmount() Money {
	if o == nil || isNil(o.OriginalAmount) {
		var ret Money
		return ret
	}
	return *o.OriginalAmount
}

// GetOriginalAmountOk returns a tuple with the OriginalAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Installment2) GetOriginalAmountOk() (*Money, bool) {
	if o == nil || isNil(o.OriginalAmount) {
    return nil, false
	}
	return o.OriginalAmount, true
}

// HasOriginalAmount returns a boolean if a field has been set.
func (o *Installment2) HasOriginalAmount() bool {
	if o != nil && !isNil(o.OriginalAmount) {
		return true
	}

	return false
}

// SetOriginalAmount gets a reference to the given Money and assigns it to the OriginalAmount field.
func (o *Installment2) SetOriginalAmount(v Money) {
	o.OriginalAmount = &v
}

// GetRefundAmount returns the RefundAmount field value if set, zero value otherwise.
func (o *Installment2) GetRefundAmount() Money {
	if o == nil || isNil(o.RefundAmount) {
		var ret Money
		return ret
	}
	return *o.RefundAmount
}

// GetRefundAmountOk returns a tuple with the RefundAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Installment2) GetRefundAmountOk() (*Money, bool) {
	if o == nil || isNil(o.RefundAmount) {
    return nil, false
	}
	return o.RefundAmount, true
}

// HasRefundAmount returns a boolean if a field has been set.
func (o *Installment2) HasRefundAmount() bool {
	if o != nil && !isNil(o.RefundAmount) {
		return true
	}

	return false
}

// SetRefundAmount gets a reference to the given Money and assigns it to the RefundAmount field.
func (o *Installment2) SetRefundAmount(v Money) {
	o.RefundAmount = &v
}

// GetProcessDateTime returns the ProcessDateTime field value if set, zero value otherwise.
func (o *Installment2) GetProcessDateTime() time.Time {
	if o == nil || isNil(o.ProcessDateTime) {
		var ret time.Time
		return ret
	}
	return *o.ProcessDateTime
}

// GetProcessDateTimeOk returns a tuple with the ProcessDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Installment2) GetProcessDateTimeOk() (*time.Time, bool) {
	if o == nil || isNil(o.ProcessDateTime) {
    return nil, false
	}
	return o.ProcessDateTime, true
}

// HasProcessDateTime returns a boolean if a field has been set.
func (o *Installment2) HasProcessDateTime() bool {
	if o != nil && !isNil(o.ProcessDateTime) {
		return true
	}

	return false
}

// SetProcessDateTime gets a reference to the given time.Time and assigns it to the ProcessDateTime field.
func (o *Installment2) SetProcessDateTime(v time.Time) {
	o.ProcessDateTime = &v
}

// GetIsRefund returns the IsRefund field value
func (o *Installment2) GetIsRefund() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsRefund
}

// GetIsRefundOk returns a tuple with the IsRefund field value
// and a boolean to check if the value has been set.
func (o *Installment2) GetIsRefundOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return &o.IsRefund, true
}

// SetIsRefund sets field value
func (o *Installment2) SetIsRefund(v bool) {
	o.IsRefund = v
}

// GetRequiredCredit returns the RequiredCredit field value if set, zero value otherwise.
func (o *Installment2) GetRequiredCredit() Money {
	if o == nil || isNil(o.RequiredCredit) {
		var ret Money
		return ret
	}
	return *o.RequiredCredit
}

// GetRequiredCreditOk returns a tuple with the RequiredCredit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Installment2) GetRequiredCreditOk() (*Money, bool) {
	if o == nil || isNil(o.RequiredCredit) {
    return nil, false
	}
	return o.RequiredCredit, true
}

// HasRequiredCredit returns a boolean if a field has been set.
func (o *Installment2) HasRequiredCredit() bool {
	if o != nil && !isNil(o.RequiredCredit) {
		return true
	}

	return false
}

// SetRequiredCredit gets a reference to the given Money and assigns it to the RequiredCredit field.
func (o *Installment2) SetRequiredCredit(v Money) {
	o.RequiredCredit = &v
}

// GetCreatedDateTime returns the CreatedDateTime field value
func (o *Installment2) GetCreatedDateTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedDateTime
}

// GetCreatedDateTimeOk returns a tuple with the CreatedDateTime field value
// and a boolean to check if the value has been set.
func (o *Installment2) GetCreatedDateTimeOk() (*time.Time, bool) {
	if o == nil {
    return nil, false
	}
	return &o.CreatedDateTime, true
}

// SetCreatedDateTime sets field value
func (o *Installment2) SetCreatedDateTime(v time.Time) {
	o.CreatedDateTime = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Installment2) GetStatus() ReferenceEntityBase {
	if o == nil || isNil(o.Status) {
		var ret ReferenceEntityBase
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Installment2) GetStatusOk() (*ReferenceEntityBase, bool) {
	if o == nil || isNil(o.Status) {
    return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Installment2) HasStatus() bool {
	if o != nil && !isNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given ReferenceEntityBase and assigns it to the Status field.
func (o *Installment2) SetStatus(v ReferenceEntityBase) {
	o.Status = &v
}

// GetTransactionResults returns the TransactionResults field value if set, zero value otherwise.
func (o *Installment2) GetTransactionResults() []TransactionResult {
	if o == nil || isNil(o.TransactionResults) {
		var ret []TransactionResult
		return ret
	}
	return o.TransactionResults
}

// GetTransactionResultsOk returns a tuple with the TransactionResults field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Installment2) GetTransactionResultsOk() ([]TransactionResult, bool) {
	if o == nil || isNil(o.TransactionResults) {
    return nil, false
	}
	return o.TransactionResults, true
}

// HasTransactionResults returns a boolean if a field has been set.
func (o *Installment2) HasTransactionResults() bool {
	if o != nil && !isNil(o.TransactionResults) {
		return true
	}

	return false
}

// SetTransactionResults gets a reference to the given []TransactionResult and assigns it to the TransactionResults field.
func (o *Installment2) SetTransactionResults(v []TransactionResult) {
	o.TransactionResults = v
}

// GetCardDetails returns the CardDetails field value if set, zero value otherwise.
func (o *Installment2) GetCardDetails() CardData2 {
	if o == nil || isNil(o.CardDetails) {
		var ret CardData2
		return ret
	}
	return *o.CardDetails
}

// GetCardDetailsOk returns a tuple with the CardDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Installment2) GetCardDetailsOk() (*CardData2, bool) {
	if o == nil || isNil(o.CardDetails) {
    return nil, false
	}
	return o.CardDetails, true
}

// HasCardDetails returns a boolean if a field has been set.
func (o *Installment2) HasCardDetails() bool {
	if o != nil && !isNil(o.CardDetails) {
		return true
	}

	return false
}

// SetCardDetails gets a reference to the given CardData2 and assigns it to the CardDetails field.
func (o *Installment2) SetCardDetails(v CardData2) {
	o.CardDetails = &v
}

// GetResult returns the Result field value if set, zero value otherwise.
func (o *Installment2) GetResult() bool {
	if o == nil || isNil(o.Result) {
		var ret bool
		return ret
	}
	return *o.Result
}

// GetResultOk returns a tuple with the Result field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Installment2) GetResultOk() (*bool, bool) {
	if o == nil || isNil(o.Result) {
    return nil, false
	}
	return o.Result, true
}

// HasResult returns a boolean if a field has been set.
func (o *Installment2) HasResult() bool {
	if o != nil && !isNil(o.Result) {
		return true
	}

	return false
}

// SetResult gets a reference to the given bool and assigns it to the Result field.
func (o *Installment2) SetResult(v bool) {
	o.Result = &v
}

// GetPaymentMethod returns the PaymentMethod field value if set, zero value otherwise.
func (o *Installment2) GetPaymentMethod() string {
	if o == nil || isNil(o.PaymentMethod) {
		var ret string
		return ret
	}
	return *o.PaymentMethod
}

// GetPaymentMethodOk returns a tuple with the PaymentMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Installment2) GetPaymentMethodOk() (*string, bool) {
	if o == nil || isNil(o.PaymentMethod) {
    return nil, false
	}
	return o.PaymentMethod, true
}

// HasPaymentMethod returns a boolean if a field has been set.
func (o *Installment2) HasPaymentMethod() bool {
	if o != nil && !isNil(o.PaymentMethod) {
		return true
	}

	return false
}

// SetPaymentMethod gets a reference to the given string and assigns it to the PaymentMethod field.
func (o *Installment2) SetPaymentMethod(v string) {
	o.PaymentMethod = &v
}

func (o Installment2) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.InstallmentId) {
		toSerialize["InstallmentId"] = o.InstallmentId
	}
	if true {
		toSerialize["InstallmentNumber"] = o.InstallmentNumber
	}
	if !isNil(o.Amount) {
		toSerialize["Amount"] = o.Amount
	}
	if !isNil(o.OriginalAmount) {
		toSerialize["OriginalAmount"] = o.OriginalAmount
	}
	if !isNil(o.RefundAmount) {
		toSerialize["RefundAmount"] = o.RefundAmount
	}
	if !isNil(o.ProcessDateTime) {
		toSerialize["ProcessDateTime"] = o.ProcessDateTime
	}
	if true {
		toSerialize["IsRefund"] = o.IsRefund
	}
	if !isNil(o.RequiredCredit) {
		toSerialize["RequiredCredit"] = o.RequiredCredit
	}
	if true {
		toSerialize["CreatedDateTime"] = o.CreatedDateTime
	}
	if !isNil(o.Status) {
		toSerialize["Status"] = o.Status
	}
	if !isNil(o.TransactionResults) {
		toSerialize["TransactionResults"] = o.TransactionResults
	}
	if !isNil(o.CardDetails) {
		toSerialize["CardDetails"] = o.CardDetails
	}
	if !isNil(o.Result) {
		toSerialize["Result"] = o.Result
	}
	if !isNil(o.PaymentMethod) {
		toSerialize["PaymentMethod"] = o.PaymentMethod
	}
	return json.Marshal(toSerialize)
}

type NullableInstallment2 struct {
	value *Installment2
	isSet bool
}

func (v NullableInstallment2) Get() *Installment2 {
	return v.value
}

func (v *NullableInstallment2) Set(val *Installment2) {
	v.value = val
	v.isSet = true
}

func (v NullableInstallment2) IsSet() bool {
	return v.isSet
}

func (v *NullableInstallment2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstallment2(val *Installment2) *NullableInstallment2 {
	return &NullableInstallment2{value: val, isSet: true}
}

func (v NullableInstallment2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstallment2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


