/*
splitit-web-api-v3

Splitit's Web API

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package splitit

import (
	"encoding/json"
)

// Error2 struct for Error2
type Error2 struct {
	ErrorCode *string `json:"ErrorCode,omitempty"`
	Message *string `json:"Message,omitempty"`
	AdditionalInfo *string `json:"AdditionalInfo,omitempty"`
}

// NewError2 instantiates a new Error2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewError2() *Error2 {
	this := Error2{}
	return &this
}

// NewError2WithDefaults instantiates a new Error2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewError2WithDefaults() *Error2 {
	this := Error2{}
	return &this
}

// GetErrorCode returns the ErrorCode field value if set, zero value otherwise.
func (o *Error2) GetErrorCode() string {
	if o == nil || isNil(o.ErrorCode) {
		var ret string
		return ret
	}
	return *o.ErrorCode
}

// GetErrorCodeOk returns a tuple with the ErrorCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Error2) GetErrorCodeOk() (*string, bool) {
	if o == nil || isNil(o.ErrorCode) {
    return nil, false
	}
	return o.ErrorCode, true
}

// HasErrorCode returns a boolean if a field has been set.
func (o *Error2) HasErrorCode() bool {
	if o != nil && !isNil(o.ErrorCode) {
		return true
	}

	return false
}

// SetErrorCode gets a reference to the given string and assigns it to the ErrorCode field.
func (o *Error2) SetErrorCode(v string) {
	o.ErrorCode = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *Error2) GetMessage() string {
	if o == nil || isNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Error2) GetMessageOk() (*string, bool) {
	if o == nil || isNil(o.Message) {
    return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *Error2) HasMessage() bool {
	if o != nil && !isNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *Error2) SetMessage(v string) {
	o.Message = &v
}

// GetAdditionalInfo returns the AdditionalInfo field value if set, zero value otherwise.
func (o *Error2) GetAdditionalInfo() string {
	if o == nil || isNil(o.AdditionalInfo) {
		var ret string
		return ret
	}
	return *o.AdditionalInfo
}

// GetAdditionalInfoOk returns a tuple with the AdditionalInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Error2) GetAdditionalInfoOk() (*string, bool) {
	if o == nil || isNil(o.AdditionalInfo) {
    return nil, false
	}
	return o.AdditionalInfo, true
}

// HasAdditionalInfo returns a boolean if a field has been set.
func (o *Error2) HasAdditionalInfo() bool {
	if o != nil && !isNil(o.AdditionalInfo) {
		return true
	}

	return false
}

// SetAdditionalInfo gets a reference to the given string and assigns it to the AdditionalInfo field.
func (o *Error2) SetAdditionalInfo(v string) {
	o.AdditionalInfo = &v
}

func (o Error2) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.ErrorCode) {
		toSerialize["ErrorCode"] = o.ErrorCode
	}
	if !isNil(o.Message) {
		toSerialize["Message"] = o.Message
	}
	if !isNil(o.AdditionalInfo) {
		toSerialize["AdditionalInfo"] = o.AdditionalInfo
	}
	return json.Marshal(toSerialize)
}

type NullableError2 struct {
	value *Error2
	isSet bool
}

func (v NullableError2) Get() *Error2 {
	return v.value
}

func (v *NullableError2) Set(val *Error2) {
	v.value = val
	v.isSet = true
}

func (v NullableError2) IsSet() bool {
	return v.isSet
}

func (v *NullableError2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableError2(val *Error2) *NullableError2 {
	return &NullableError2{value: val, isSet: true}
}

func (v NullableError2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableError2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


