/*
splitit-web-api-v3

Splitit's API

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package splitit

import (
	"encoding/json"
)

// IdentifierContract struct for IdentifierContract
type IdentifierContract struct {
	RefOrderNumber *string `json:"RefOrderNumber,omitempty"`
	InstallmentPlanNumber *string `json:"InstallmentPlanNumber,omitempty"`
	ExtendedParams *map[string]string `json:"ExtendedParams,omitempty"`
}

// NewIdentifierContract instantiates a new IdentifierContract object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIdentifierContract() *IdentifierContract {
	this := IdentifierContract{}
	return &this
}

// NewIdentifierContractWithDefaults instantiates a new IdentifierContract object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIdentifierContractWithDefaults() *IdentifierContract {
	this := IdentifierContract{}
	return &this
}

// GetRefOrderNumber returns the RefOrderNumber field value if set, zero value otherwise.
func (o *IdentifierContract) GetRefOrderNumber() string {
	if o == nil || isNil(o.RefOrderNumber) {
		var ret string
		return ret
	}
	return *o.RefOrderNumber
}

// GetRefOrderNumberOk returns a tuple with the RefOrderNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentifierContract) GetRefOrderNumberOk() (*string, bool) {
	if o == nil || isNil(o.RefOrderNumber) {
    return nil, false
	}
	return o.RefOrderNumber, true
}

// HasRefOrderNumber returns a boolean if a field has been set.
func (o *IdentifierContract) HasRefOrderNumber() bool {
	if o != nil && !isNil(o.RefOrderNumber) {
		return true
	}

	return false
}

// SetRefOrderNumber gets a reference to the given string and assigns it to the RefOrderNumber field.
func (o *IdentifierContract) SetRefOrderNumber(v string) {
	o.RefOrderNumber = &v
}

// GetInstallmentPlanNumber returns the InstallmentPlanNumber field value if set, zero value otherwise.
func (o *IdentifierContract) GetInstallmentPlanNumber() string {
	if o == nil || isNil(o.InstallmentPlanNumber) {
		var ret string
		return ret
	}
	return *o.InstallmentPlanNumber
}

// GetInstallmentPlanNumberOk returns a tuple with the InstallmentPlanNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentifierContract) GetInstallmentPlanNumberOk() (*string, bool) {
	if o == nil || isNil(o.InstallmentPlanNumber) {
    return nil, false
	}
	return o.InstallmentPlanNumber, true
}

// HasInstallmentPlanNumber returns a boolean if a field has been set.
func (o *IdentifierContract) HasInstallmentPlanNumber() bool {
	if o != nil && !isNil(o.InstallmentPlanNumber) {
		return true
	}

	return false
}

// SetInstallmentPlanNumber gets a reference to the given string and assigns it to the InstallmentPlanNumber field.
func (o *IdentifierContract) SetInstallmentPlanNumber(v string) {
	o.InstallmentPlanNumber = &v
}

// GetExtendedParams returns the ExtendedParams field value if set, zero value otherwise.
func (o *IdentifierContract) GetExtendedParams() map[string]string {
	if o == nil || isNil(o.ExtendedParams) {
		var ret map[string]string
		return ret
	}
	return *o.ExtendedParams
}

// GetExtendedParamsOk returns a tuple with the ExtendedParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentifierContract) GetExtendedParamsOk() (*map[string]string, bool) {
	if o == nil || isNil(o.ExtendedParams) {
    return nil, false
	}
	return o.ExtendedParams, true
}

// HasExtendedParams returns a boolean if a field has been set.
func (o *IdentifierContract) HasExtendedParams() bool {
	if o != nil && !isNil(o.ExtendedParams) {
		return true
	}

	return false
}

// SetExtendedParams gets a reference to the given map[string]string and assigns it to the ExtendedParams field.
func (o *IdentifierContract) SetExtendedParams(v map[string]string) {
	o.ExtendedParams = &v
}

func (o IdentifierContract) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.RefOrderNumber) {
		toSerialize["RefOrderNumber"] = o.RefOrderNumber
	}
	if !isNil(o.InstallmentPlanNumber) {
		toSerialize["InstallmentPlanNumber"] = o.InstallmentPlanNumber
	}
	if !isNil(o.ExtendedParams) {
		toSerialize["ExtendedParams"] = o.ExtendedParams
	}
	return json.Marshal(toSerialize)
}

type NullableIdentifierContract struct {
	value *IdentifierContract
	isSet bool
}

func (v NullableIdentifierContract) Get() *IdentifierContract {
	return v.value
}

func (v *NullableIdentifierContract) Set(val *IdentifierContract) {
	v.value = val
	v.isSet = true
}

func (v NullableIdentifierContract) IsSet() bool {
	return v.isSet
}

func (v *NullableIdentifierContract) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdentifierContract(val *IdentifierContract) *NullableIdentifierContract {
	return &NullableIdentifierContract{value: val, isSet: true}
}

func (v NullableIdentifierContract) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdentifierContract) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


