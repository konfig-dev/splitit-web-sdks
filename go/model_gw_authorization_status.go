/*
splitit-web-api-v3

Splitit's Web API

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package splitit

import (
	"encoding/json"
	"fmt"
)

// GwAuthorizationStatus 
type GwAuthorizationStatus string

// List of GwAuthorizationStatus
const (
	GWAUTHORIZATIONSTATUS_NA GwAuthorizationStatus = "NA"
	GWAUTHORIZATIONSTATUS_SUCCEEDED GwAuthorizationStatus = "Succeeded"
	GWAUTHORIZATIONSTATUS_PENDING3_DS GwAuthorizationStatus = "Pending3DS"
	GWAUTHORIZATIONSTATUS_FAILED GwAuthorizationStatus = "Failed"
	GWAUTHORIZATIONSTATUS_CANCELED GwAuthorizationStatus = "Canceled"
	GWAUTHORIZATIONSTATUS_VOIDED GwAuthorizationStatus = "Voided"
)

// All allowed values of GwAuthorizationStatus enum
var AllowedGwAuthorizationStatusEnumValues = []GwAuthorizationStatus{
	"NA",
	"Succeeded",
	"Pending3DS",
	"Failed",
	"Canceled",
	"Voided",
}

func (v *GwAuthorizationStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := GwAuthorizationStatus(value)
	for _, existing := range AllowedGwAuthorizationStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid GwAuthorizationStatus", value)
}

// NewGwAuthorizationStatusFromValue returns a pointer to a valid GwAuthorizationStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewGwAuthorizationStatusFromValue(v string) (*GwAuthorizationStatus, error) {
	ev := GwAuthorizationStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for GwAuthorizationStatus: valid values are %v", v, AllowedGwAuthorizationStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v GwAuthorizationStatus) IsValid() bool {
	for _, existing := range AllowedGwAuthorizationStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to GwAuthorizationStatus value
func (v GwAuthorizationStatus) Ptr() *GwAuthorizationStatus {
	return &v
}

type NullableGwAuthorizationStatus struct {
	value *GwAuthorizationStatus
	isSet bool
}

func (v NullableGwAuthorizationStatus) Get() *GwAuthorizationStatus {
	return v.value
}

func (v *NullableGwAuthorizationStatus) Set(val *GwAuthorizationStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableGwAuthorizationStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableGwAuthorizationStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGwAuthorizationStatus(val *GwAuthorizationStatus) *NullableGwAuthorizationStatus {
	return &NullableGwAuthorizationStatus{value: val, isSet: true}
}

func (v NullableGwAuthorizationStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGwAuthorizationStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

