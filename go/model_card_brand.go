/*
splitit-web-api-v3

Splitit's Web API

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package splitit

import (
	"encoding/json"
	"fmt"
)

// CardBrand 
type CardBrand string

// List of CardBrand
const (
	CARDBRAND_MASTERCARD CardBrand = "Mastercard"
	CARDBRAND_VISA CardBrand = "Visa"
	CARDBRAND_AMERICAN_EXPRESS CardBrand = "AmericanExpress"
	CARDBRAND_MAESTRO CardBrand = "Maestro"
	CARDBRAND_JCB CardBrand = "JCB"
	CARDBRAND_CUP CardBrand = "CUP"
	CARDBRAND_UPI CardBrand = "UPI"
	CARDBRAND_DISCOVER CardBrand = "Discover"
	CARDBRAND_OTHER CardBrand = "Other"
)

// All allowed values of CardBrand enum
var AllowedCardBrandEnumValues = []CardBrand{
	"Mastercard",
	"Visa",
	"AmericanExpress",
	"Maestro",
	"JCB",
	"CUP",
	"UPI",
	"Discover",
	"Other",
}

func (v *CardBrand) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CardBrand(value)
	for _, existing := range AllowedCardBrandEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CardBrand", value)
}

// NewCardBrandFromValue returns a pointer to a valid CardBrand
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCardBrandFromValue(v string) (*CardBrand, error) {
	ev := CardBrand(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CardBrand: valid values are %v", v, AllowedCardBrandEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CardBrand) IsValid() bool {
	for _, existing := range AllowedCardBrandEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CardBrand value
func (v CardBrand) Ptr() *CardBrand {
	return &v
}

type NullableCardBrand struct {
	value *CardBrand
	isSet bool
}

func (v NullableCardBrand) Get() *CardBrand {
	return v.value
}

func (v *NullableCardBrand) Set(val *CardBrand) {
	v.value = val
	v.isSet = true
}

func (v NullableCardBrand) IsSet() bool {
	return v.isSet
}

func (v *NullableCardBrand) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCardBrand(val *CardBrand) *NullableCardBrand {
	return &NullableCardBrand{value: val, isSet: true}
}

func (v NullableCardBrand) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCardBrand) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

