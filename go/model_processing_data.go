/*
splitit-web-api-v3

Splitit's Web API

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package splitit

import (
	"encoding/json"
)

// ProcessingData struct for ProcessingData
type ProcessingData struct {
	AttemptThreeDSecured *bool `json:"AttemptThreeDSecured,omitempty"`
	SoftDescriptor *string `json:"SoftDescriptor,omitempty"`
	ThreeDSData *ThreeDSData `json:"ThreeDSData,omitempty"`
}

// NewProcessingData instantiates a new ProcessingData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProcessingData() *ProcessingData {
	this := ProcessingData{}
	return &this
}

// NewProcessingDataWithDefaults instantiates a new ProcessingData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProcessingDataWithDefaults() *ProcessingData {
	this := ProcessingData{}
	return &this
}

// GetAttemptThreeDSecured returns the AttemptThreeDSecured field value if set, zero value otherwise.
func (o *ProcessingData) GetAttemptThreeDSecured() bool {
	if o == nil || isNil(o.AttemptThreeDSecured) {
		var ret bool
		return ret
	}
	return *o.AttemptThreeDSecured
}

// GetAttemptThreeDSecuredOk returns a tuple with the AttemptThreeDSecured field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessingData) GetAttemptThreeDSecuredOk() (*bool, bool) {
	if o == nil || isNil(o.AttemptThreeDSecured) {
    return nil, false
	}
	return o.AttemptThreeDSecured, true
}

// HasAttemptThreeDSecured returns a boolean if a field has been set.
func (o *ProcessingData) HasAttemptThreeDSecured() bool {
	if o != nil && !isNil(o.AttemptThreeDSecured) {
		return true
	}

	return false
}

// SetAttemptThreeDSecured gets a reference to the given bool and assigns it to the AttemptThreeDSecured field.
func (o *ProcessingData) SetAttemptThreeDSecured(v bool) {
	o.AttemptThreeDSecured = &v
}

// GetSoftDescriptor returns the SoftDescriptor field value if set, zero value otherwise.
func (o *ProcessingData) GetSoftDescriptor() string {
	if o == nil || isNil(o.SoftDescriptor) {
		var ret string
		return ret
	}
	return *o.SoftDescriptor
}

// GetSoftDescriptorOk returns a tuple with the SoftDescriptor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessingData) GetSoftDescriptorOk() (*string, bool) {
	if o == nil || isNil(o.SoftDescriptor) {
    return nil, false
	}
	return o.SoftDescriptor, true
}

// HasSoftDescriptor returns a boolean if a field has been set.
func (o *ProcessingData) HasSoftDescriptor() bool {
	if o != nil && !isNil(o.SoftDescriptor) {
		return true
	}

	return false
}

// SetSoftDescriptor gets a reference to the given string and assigns it to the SoftDescriptor field.
func (o *ProcessingData) SetSoftDescriptor(v string) {
	o.SoftDescriptor = &v
}

// GetThreeDSData returns the ThreeDSData field value if set, zero value otherwise.
func (o *ProcessingData) GetThreeDSData() ThreeDSData {
	if o == nil || isNil(o.ThreeDSData) {
		var ret ThreeDSData
		return ret
	}
	return *o.ThreeDSData
}

// GetThreeDSDataOk returns a tuple with the ThreeDSData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessingData) GetThreeDSDataOk() (*ThreeDSData, bool) {
	if o == nil || isNil(o.ThreeDSData) {
    return nil, false
	}
	return o.ThreeDSData, true
}

// HasThreeDSData returns a boolean if a field has been set.
func (o *ProcessingData) HasThreeDSData() bool {
	if o != nil && !isNil(o.ThreeDSData) {
		return true
	}

	return false
}

// SetThreeDSData gets a reference to the given ThreeDSData and assigns it to the ThreeDSData field.
func (o *ProcessingData) SetThreeDSData(v ThreeDSData) {
	o.ThreeDSData = &v
}

func (o ProcessingData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.AttemptThreeDSecured) {
		toSerialize["AttemptThreeDSecured"] = o.AttemptThreeDSecured
	}
	if !isNil(o.SoftDescriptor) {
		toSerialize["SoftDescriptor"] = o.SoftDescriptor
	}
	if !isNil(o.ThreeDSData) {
		toSerialize["ThreeDSData"] = o.ThreeDSData
	}
	return json.Marshal(toSerialize)
}

type NullableProcessingData struct {
	value *ProcessingData
	isSet bool
}

func (v NullableProcessingData) Get() *ProcessingData {
	return v.value
}

func (v *NullableProcessingData) Set(val *ProcessingData) {
	v.value = val
	v.isSet = true
}

func (v NullableProcessingData) IsSet() bool {
	return v.isSet
}

func (v *NullableProcessingData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProcessingData(val *ProcessingData) *NullableProcessingData {
	return &NullableProcessingData{value: val, isSet: true}
}

func (v NullableProcessingData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProcessingData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


