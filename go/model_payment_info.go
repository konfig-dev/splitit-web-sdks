/*
splitit-web-api-v3

Splitit's Web API

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package splitit

import (
	"encoding/json"
)

// PaymentInfo struct for PaymentInfo
type PaymentInfo struct {
	CardBin *string `json:"CardBin,omitempty"`
	CardType *CardType `json:"CardType,omitempty"`
}

// NewPaymentInfo instantiates a new PaymentInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaymentInfo() *PaymentInfo {
	this := PaymentInfo{}
	return &this
}

// NewPaymentInfoWithDefaults instantiates a new PaymentInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaymentInfoWithDefaults() *PaymentInfo {
	this := PaymentInfo{}
	return &this
}

// GetCardBin returns the CardBin field value if set, zero value otherwise.
func (o *PaymentInfo) GetCardBin() string {
	if o == nil || isNil(o.CardBin) {
		var ret string
		return ret
	}
	return *o.CardBin
}

// GetCardBinOk returns a tuple with the CardBin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentInfo) GetCardBinOk() (*string, bool) {
	if o == nil || isNil(o.CardBin) {
    return nil, false
	}
	return o.CardBin, true
}

// HasCardBin returns a boolean if a field has been set.
func (o *PaymentInfo) HasCardBin() bool {
	if o != nil && !isNil(o.CardBin) {
		return true
	}

	return false
}

// SetCardBin gets a reference to the given string and assigns it to the CardBin field.
func (o *PaymentInfo) SetCardBin(v string) {
	o.CardBin = &v
}

// GetCardType returns the CardType field value if set, zero value otherwise.
func (o *PaymentInfo) GetCardType() CardType {
	if o == nil || isNil(o.CardType) {
		var ret CardType
		return ret
	}
	return *o.CardType
}

// GetCardTypeOk returns a tuple with the CardType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentInfo) GetCardTypeOk() (*CardType, bool) {
	if o == nil || isNil(o.CardType) {
    return nil, false
	}
	return o.CardType, true
}

// HasCardType returns a boolean if a field has been set.
func (o *PaymentInfo) HasCardType() bool {
	if o != nil && !isNil(o.CardType) {
		return true
	}

	return false
}

// SetCardType gets a reference to the given CardType and assigns it to the CardType field.
func (o *PaymentInfo) SetCardType(v CardType) {
	o.CardType = &v
}

func (o PaymentInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.CardBin) {
		toSerialize["CardBin"] = o.CardBin
	}
	if !isNil(o.CardType) {
		toSerialize["CardType"] = o.CardType
	}
	return json.Marshal(toSerialize)
}

type NullablePaymentInfo struct {
	value *PaymentInfo
	isSet bool
}

func (v NullablePaymentInfo) Get() *PaymentInfo {
	return v.value
}

func (v *NullablePaymentInfo) Set(val *PaymentInfo) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentInfo) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentInfo(val *PaymentInfo) *NullablePaymentInfo {
	return &NullablePaymentInfo{value: val, isSet: true}
}

func (v NullablePaymentInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


