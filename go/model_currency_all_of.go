/*
splitit-web-api-v3

Splitit's Web API

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package splitit

import (
	"encoding/json"
)

// CurrencyAllOf struct for CurrencyAllOf
type CurrencyAllOf struct {
	Symbol *string `json:"Symbol,omitempty"`
}

// NewCurrencyAllOf instantiates a new CurrencyAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCurrencyAllOf() *CurrencyAllOf {
	this := CurrencyAllOf{}
	return &this
}

// NewCurrencyAllOfWithDefaults instantiates a new CurrencyAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCurrencyAllOfWithDefaults() *CurrencyAllOf {
	this := CurrencyAllOf{}
	return &this
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *CurrencyAllOf) GetSymbol() string {
	if o == nil || isNil(o.Symbol) {
		var ret string
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CurrencyAllOf) GetSymbolOk() (*string, bool) {
	if o == nil || isNil(o.Symbol) {
    return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *CurrencyAllOf) HasSymbol() bool {
	if o != nil && !isNil(o.Symbol) {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given string and assigns it to the Symbol field.
func (o *CurrencyAllOf) SetSymbol(v string) {
	o.Symbol = &v
}

func (o CurrencyAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Symbol) {
		toSerialize["Symbol"] = o.Symbol
	}
	return json.Marshal(toSerialize)
}

type NullableCurrencyAllOf struct {
	value *CurrencyAllOf
	isSet bool
}

func (v NullableCurrencyAllOf) Get() *CurrencyAllOf {
	return v.value
}

func (v *NullableCurrencyAllOf) Set(val *CurrencyAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableCurrencyAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableCurrencyAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCurrencyAllOf(val *CurrencyAllOf) *NullableCurrencyAllOf {
	return &NullableCurrencyAllOf{value: val, isSet: true}
}

func (v NullableCurrencyAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCurrencyAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


