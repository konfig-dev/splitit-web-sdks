/*
splitit-web-api-v3

Splitit's Web API

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package splitit

import (
	"encoding/json"
)

// ThreeDSData struct for ThreeDSData
type ThreeDSData struct {
	ECI *string `json:"ECI,omitempty"`
	CAVV *string `json:"CAVV,omitempty"`
	XID *string `json:"XID,omitempty"`
	DirectoryServerTxnId *string `json:"DirectoryServerTxnId,omitempty"`
	ThreeDSVersion *string `json:"ThreeDSVersion,omitempty"`
	TransactionId *string `json:"TransactionId,omitempty"`
}

// NewThreeDSData instantiates a new ThreeDSData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewThreeDSData() *ThreeDSData {
	this := ThreeDSData{}
	return &this
}

// NewThreeDSDataWithDefaults instantiates a new ThreeDSData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewThreeDSDataWithDefaults() *ThreeDSData {
	this := ThreeDSData{}
	return &this
}

// GetECI returns the ECI field value if set, zero value otherwise.
func (o *ThreeDSData) GetECI() string {
	if o == nil || isNil(o.ECI) {
		var ret string
		return ret
	}
	return *o.ECI
}

// GetECIOk returns a tuple with the ECI field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThreeDSData) GetECIOk() (*string, bool) {
	if o == nil || isNil(o.ECI) {
    return nil, false
	}
	return o.ECI, true
}

// HasECI returns a boolean if a field has been set.
func (o *ThreeDSData) HasECI() bool {
	if o != nil && !isNil(o.ECI) {
		return true
	}

	return false
}

// SetECI gets a reference to the given string and assigns it to the ECI field.
func (o *ThreeDSData) SetECI(v string) {
	o.ECI = &v
}

// GetCAVV returns the CAVV field value if set, zero value otherwise.
func (o *ThreeDSData) GetCAVV() string {
	if o == nil || isNil(o.CAVV) {
		var ret string
		return ret
	}
	return *o.CAVV
}

// GetCAVVOk returns a tuple with the CAVV field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThreeDSData) GetCAVVOk() (*string, bool) {
	if o == nil || isNil(o.CAVV) {
    return nil, false
	}
	return o.CAVV, true
}

// HasCAVV returns a boolean if a field has been set.
func (o *ThreeDSData) HasCAVV() bool {
	if o != nil && !isNil(o.CAVV) {
		return true
	}

	return false
}

// SetCAVV gets a reference to the given string and assigns it to the CAVV field.
func (o *ThreeDSData) SetCAVV(v string) {
	o.CAVV = &v
}

// GetXID returns the XID field value if set, zero value otherwise.
func (o *ThreeDSData) GetXID() string {
	if o == nil || isNil(o.XID) {
		var ret string
		return ret
	}
	return *o.XID
}

// GetXIDOk returns a tuple with the XID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThreeDSData) GetXIDOk() (*string, bool) {
	if o == nil || isNil(o.XID) {
    return nil, false
	}
	return o.XID, true
}

// HasXID returns a boolean if a field has been set.
func (o *ThreeDSData) HasXID() bool {
	if o != nil && !isNil(o.XID) {
		return true
	}

	return false
}

// SetXID gets a reference to the given string and assigns it to the XID field.
func (o *ThreeDSData) SetXID(v string) {
	o.XID = &v
}

// GetDirectoryServerTxnId returns the DirectoryServerTxnId field value if set, zero value otherwise.
func (o *ThreeDSData) GetDirectoryServerTxnId() string {
	if o == nil || isNil(o.DirectoryServerTxnId) {
		var ret string
		return ret
	}
	return *o.DirectoryServerTxnId
}

// GetDirectoryServerTxnIdOk returns a tuple with the DirectoryServerTxnId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThreeDSData) GetDirectoryServerTxnIdOk() (*string, bool) {
	if o == nil || isNil(o.DirectoryServerTxnId) {
    return nil, false
	}
	return o.DirectoryServerTxnId, true
}

// HasDirectoryServerTxnId returns a boolean if a field has been set.
func (o *ThreeDSData) HasDirectoryServerTxnId() bool {
	if o != nil && !isNil(o.DirectoryServerTxnId) {
		return true
	}

	return false
}

// SetDirectoryServerTxnId gets a reference to the given string and assigns it to the DirectoryServerTxnId field.
func (o *ThreeDSData) SetDirectoryServerTxnId(v string) {
	o.DirectoryServerTxnId = &v
}

// GetThreeDSVersion returns the ThreeDSVersion field value if set, zero value otherwise.
func (o *ThreeDSData) GetThreeDSVersion() string {
	if o == nil || isNil(o.ThreeDSVersion) {
		var ret string
		return ret
	}
	return *o.ThreeDSVersion
}

// GetThreeDSVersionOk returns a tuple with the ThreeDSVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThreeDSData) GetThreeDSVersionOk() (*string, bool) {
	if o == nil || isNil(o.ThreeDSVersion) {
    return nil, false
	}
	return o.ThreeDSVersion, true
}

// HasThreeDSVersion returns a boolean if a field has been set.
func (o *ThreeDSData) HasThreeDSVersion() bool {
	if o != nil && !isNil(o.ThreeDSVersion) {
		return true
	}

	return false
}

// SetThreeDSVersion gets a reference to the given string and assigns it to the ThreeDSVersion field.
func (o *ThreeDSData) SetThreeDSVersion(v string) {
	o.ThreeDSVersion = &v
}

// GetTransactionId returns the TransactionId field value if set, zero value otherwise.
func (o *ThreeDSData) GetTransactionId() string {
	if o == nil || isNil(o.TransactionId) {
		var ret string
		return ret
	}
	return *o.TransactionId
}

// GetTransactionIdOk returns a tuple with the TransactionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThreeDSData) GetTransactionIdOk() (*string, bool) {
	if o == nil || isNil(o.TransactionId) {
    return nil, false
	}
	return o.TransactionId, true
}

// HasTransactionId returns a boolean if a field has been set.
func (o *ThreeDSData) HasTransactionId() bool {
	if o != nil && !isNil(o.TransactionId) {
		return true
	}

	return false
}

// SetTransactionId gets a reference to the given string and assigns it to the TransactionId field.
func (o *ThreeDSData) SetTransactionId(v string) {
	o.TransactionId = &v
}

func (o ThreeDSData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.ECI) {
		toSerialize["ECI"] = o.ECI
	}
	if !isNil(o.CAVV) {
		toSerialize["CAVV"] = o.CAVV
	}
	if !isNil(o.XID) {
		toSerialize["XID"] = o.XID
	}
	if !isNil(o.DirectoryServerTxnId) {
		toSerialize["DirectoryServerTxnId"] = o.DirectoryServerTxnId
	}
	if !isNil(o.ThreeDSVersion) {
		toSerialize["ThreeDSVersion"] = o.ThreeDSVersion
	}
	if !isNil(o.TransactionId) {
		toSerialize["TransactionId"] = o.TransactionId
	}
	return json.Marshal(toSerialize)
}

type NullableThreeDSData struct {
	value *ThreeDSData
	isSet bool
}

func (v NullableThreeDSData) Get() *ThreeDSData {
	return v.value
}

func (v *NullableThreeDSData) Set(val *ThreeDSData) {
	v.value = val
	v.isSet = true
}

func (v NullableThreeDSData) IsSet() bool {
	return v.isSet
}

func (v *NullableThreeDSData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableThreeDSData(val *ThreeDSData) *NullableThreeDSData {
	return &NullableThreeDSData{value: val, isSet: true}
}

func (v NullableThreeDSData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableThreeDSData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


