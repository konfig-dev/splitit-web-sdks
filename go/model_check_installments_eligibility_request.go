/*
splitit-web-api-v3

Splitit's Web API

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package splitit

import (
	"encoding/json"
)

// CheckInstallmentsEligibilityRequest struct for CheckInstallmentsEligibilityRequest
type CheckInstallmentsEligibilityRequest struct {
	PlanData *PlanData `json:"PlanData,omitempty"`
	CardDetails *CardData `json:"CardDetails,omitempty"`
	BillingAddress *AddressData `json:"BillingAddress,omitempty"`
}

// NewCheckInstallmentsEligibilityRequest instantiates a new CheckInstallmentsEligibilityRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCheckInstallmentsEligibilityRequest() *CheckInstallmentsEligibilityRequest {
	this := CheckInstallmentsEligibilityRequest{}
	return &this
}

// NewCheckInstallmentsEligibilityRequestWithDefaults instantiates a new CheckInstallmentsEligibilityRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCheckInstallmentsEligibilityRequestWithDefaults() *CheckInstallmentsEligibilityRequest {
	this := CheckInstallmentsEligibilityRequest{}
	return &this
}

// GetPlanData returns the PlanData field value if set, zero value otherwise.
func (o *CheckInstallmentsEligibilityRequest) GetPlanData() PlanData {
	if o == nil || isNil(o.PlanData) {
		var ret PlanData
		return ret
	}
	return *o.PlanData
}

// GetPlanDataOk returns a tuple with the PlanData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckInstallmentsEligibilityRequest) GetPlanDataOk() (*PlanData, bool) {
	if o == nil || isNil(o.PlanData) {
    return nil, false
	}
	return o.PlanData, true
}

// HasPlanData returns a boolean if a field has been set.
func (o *CheckInstallmentsEligibilityRequest) HasPlanData() bool {
	if o != nil && !isNil(o.PlanData) {
		return true
	}

	return false
}

// SetPlanData gets a reference to the given PlanData and assigns it to the PlanData field.
func (o *CheckInstallmentsEligibilityRequest) SetPlanData(v PlanData) {
	o.PlanData = &v
}

// GetCardDetails returns the CardDetails field value if set, zero value otherwise.
func (o *CheckInstallmentsEligibilityRequest) GetCardDetails() CardData {
	if o == nil || isNil(o.CardDetails) {
		var ret CardData
		return ret
	}
	return *o.CardDetails
}

// GetCardDetailsOk returns a tuple with the CardDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckInstallmentsEligibilityRequest) GetCardDetailsOk() (*CardData, bool) {
	if o == nil || isNil(o.CardDetails) {
    return nil, false
	}
	return o.CardDetails, true
}

// HasCardDetails returns a boolean if a field has been set.
func (o *CheckInstallmentsEligibilityRequest) HasCardDetails() bool {
	if o != nil && !isNil(o.CardDetails) {
		return true
	}

	return false
}

// SetCardDetails gets a reference to the given CardData and assigns it to the CardDetails field.
func (o *CheckInstallmentsEligibilityRequest) SetCardDetails(v CardData) {
	o.CardDetails = &v
}

// GetBillingAddress returns the BillingAddress field value if set, zero value otherwise.
func (o *CheckInstallmentsEligibilityRequest) GetBillingAddress() AddressData {
	if o == nil || isNil(o.BillingAddress) {
		var ret AddressData
		return ret
	}
	return *o.BillingAddress
}

// GetBillingAddressOk returns a tuple with the BillingAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckInstallmentsEligibilityRequest) GetBillingAddressOk() (*AddressData, bool) {
	if o == nil || isNil(o.BillingAddress) {
    return nil, false
	}
	return o.BillingAddress, true
}

// HasBillingAddress returns a boolean if a field has been set.
func (o *CheckInstallmentsEligibilityRequest) HasBillingAddress() bool {
	if o != nil && !isNil(o.BillingAddress) {
		return true
	}

	return false
}

// SetBillingAddress gets a reference to the given AddressData and assigns it to the BillingAddress field.
func (o *CheckInstallmentsEligibilityRequest) SetBillingAddress(v AddressData) {
	o.BillingAddress = &v
}

func (o CheckInstallmentsEligibilityRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.PlanData) {
		toSerialize["PlanData"] = o.PlanData
	}
	if !isNil(o.CardDetails) {
		toSerialize["CardDetails"] = o.CardDetails
	}
	if !isNil(o.BillingAddress) {
		toSerialize["BillingAddress"] = o.BillingAddress
	}
	return json.Marshal(toSerialize)
}

type NullableCheckInstallmentsEligibilityRequest struct {
	value *CheckInstallmentsEligibilityRequest
	isSet bool
}

func (v NullableCheckInstallmentsEligibilityRequest) Get() *CheckInstallmentsEligibilityRequest {
	return v.value
}

func (v *NullableCheckInstallmentsEligibilityRequest) Set(val *CheckInstallmentsEligibilityRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCheckInstallmentsEligibilityRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCheckInstallmentsEligibilityRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCheckInstallmentsEligibilityRequest(val *CheckInstallmentsEligibilityRequest) *NullableCheckInstallmentsEligibilityRequest {
	return &NullableCheckInstallmentsEligibilityRequest{value: val, isSet: true}
}

func (v NullableCheckInstallmentsEligibilityRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCheckInstallmentsEligibilityRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


