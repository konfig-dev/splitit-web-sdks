/*
splitit-web-api-v3

Splitit's Web API

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package splitit

import (
	"encoding/json"
)

// CardData2 struct for CardData2
type CardData2 struct {
	CardId *string `json:"CardId,omitempty"`
	CardNumber *string `json:"CardNumber,omitempty"`
	CardExpMonth *string `json:"CardExpMonth,omitempty"`
	CardExpYear *string `json:"CardExpYear,omitempty"`
	CardBrand *ReferenceEntityBase `json:"CardBrand,omitempty"`
	CardType *ReferenceEntityBase `json:"CardType,omitempty"`
	Bin *string `json:"Bin,omitempty"`
	CardHolderFullName *string `json:"CardHolderFullName,omitempty"`
	CardCvv *string `json:"CardCvv,omitempty"`
	Address *AddressData2 `json:"Address,omitempty"`
	Token *string `json:"Token,omitempty"`
}

// NewCardData2 instantiates a new CardData2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCardData2() *CardData2 {
	this := CardData2{}
	return &this
}

// NewCardData2WithDefaults instantiates a new CardData2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCardData2WithDefaults() *CardData2 {
	this := CardData2{}
	return &this
}

// GetCardId returns the CardId field value if set, zero value otherwise.
func (o *CardData2) GetCardId() string {
	if o == nil || isNil(o.CardId) {
		var ret string
		return ret
	}
	return *o.CardId
}

// GetCardIdOk returns a tuple with the CardId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CardData2) GetCardIdOk() (*string, bool) {
	if o == nil || isNil(o.CardId) {
    return nil, false
	}
	return o.CardId, true
}

// HasCardId returns a boolean if a field has been set.
func (o *CardData2) HasCardId() bool {
	if o != nil && !isNil(o.CardId) {
		return true
	}

	return false
}

// SetCardId gets a reference to the given string and assigns it to the CardId field.
func (o *CardData2) SetCardId(v string) {
	o.CardId = &v
}

// GetCardNumber returns the CardNumber field value if set, zero value otherwise.
func (o *CardData2) GetCardNumber() string {
	if o == nil || isNil(o.CardNumber) {
		var ret string
		return ret
	}
	return *o.CardNumber
}

// GetCardNumberOk returns a tuple with the CardNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CardData2) GetCardNumberOk() (*string, bool) {
	if o == nil || isNil(o.CardNumber) {
    return nil, false
	}
	return o.CardNumber, true
}

// HasCardNumber returns a boolean if a field has been set.
func (o *CardData2) HasCardNumber() bool {
	if o != nil && !isNil(o.CardNumber) {
		return true
	}

	return false
}

// SetCardNumber gets a reference to the given string and assigns it to the CardNumber field.
func (o *CardData2) SetCardNumber(v string) {
	o.CardNumber = &v
}

// GetCardExpMonth returns the CardExpMonth field value if set, zero value otherwise.
func (o *CardData2) GetCardExpMonth() string {
	if o == nil || isNil(o.CardExpMonth) {
		var ret string
		return ret
	}
	return *o.CardExpMonth
}

// GetCardExpMonthOk returns a tuple with the CardExpMonth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CardData2) GetCardExpMonthOk() (*string, bool) {
	if o == nil || isNil(o.CardExpMonth) {
    return nil, false
	}
	return o.CardExpMonth, true
}

// HasCardExpMonth returns a boolean if a field has been set.
func (o *CardData2) HasCardExpMonth() bool {
	if o != nil && !isNil(o.CardExpMonth) {
		return true
	}

	return false
}

// SetCardExpMonth gets a reference to the given string and assigns it to the CardExpMonth field.
func (o *CardData2) SetCardExpMonth(v string) {
	o.CardExpMonth = &v
}

// GetCardExpYear returns the CardExpYear field value if set, zero value otherwise.
func (o *CardData2) GetCardExpYear() string {
	if o == nil || isNil(o.CardExpYear) {
		var ret string
		return ret
	}
	return *o.CardExpYear
}

// GetCardExpYearOk returns a tuple with the CardExpYear field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CardData2) GetCardExpYearOk() (*string, bool) {
	if o == nil || isNil(o.CardExpYear) {
    return nil, false
	}
	return o.CardExpYear, true
}

// HasCardExpYear returns a boolean if a field has been set.
func (o *CardData2) HasCardExpYear() bool {
	if o != nil && !isNil(o.CardExpYear) {
		return true
	}

	return false
}

// SetCardExpYear gets a reference to the given string and assigns it to the CardExpYear field.
func (o *CardData2) SetCardExpYear(v string) {
	o.CardExpYear = &v
}

// GetCardBrand returns the CardBrand field value if set, zero value otherwise.
func (o *CardData2) GetCardBrand() ReferenceEntityBase {
	if o == nil || isNil(o.CardBrand) {
		var ret ReferenceEntityBase
		return ret
	}
	return *o.CardBrand
}

// GetCardBrandOk returns a tuple with the CardBrand field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CardData2) GetCardBrandOk() (*ReferenceEntityBase, bool) {
	if o == nil || isNil(o.CardBrand) {
    return nil, false
	}
	return o.CardBrand, true
}

// HasCardBrand returns a boolean if a field has been set.
func (o *CardData2) HasCardBrand() bool {
	if o != nil && !isNil(o.CardBrand) {
		return true
	}

	return false
}

// SetCardBrand gets a reference to the given ReferenceEntityBase and assigns it to the CardBrand field.
func (o *CardData2) SetCardBrand(v ReferenceEntityBase) {
	o.CardBrand = &v
}

// GetCardType returns the CardType field value if set, zero value otherwise.
func (o *CardData2) GetCardType() ReferenceEntityBase {
	if o == nil || isNil(o.CardType) {
		var ret ReferenceEntityBase
		return ret
	}
	return *o.CardType
}

// GetCardTypeOk returns a tuple with the CardType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CardData2) GetCardTypeOk() (*ReferenceEntityBase, bool) {
	if o == nil || isNil(o.CardType) {
    return nil, false
	}
	return o.CardType, true
}

// HasCardType returns a boolean if a field has been set.
func (o *CardData2) HasCardType() bool {
	if o != nil && !isNil(o.CardType) {
		return true
	}

	return false
}

// SetCardType gets a reference to the given ReferenceEntityBase and assigns it to the CardType field.
func (o *CardData2) SetCardType(v ReferenceEntityBase) {
	o.CardType = &v
}

// GetBin returns the Bin field value if set, zero value otherwise.
func (o *CardData2) GetBin() string {
	if o == nil || isNil(o.Bin) {
		var ret string
		return ret
	}
	return *o.Bin
}

// GetBinOk returns a tuple with the Bin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CardData2) GetBinOk() (*string, bool) {
	if o == nil || isNil(o.Bin) {
    return nil, false
	}
	return o.Bin, true
}

// HasBin returns a boolean if a field has been set.
func (o *CardData2) HasBin() bool {
	if o != nil && !isNil(o.Bin) {
		return true
	}

	return false
}

// SetBin gets a reference to the given string and assigns it to the Bin field.
func (o *CardData2) SetBin(v string) {
	o.Bin = &v
}

// GetCardHolderFullName returns the CardHolderFullName field value if set, zero value otherwise.
func (o *CardData2) GetCardHolderFullName() string {
	if o == nil || isNil(o.CardHolderFullName) {
		var ret string
		return ret
	}
	return *o.CardHolderFullName
}

// GetCardHolderFullNameOk returns a tuple with the CardHolderFullName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CardData2) GetCardHolderFullNameOk() (*string, bool) {
	if o == nil || isNil(o.CardHolderFullName) {
    return nil, false
	}
	return o.CardHolderFullName, true
}

// HasCardHolderFullName returns a boolean if a field has been set.
func (o *CardData2) HasCardHolderFullName() bool {
	if o != nil && !isNil(o.CardHolderFullName) {
		return true
	}

	return false
}

// SetCardHolderFullName gets a reference to the given string and assigns it to the CardHolderFullName field.
func (o *CardData2) SetCardHolderFullName(v string) {
	o.CardHolderFullName = &v
}

// GetCardCvv returns the CardCvv field value if set, zero value otherwise.
func (o *CardData2) GetCardCvv() string {
	if o == nil || isNil(o.CardCvv) {
		var ret string
		return ret
	}
	return *o.CardCvv
}

// GetCardCvvOk returns a tuple with the CardCvv field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CardData2) GetCardCvvOk() (*string, bool) {
	if o == nil || isNil(o.CardCvv) {
    return nil, false
	}
	return o.CardCvv, true
}

// HasCardCvv returns a boolean if a field has been set.
func (o *CardData2) HasCardCvv() bool {
	if o != nil && !isNil(o.CardCvv) {
		return true
	}

	return false
}

// SetCardCvv gets a reference to the given string and assigns it to the CardCvv field.
func (o *CardData2) SetCardCvv(v string) {
	o.CardCvv = &v
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *CardData2) GetAddress() AddressData2 {
	if o == nil || isNil(o.Address) {
		var ret AddressData2
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CardData2) GetAddressOk() (*AddressData2, bool) {
	if o == nil || isNil(o.Address) {
    return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *CardData2) HasAddress() bool {
	if o != nil && !isNil(o.Address) {
		return true
	}

	return false
}

// SetAddress gets a reference to the given AddressData2 and assigns it to the Address field.
func (o *CardData2) SetAddress(v AddressData2) {
	o.Address = &v
}

// GetToken returns the Token field value if set, zero value otherwise.
func (o *CardData2) GetToken() string {
	if o == nil || isNil(o.Token) {
		var ret string
		return ret
	}
	return *o.Token
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CardData2) GetTokenOk() (*string, bool) {
	if o == nil || isNil(o.Token) {
    return nil, false
	}
	return o.Token, true
}

// HasToken returns a boolean if a field has been set.
func (o *CardData2) HasToken() bool {
	if o != nil && !isNil(o.Token) {
		return true
	}

	return false
}

// SetToken gets a reference to the given string and assigns it to the Token field.
func (o *CardData2) SetToken(v string) {
	o.Token = &v
}

func (o CardData2) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.CardId) {
		toSerialize["CardId"] = o.CardId
	}
	if !isNil(o.CardNumber) {
		toSerialize["CardNumber"] = o.CardNumber
	}
	if !isNil(o.CardExpMonth) {
		toSerialize["CardExpMonth"] = o.CardExpMonth
	}
	if !isNil(o.CardExpYear) {
		toSerialize["CardExpYear"] = o.CardExpYear
	}
	if !isNil(o.CardBrand) {
		toSerialize["CardBrand"] = o.CardBrand
	}
	if !isNil(o.CardType) {
		toSerialize["CardType"] = o.CardType
	}
	if !isNil(o.Bin) {
		toSerialize["Bin"] = o.Bin
	}
	if !isNil(o.CardHolderFullName) {
		toSerialize["CardHolderFullName"] = o.CardHolderFullName
	}
	if !isNil(o.CardCvv) {
		toSerialize["CardCvv"] = o.CardCvv
	}
	if !isNil(o.Address) {
		toSerialize["Address"] = o.Address
	}
	if !isNil(o.Token) {
		toSerialize["Token"] = o.Token
	}
	return json.Marshal(toSerialize)
}

type NullableCardData2 struct {
	value *CardData2
	isSet bool
}

func (v NullableCardData2) Get() *CardData2 {
	return v.value
}

func (v *NullableCardData2) Set(val *CardData2) {
	v.value = val
	v.isSet = true
}

func (v NullableCardData2) IsSet() bool {
	return v.isSet
}

func (v *NullableCardData2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCardData2(val *CardData2) *NullableCardData2 {
	return &NullableCardData2{value: val, isSet: true}
}

func (v NullableCardData2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCardData2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


