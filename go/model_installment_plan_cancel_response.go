/*
splitit-web-api-v3

Splitit's Web API

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package splitit

import (
	"encoding/json"
)

// InstallmentPlanCancelResponse struct for InstallmentPlanCancelResponse
type InstallmentPlanCancelResponse struct {
	InstallmentPlanNumber *string `json:"InstallmentPlanNumber,omitempty"`
}

// NewInstallmentPlanCancelResponse instantiates a new InstallmentPlanCancelResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstallmentPlanCancelResponse() *InstallmentPlanCancelResponse {
	this := InstallmentPlanCancelResponse{}
	return &this
}

// NewInstallmentPlanCancelResponseWithDefaults instantiates a new InstallmentPlanCancelResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstallmentPlanCancelResponseWithDefaults() *InstallmentPlanCancelResponse {
	this := InstallmentPlanCancelResponse{}
	return &this
}

// GetInstallmentPlanNumber returns the InstallmentPlanNumber field value if set, zero value otherwise.
func (o *InstallmentPlanCancelResponse) GetInstallmentPlanNumber() string {
	if o == nil || isNil(o.InstallmentPlanNumber) {
		var ret string
		return ret
	}
	return *o.InstallmentPlanNumber
}

// GetInstallmentPlanNumberOk returns a tuple with the InstallmentPlanNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstallmentPlanCancelResponse) GetInstallmentPlanNumberOk() (*string, bool) {
	if o == nil || isNil(o.InstallmentPlanNumber) {
    return nil, false
	}
	return o.InstallmentPlanNumber, true
}

// HasInstallmentPlanNumber returns a boolean if a field has been set.
func (o *InstallmentPlanCancelResponse) HasInstallmentPlanNumber() bool {
	if o != nil && !isNil(o.InstallmentPlanNumber) {
		return true
	}

	return false
}

// SetInstallmentPlanNumber gets a reference to the given string and assigns it to the InstallmentPlanNumber field.
func (o *InstallmentPlanCancelResponse) SetInstallmentPlanNumber(v string) {
	o.InstallmentPlanNumber = &v
}

func (o InstallmentPlanCancelResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.InstallmentPlanNumber) {
		toSerialize["InstallmentPlanNumber"] = o.InstallmentPlanNumber
	}
	return json.Marshal(toSerialize)
}

type NullableInstallmentPlanCancelResponse struct {
	value *InstallmentPlanCancelResponse
	isSet bool
}

func (v NullableInstallmentPlanCancelResponse) Get() *InstallmentPlanCancelResponse {
	return v.value
}

func (v *NullableInstallmentPlanCancelResponse) Set(val *InstallmentPlanCancelResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableInstallmentPlanCancelResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableInstallmentPlanCancelResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstallmentPlanCancelResponse(val *InstallmentPlanCancelResponse) *NullableInstallmentPlanCancelResponse {
	return &NullableInstallmentPlanCancelResponse{value: val, isSet: true}
}

func (v NullableInstallmentPlanCancelResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstallmentPlanCancelResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


