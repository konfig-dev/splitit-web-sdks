/*
splitit-web-api-v3

Splitit's Web API

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package splitit

import (
	"encoding/json"
	"fmt"
)

// InstallmentStatus 
type InstallmentStatus string

// List of InstallmentStatus
const (
	INSTALLMENTSTATUS_PENDING InstallmentStatus = "Pending"
	INSTALLMENTSTATUS_PROCESSED InstallmentStatus = "Processed"
	INSTALLMENTSTATUS_CANCELED InstallmentStatus = "Canceled"
)

// All allowed values of InstallmentStatus enum
var AllowedInstallmentStatusEnumValues = []InstallmentStatus{
	"Pending",
	"Processed",
	"Canceled",
}

func (v *InstallmentStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := InstallmentStatus(value)
	for _, existing := range AllowedInstallmentStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid InstallmentStatus", value)
}

// NewInstallmentStatusFromValue returns a pointer to a valid InstallmentStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewInstallmentStatusFromValue(v string) (*InstallmentStatus, error) {
	ev := InstallmentStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for InstallmentStatus: valid values are %v", v, AllowedInstallmentStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v InstallmentStatus) IsValid() bool {
	for _, existing := range AllowedInstallmentStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to InstallmentStatus value
func (v InstallmentStatus) Ptr() *InstallmentStatus {
	return &v
}

type NullableInstallmentStatus struct {
	value *InstallmentStatus
	isSet bool
}

func (v NullableInstallmentStatus) Get() *InstallmentStatus {
	return v.value
}

func (v *NullableInstallmentStatus) Set(val *InstallmentStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableInstallmentStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableInstallmentStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstallmentStatus(val *InstallmentStatus) *NullableInstallmentStatus {
	return &NullableInstallmentStatus{value: val, isSet: true}
}

func (v NullableInstallmentStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstallmentStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

