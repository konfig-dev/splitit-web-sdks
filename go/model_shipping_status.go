/*
splitit-web-api-v3

Splitit's Web API

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package splitit

import (
	"encoding/json"
	"fmt"
)

// ShippingStatus 
type ShippingStatus string

// List of ShippingStatus
const (
	SHIPPINGSTATUS_PENDING ShippingStatus = "Pending"
	SHIPPINGSTATUS_SHIPPED ShippingStatus = "Shipped"
	SHIPPINGSTATUS_DELIVERED ShippingStatus = "Delivered"
)

// All allowed values of ShippingStatus enum
var AllowedShippingStatusEnumValues = []ShippingStatus{
	"Pending",
	"Shipped",
	"Delivered",
}

func (v *ShippingStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ShippingStatus(value)
	for _, existing := range AllowedShippingStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ShippingStatus", value)
}

// NewShippingStatusFromValue returns a pointer to a valid ShippingStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewShippingStatusFromValue(v string) (*ShippingStatus, error) {
	ev := ShippingStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ShippingStatus: valid values are %v", v, AllowedShippingStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ShippingStatus) IsValid() bool {
	for _, existing := range AllowedShippingStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ShippingStatus value
func (v ShippingStatus) Ptr() *ShippingStatus {
	return &v
}

type NullableShippingStatus struct {
	value *ShippingStatus
	isSet bool
}

func (v NullableShippingStatus) Get() *ShippingStatus {
	return v.value
}

func (v *NullableShippingStatus) Set(val *ShippingStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableShippingStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableShippingStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableShippingStatus(val *ShippingStatus) *NullableShippingStatus {
	return &NullableShippingStatus{value: val, isSet: true}
}

func (v NullableShippingStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableShippingStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

