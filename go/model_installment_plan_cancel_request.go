/*
splitit-web-api-v3

Splitit's Web API

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package splitit

import (
	"encoding/json"
)

// InstallmentPlanCancelRequest struct for InstallmentPlanCancelRequest
type InstallmentPlanCancelRequest struct {
	ReferenceId *string `json:"ReferenceId,omitempty"`
}

// NewInstallmentPlanCancelRequest instantiates a new InstallmentPlanCancelRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstallmentPlanCancelRequest() *InstallmentPlanCancelRequest {
	this := InstallmentPlanCancelRequest{}
	return &this
}

// NewInstallmentPlanCancelRequestWithDefaults instantiates a new InstallmentPlanCancelRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstallmentPlanCancelRequestWithDefaults() *InstallmentPlanCancelRequest {
	this := InstallmentPlanCancelRequest{}
	return &this
}

// GetReferenceId returns the ReferenceId field value if set, zero value otherwise.
func (o *InstallmentPlanCancelRequest) GetReferenceId() string {
	if o == nil || isNil(o.ReferenceId) {
		var ret string
		return ret
	}
	return *o.ReferenceId
}

// GetReferenceIdOk returns a tuple with the ReferenceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstallmentPlanCancelRequest) GetReferenceIdOk() (*string, bool) {
	if o == nil || isNil(o.ReferenceId) {
    return nil, false
	}
	return o.ReferenceId, true
}

// HasReferenceId returns a boolean if a field has been set.
func (o *InstallmentPlanCancelRequest) HasReferenceId() bool {
	if o != nil && !isNil(o.ReferenceId) {
		return true
	}

	return false
}

// SetReferenceId gets a reference to the given string and assigns it to the ReferenceId field.
func (o *InstallmentPlanCancelRequest) SetReferenceId(v string) {
	o.ReferenceId = &v
}

func (o InstallmentPlanCancelRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.ReferenceId) {
		toSerialize["ReferenceId"] = o.ReferenceId
	}
	return json.Marshal(toSerialize)
}

type NullableInstallmentPlanCancelRequest struct {
	value *InstallmentPlanCancelRequest
	isSet bool
}

func (v NullableInstallmentPlanCancelRequest) Get() *InstallmentPlanCancelRequest {
	return v.value
}

func (v *NullableInstallmentPlanCancelRequest) Set(val *InstallmentPlanCancelRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableInstallmentPlanCancelRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableInstallmentPlanCancelRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstallmentPlanCancelRequest(val *InstallmentPlanCancelRequest) *NullableInstallmentPlanCancelRequest {
	return &NullableInstallmentPlanCancelRequest{value: val, isSet: true}
}

func (v NullableInstallmentPlanCancelRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstallmentPlanCancelRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


