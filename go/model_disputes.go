/*
splitit-web-api-v3

Splitit's Web API

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package splitit

import (
	"encoding/json"
	"time"
)

// Disputes struct for Disputes
type Disputes struct {
	InDispute *bool `json:"InDispute,omitempty"`
	EvidenceProvidedOn *time.Time `json:"EvidenceProvidedOn,omitempty"`
}

// NewDisputes instantiates a new Disputes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDisputes() *Disputes {
	this := Disputes{}
	return &this
}

// NewDisputesWithDefaults instantiates a new Disputes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDisputesWithDefaults() *Disputes {
	this := Disputes{}
	return &this
}

// GetInDispute returns the InDispute field value if set, zero value otherwise.
func (o *Disputes) GetInDispute() bool {
	if o == nil || isNil(o.InDispute) {
		var ret bool
		return ret
	}
	return *o.InDispute
}

// GetInDisputeOk returns a tuple with the InDispute field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Disputes) GetInDisputeOk() (*bool, bool) {
	if o == nil || isNil(o.InDispute) {
    return nil, false
	}
	return o.InDispute, true
}

// HasInDispute returns a boolean if a field has been set.
func (o *Disputes) HasInDispute() bool {
	if o != nil && !isNil(o.InDispute) {
		return true
	}

	return false
}

// SetInDispute gets a reference to the given bool and assigns it to the InDispute field.
func (o *Disputes) SetInDispute(v bool) {
	o.InDispute = &v
}

// GetEvidenceProvidedOn returns the EvidenceProvidedOn field value if set, zero value otherwise.
func (o *Disputes) GetEvidenceProvidedOn() time.Time {
	if o == nil || isNil(o.EvidenceProvidedOn) {
		var ret time.Time
		return ret
	}
	return *o.EvidenceProvidedOn
}

// GetEvidenceProvidedOnOk returns a tuple with the EvidenceProvidedOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Disputes) GetEvidenceProvidedOnOk() (*time.Time, bool) {
	if o == nil || isNil(o.EvidenceProvidedOn) {
    return nil, false
	}
	return o.EvidenceProvidedOn, true
}

// HasEvidenceProvidedOn returns a boolean if a field has been set.
func (o *Disputes) HasEvidenceProvidedOn() bool {
	if o != nil && !isNil(o.EvidenceProvidedOn) {
		return true
	}

	return false
}

// SetEvidenceProvidedOn gets a reference to the given time.Time and assigns it to the EvidenceProvidedOn field.
func (o *Disputes) SetEvidenceProvidedOn(v time.Time) {
	o.EvidenceProvidedOn = &v
}

func (o Disputes) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.InDispute) {
		toSerialize["InDispute"] = o.InDispute
	}
	if !isNil(o.EvidenceProvidedOn) {
		toSerialize["EvidenceProvidedOn"] = o.EvidenceProvidedOn
	}
	return json.Marshal(toSerialize)
}

type NullableDisputes struct {
	value *Disputes
	isSet bool
}

func (v NullableDisputes) Get() *Disputes {
	return v.value
}

func (v *NullableDisputes) Set(val *Disputes) {
	v.value = val
	v.isSet = true
}

func (v NullableDisputes) IsSet() bool {
	return v.isSet
}

func (v *NullableDisputes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDisputes(val *Disputes) *NullableDisputes {
	return &NullableDisputes{value: val, isSet: true}
}

func (v NullableDisputes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDisputes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


