/*
splitit-web-api-v3

Splitit's API

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package splitit

import (
	"encoding/json"
)

// ShopperData struct for ShopperData
type ShopperData struct {
	FullName *string `json:"FullName,omitempty"`
	Email *string `json:"Email,omitempty"`
	PhoneNumber *string `json:"PhoneNumber,omitempty"`
	Culture *string `json:"Culture,omitempty"`
}

// NewShopperData instantiates a new ShopperData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewShopperData() *ShopperData {
	this := ShopperData{}
	return &this
}

// NewShopperDataWithDefaults instantiates a new ShopperData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewShopperDataWithDefaults() *ShopperData {
	this := ShopperData{}
	return &this
}

// GetFullName returns the FullName field value if set, zero value otherwise.
func (o *ShopperData) GetFullName() string {
	if o == nil || isNil(o.FullName) {
		var ret string
		return ret
	}
	return *o.FullName
}

// GetFullNameOk returns a tuple with the FullName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShopperData) GetFullNameOk() (*string, bool) {
	if o == nil || isNil(o.FullName) {
    return nil, false
	}
	return o.FullName, true
}

// HasFullName returns a boolean if a field has been set.
func (o *ShopperData) HasFullName() bool {
	if o != nil && !isNil(o.FullName) {
		return true
	}

	return false
}

// SetFullName gets a reference to the given string and assigns it to the FullName field.
func (o *ShopperData) SetFullName(v string) {
	o.FullName = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *ShopperData) GetEmail() string {
	if o == nil || isNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShopperData) GetEmailOk() (*string, bool) {
	if o == nil || isNil(o.Email) {
    return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *ShopperData) HasEmail() bool {
	if o != nil && !isNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *ShopperData) SetEmail(v string) {
	o.Email = &v
}

// GetPhoneNumber returns the PhoneNumber field value if set, zero value otherwise.
func (o *ShopperData) GetPhoneNumber() string {
	if o == nil || isNil(o.PhoneNumber) {
		var ret string
		return ret
	}
	return *o.PhoneNumber
}

// GetPhoneNumberOk returns a tuple with the PhoneNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShopperData) GetPhoneNumberOk() (*string, bool) {
	if o == nil || isNil(o.PhoneNumber) {
    return nil, false
	}
	return o.PhoneNumber, true
}

// HasPhoneNumber returns a boolean if a field has been set.
func (o *ShopperData) HasPhoneNumber() bool {
	if o != nil && !isNil(o.PhoneNumber) {
		return true
	}

	return false
}

// SetPhoneNumber gets a reference to the given string and assigns it to the PhoneNumber field.
func (o *ShopperData) SetPhoneNumber(v string) {
	o.PhoneNumber = &v
}

// GetCulture returns the Culture field value if set, zero value otherwise.
func (o *ShopperData) GetCulture() string {
	if o == nil || isNil(o.Culture) {
		var ret string
		return ret
	}
	return *o.Culture
}

// GetCultureOk returns a tuple with the Culture field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShopperData) GetCultureOk() (*string, bool) {
	if o == nil || isNil(o.Culture) {
    return nil, false
	}
	return o.Culture, true
}

// HasCulture returns a boolean if a field has been set.
func (o *ShopperData) HasCulture() bool {
	if o != nil && !isNil(o.Culture) {
		return true
	}

	return false
}

// SetCulture gets a reference to the given string and assigns it to the Culture field.
func (o *ShopperData) SetCulture(v string) {
	o.Culture = &v
}

func (o ShopperData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.FullName) {
		toSerialize["FullName"] = o.FullName
	}
	if !isNil(o.Email) {
		toSerialize["Email"] = o.Email
	}
	if !isNil(o.PhoneNumber) {
		toSerialize["PhoneNumber"] = o.PhoneNumber
	}
	if !isNil(o.Culture) {
		toSerialize["Culture"] = o.Culture
	}
	return json.Marshal(toSerialize)
}

type NullableShopperData struct {
	value *ShopperData
	isSet bool
}

func (v NullableShopperData) Get() *ShopperData {
	return v.value
}

func (v *NullableShopperData) Set(val *ShopperData) {
	v.value = val
	v.isSet = true
}

func (v NullableShopperData) IsSet() bool {
	return v.isSet
}

func (v *NullableShopperData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableShopperData(val *ShopperData) *NullableShopperData {
	return &NullableShopperData{value: val, isSet: true}
}

func (v NullableShopperData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableShopperData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


