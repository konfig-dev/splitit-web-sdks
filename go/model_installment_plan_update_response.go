/*
splitit-web-api-v3

Splitit's Web API

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package splitit

import (
	"encoding/json"
)

// InstallmentPlanUpdateResponse struct for InstallmentPlanUpdateResponse
type InstallmentPlanUpdateResponse struct {
	RefOrderNumber *string `json:"RefOrderNumber,omitempty"`
	InstallmentPlanNumber *string `json:"InstallmentPlanNumber,omitempty"`
	Status PlanStatus `json:"Status"`
	ShippingStatus ShippingStatus `json:"ShippingStatus"`
}

// NewInstallmentPlanUpdateResponse instantiates a new InstallmentPlanUpdateResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstallmentPlanUpdateResponse(status PlanStatus, shippingStatus ShippingStatus) *InstallmentPlanUpdateResponse {
	this := InstallmentPlanUpdateResponse{}
	this.Status = status
	this.ShippingStatus = shippingStatus
	return &this
}

// NewInstallmentPlanUpdateResponseWithDefaults instantiates a new InstallmentPlanUpdateResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstallmentPlanUpdateResponseWithDefaults() *InstallmentPlanUpdateResponse {
	this := InstallmentPlanUpdateResponse{}
	return &this
}

// GetRefOrderNumber returns the RefOrderNumber field value if set, zero value otherwise.
func (o *InstallmentPlanUpdateResponse) GetRefOrderNumber() string {
	if o == nil || isNil(o.RefOrderNumber) {
		var ret string
		return ret
	}
	return *o.RefOrderNumber
}

// GetRefOrderNumberOk returns a tuple with the RefOrderNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstallmentPlanUpdateResponse) GetRefOrderNumberOk() (*string, bool) {
	if o == nil || isNil(o.RefOrderNumber) {
    return nil, false
	}
	return o.RefOrderNumber, true
}

// HasRefOrderNumber returns a boolean if a field has been set.
func (o *InstallmentPlanUpdateResponse) HasRefOrderNumber() bool {
	if o != nil && !isNil(o.RefOrderNumber) {
		return true
	}

	return false
}

// SetRefOrderNumber gets a reference to the given string and assigns it to the RefOrderNumber field.
func (o *InstallmentPlanUpdateResponse) SetRefOrderNumber(v string) {
	o.RefOrderNumber = &v
}

// GetInstallmentPlanNumber returns the InstallmentPlanNumber field value if set, zero value otherwise.
func (o *InstallmentPlanUpdateResponse) GetInstallmentPlanNumber() string {
	if o == nil || isNil(o.InstallmentPlanNumber) {
		var ret string
		return ret
	}
	return *o.InstallmentPlanNumber
}

// GetInstallmentPlanNumberOk returns a tuple with the InstallmentPlanNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstallmentPlanUpdateResponse) GetInstallmentPlanNumberOk() (*string, bool) {
	if o == nil || isNil(o.InstallmentPlanNumber) {
    return nil, false
	}
	return o.InstallmentPlanNumber, true
}

// HasInstallmentPlanNumber returns a boolean if a field has been set.
func (o *InstallmentPlanUpdateResponse) HasInstallmentPlanNumber() bool {
	if o != nil && !isNil(o.InstallmentPlanNumber) {
		return true
	}

	return false
}

// SetInstallmentPlanNumber gets a reference to the given string and assigns it to the InstallmentPlanNumber field.
func (o *InstallmentPlanUpdateResponse) SetInstallmentPlanNumber(v string) {
	o.InstallmentPlanNumber = &v
}

// GetStatus returns the Status field value
func (o *InstallmentPlanUpdateResponse) GetStatus() PlanStatus {
	if o == nil {
		var ret PlanStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *InstallmentPlanUpdateResponse) GetStatusOk() (*PlanStatus, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *InstallmentPlanUpdateResponse) SetStatus(v PlanStatus) {
	o.Status = v
}

// GetShippingStatus returns the ShippingStatus field value
func (o *InstallmentPlanUpdateResponse) GetShippingStatus() ShippingStatus {
	if o == nil {
		var ret ShippingStatus
		return ret
	}

	return o.ShippingStatus
}

// GetShippingStatusOk returns a tuple with the ShippingStatus field value
// and a boolean to check if the value has been set.
func (o *InstallmentPlanUpdateResponse) GetShippingStatusOk() (*ShippingStatus, bool) {
	if o == nil {
    return nil, false
	}
	return &o.ShippingStatus, true
}

// SetShippingStatus sets field value
func (o *InstallmentPlanUpdateResponse) SetShippingStatus(v ShippingStatus) {
	o.ShippingStatus = v
}

func (o InstallmentPlanUpdateResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.RefOrderNumber) {
		toSerialize["RefOrderNumber"] = o.RefOrderNumber
	}
	if !isNil(o.InstallmentPlanNumber) {
		toSerialize["InstallmentPlanNumber"] = o.InstallmentPlanNumber
	}
	if true {
		toSerialize["Status"] = o.Status
	}
	if true {
		toSerialize["ShippingStatus"] = o.ShippingStatus
	}
	return json.Marshal(toSerialize)
}

type NullableInstallmentPlanUpdateResponse struct {
	value *InstallmentPlanUpdateResponse
	isSet bool
}

func (v NullableInstallmentPlanUpdateResponse) Get() *InstallmentPlanUpdateResponse {
	return v.value
}

func (v *NullableInstallmentPlanUpdateResponse) Set(val *InstallmentPlanUpdateResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableInstallmentPlanUpdateResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableInstallmentPlanUpdateResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstallmentPlanUpdateResponse(val *InstallmentPlanUpdateResponse) *NullableInstallmentPlanUpdateResponse {
	return &NullableInstallmentPlanUpdateResponse{value: val, isSet: true}
}

func (v NullableInstallmentPlanUpdateResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstallmentPlanUpdateResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


