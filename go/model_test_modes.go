/*
splitit-web-api-v3

Splitit's Web API

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package splitit

import (
	"encoding/json"
	"fmt"
)

// TestModes 
type TestModes string

// List of TestModes
const (
	TESTMODES_NONE TestModes = "None"
	TESTMODES_REGULAR TestModes = "Regular"
	TESTMODES_FAST TestModes = "Fast"
	TESTMODES_AUTOMATION TestModes = "Automation"
)

// All allowed values of TestModes enum
var AllowedTestModesEnumValues = []TestModes{
	"None",
	"Regular",
	"Fast",
	"Automation",
}

func (v *TestModes) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TestModes(value)
	for _, existing := range AllowedTestModesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TestModes", value)
}

// NewTestModesFromValue returns a pointer to a valid TestModes
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTestModesFromValue(v string) (*TestModes, error) {
	ev := TestModes(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TestModes: valid values are %v", v, AllowedTestModesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TestModes) IsValid() bool {
	for _, existing := range AllowedTestModesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TestModes value
func (v TestModes) Ptr() *TestModes {
	return &v
}

type NullableTestModes struct {
	value *TestModes
	isSet bool
}

func (v NullableTestModes) Get() *TestModes {
	return v.value
}

func (v *NullableTestModes) Set(val *TestModes) {
	v.value = val
	v.isSet = true
}

func (v NullableTestModes) IsSet() bool {
	return v.isSet
}

func (v *NullableTestModes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestModes(val *TestModes) *NullableTestModes {
	return &NullableTestModes{value: val, isSet: true}
}

func (v NullableTestModes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestModes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

