/*
splitit-web-api-v3

Splitit's API

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package splitit

import (
	"encoding/json"
)

// LinksData struct for LinksData
type LinksData struct {
	Checkout *string `json:"Checkout,omitempty"`
	LearnMore *string `json:"LearnMore,omitempty"`
	TermsConditions *string `json:"TermsConditions,omitempty"`
	PrivacyPolicy *string `json:"PrivacyPolicy,omitempty"`
}

// NewLinksData instantiates a new LinksData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLinksData() *LinksData {
	this := LinksData{}
	return &this
}

// NewLinksDataWithDefaults instantiates a new LinksData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLinksDataWithDefaults() *LinksData {
	this := LinksData{}
	return &this
}

// GetCheckout returns the Checkout field value if set, zero value otherwise.
func (o *LinksData) GetCheckout() string {
	if o == nil || isNil(o.Checkout) {
		var ret string
		return ret
	}
	return *o.Checkout
}

// GetCheckoutOk returns a tuple with the Checkout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinksData) GetCheckoutOk() (*string, bool) {
	if o == nil || isNil(o.Checkout) {
    return nil, false
	}
	return o.Checkout, true
}

// HasCheckout returns a boolean if a field has been set.
func (o *LinksData) HasCheckout() bool {
	if o != nil && !isNil(o.Checkout) {
		return true
	}

	return false
}

// SetCheckout gets a reference to the given string and assigns it to the Checkout field.
func (o *LinksData) SetCheckout(v string) {
	o.Checkout = &v
}

// GetLearnMore returns the LearnMore field value if set, zero value otherwise.
func (o *LinksData) GetLearnMore() string {
	if o == nil || isNil(o.LearnMore) {
		var ret string
		return ret
	}
	return *o.LearnMore
}

// GetLearnMoreOk returns a tuple with the LearnMore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinksData) GetLearnMoreOk() (*string, bool) {
	if o == nil || isNil(o.LearnMore) {
    return nil, false
	}
	return o.LearnMore, true
}

// HasLearnMore returns a boolean if a field has been set.
func (o *LinksData) HasLearnMore() bool {
	if o != nil && !isNil(o.LearnMore) {
		return true
	}

	return false
}

// SetLearnMore gets a reference to the given string and assigns it to the LearnMore field.
func (o *LinksData) SetLearnMore(v string) {
	o.LearnMore = &v
}

// GetTermsConditions returns the TermsConditions field value if set, zero value otherwise.
func (o *LinksData) GetTermsConditions() string {
	if o == nil || isNil(o.TermsConditions) {
		var ret string
		return ret
	}
	return *o.TermsConditions
}

// GetTermsConditionsOk returns a tuple with the TermsConditions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinksData) GetTermsConditionsOk() (*string, bool) {
	if o == nil || isNil(o.TermsConditions) {
    return nil, false
	}
	return o.TermsConditions, true
}

// HasTermsConditions returns a boolean if a field has been set.
func (o *LinksData) HasTermsConditions() bool {
	if o != nil && !isNil(o.TermsConditions) {
		return true
	}

	return false
}

// SetTermsConditions gets a reference to the given string and assigns it to the TermsConditions field.
func (o *LinksData) SetTermsConditions(v string) {
	o.TermsConditions = &v
}

// GetPrivacyPolicy returns the PrivacyPolicy field value if set, zero value otherwise.
func (o *LinksData) GetPrivacyPolicy() string {
	if o == nil || isNil(o.PrivacyPolicy) {
		var ret string
		return ret
	}
	return *o.PrivacyPolicy
}

// GetPrivacyPolicyOk returns a tuple with the PrivacyPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinksData) GetPrivacyPolicyOk() (*string, bool) {
	if o == nil || isNil(o.PrivacyPolicy) {
    return nil, false
	}
	return o.PrivacyPolicy, true
}

// HasPrivacyPolicy returns a boolean if a field has been set.
func (o *LinksData) HasPrivacyPolicy() bool {
	if o != nil && !isNil(o.PrivacyPolicy) {
		return true
	}

	return false
}

// SetPrivacyPolicy gets a reference to the given string and assigns it to the PrivacyPolicy field.
func (o *LinksData) SetPrivacyPolicy(v string) {
	o.PrivacyPolicy = &v
}

func (o LinksData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Checkout) {
		toSerialize["Checkout"] = o.Checkout
	}
	if !isNil(o.LearnMore) {
		toSerialize["LearnMore"] = o.LearnMore
	}
	if !isNil(o.TermsConditions) {
		toSerialize["TermsConditions"] = o.TermsConditions
	}
	if !isNil(o.PrivacyPolicy) {
		toSerialize["PrivacyPolicy"] = o.PrivacyPolicy
	}
	return json.Marshal(toSerialize)
}

type NullableLinksData struct {
	value *LinksData
	isSet bool
}

func (v NullableLinksData) Get() *LinksData {
	return v.value
}

func (v *NullableLinksData) Set(val *LinksData) {
	v.value = val
	v.isSet = true
}

func (v NullableLinksData) IsSet() bool {
	return v.isSet
}

func (v *NullableLinksData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLinksData(val *LinksData) *NullableLinksData {
	return &NullableLinksData{value: val, isSet: true}
}

func (v NullableLinksData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLinksData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


