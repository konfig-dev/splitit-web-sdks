/*
splitit-web-api-v3

Splitit's API

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package splitit

import (
	"encoding/json"
)

// PaymentMethodModel struct for PaymentMethodModel
type PaymentMethodModel struct {
	Type PaymentMethodType `json:"Type"`
	Card *CardData `json:"Card,omitempty"`
}

// NewPaymentMethodModel instantiates a new PaymentMethodModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaymentMethodModel(type_ PaymentMethodType) *PaymentMethodModel {
	this := PaymentMethodModel{}
	this.Type = type_
	return &this
}

// NewPaymentMethodModelWithDefaults instantiates a new PaymentMethodModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaymentMethodModelWithDefaults() *PaymentMethodModel {
	this := PaymentMethodModel{}
	return &this
}

// GetType returns the Type field value
func (o *PaymentMethodModel) GetType() PaymentMethodType {
	if o == nil {
		var ret PaymentMethodType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *PaymentMethodModel) GetTypeOk() (*PaymentMethodType, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *PaymentMethodModel) SetType(v PaymentMethodType) {
	o.Type = v
}

// GetCard returns the Card field value if set, zero value otherwise.
func (o *PaymentMethodModel) GetCard() CardData {
	if o == nil || isNil(o.Card) {
		var ret CardData
		return ret
	}
	return *o.Card
}

// GetCardOk returns a tuple with the Card field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentMethodModel) GetCardOk() (*CardData, bool) {
	if o == nil || isNil(o.Card) {
    return nil, false
	}
	return o.Card, true
}

// HasCard returns a boolean if a field has been set.
func (o *PaymentMethodModel) HasCard() bool {
	if o != nil && !isNil(o.Card) {
		return true
	}

	return false
}

// SetCard gets a reference to the given CardData and assigns it to the Card field.
func (o *PaymentMethodModel) SetCard(v CardData) {
	o.Card = &v
}

func (o PaymentMethodModel) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["Type"] = o.Type
	}
	if !isNil(o.Card) {
		toSerialize["Card"] = o.Card
	}
	return json.Marshal(toSerialize)
}

type NullablePaymentMethodModel struct {
	value *PaymentMethodModel
	isSet bool
}

func (v NullablePaymentMethodModel) Get() *PaymentMethodModel {
	return v.value
}

func (v *NullablePaymentMethodModel) Set(val *PaymentMethodModel) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentMethodModel) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentMethodModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentMethodModel(val *PaymentMethodModel) *NullablePaymentMethodModel {
	return &NullablePaymentMethodModel{value: val, isSet: true}
}

func (v NullablePaymentMethodModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentMethodModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


