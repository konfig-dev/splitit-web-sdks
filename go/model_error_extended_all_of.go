/*
splitit-web-api-v3

Splitit's API

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package splitit

import (
	"encoding/json"
)

// ErrorExtendedAllOf struct for ErrorExtendedAllOf
type ErrorExtendedAllOf struct {
	ExtraData *map[string]string `json:"ExtraData,omitempty"`
}

// NewErrorExtendedAllOf instantiates a new ErrorExtendedAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewErrorExtendedAllOf() *ErrorExtendedAllOf {
	this := ErrorExtendedAllOf{}
	return &this
}

// NewErrorExtendedAllOfWithDefaults instantiates a new ErrorExtendedAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewErrorExtendedAllOfWithDefaults() *ErrorExtendedAllOf {
	this := ErrorExtendedAllOf{}
	return &this
}

// GetExtraData returns the ExtraData field value if set, zero value otherwise.
func (o *ErrorExtendedAllOf) GetExtraData() map[string]string {
	if o == nil || isNil(o.ExtraData) {
		var ret map[string]string
		return ret
	}
	return *o.ExtraData
}

// GetExtraDataOk returns a tuple with the ExtraData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorExtendedAllOf) GetExtraDataOk() (*map[string]string, bool) {
	if o == nil || isNil(o.ExtraData) {
    return nil, false
	}
	return o.ExtraData, true
}

// HasExtraData returns a boolean if a field has been set.
func (o *ErrorExtendedAllOf) HasExtraData() bool {
	if o != nil && !isNil(o.ExtraData) {
		return true
	}

	return false
}

// SetExtraData gets a reference to the given map[string]string and assigns it to the ExtraData field.
func (o *ErrorExtendedAllOf) SetExtraData(v map[string]string) {
	o.ExtraData = &v
}

func (o ErrorExtendedAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.ExtraData) {
		toSerialize["ExtraData"] = o.ExtraData
	}
	return json.Marshal(toSerialize)
}

type NullableErrorExtendedAllOf struct {
	value *ErrorExtendedAllOf
	isSet bool
}

func (v NullableErrorExtendedAllOf) Get() *ErrorExtendedAllOf {
	return v.value
}

func (v *NullableErrorExtendedAllOf) Set(val *ErrorExtendedAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableErrorExtendedAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableErrorExtendedAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableErrorExtendedAllOf(val *ErrorExtendedAllOf) *NullableErrorExtendedAllOf {
	return &NullableErrorExtendedAllOf{value: val, isSet: true}
}

func (v NullableErrorExtendedAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableErrorExtendedAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


