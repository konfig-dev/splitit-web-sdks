/*
splitit-web-api-v3

Splitit's Web API

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package splitit

import (
	"encoding/json"
	"fmt"
)

// RefundStrategy 
type RefundStrategy string

// List of RefundStrategy
const (
	REFUNDSTRATEGY_FUTURE_INSTALLMENTS_FIRST RefundStrategy = "FutureInstallmentsFirst"
	REFUNDSTRATEGY_FUTURE_INSTALLMENTS_LAST RefundStrategy = "FutureInstallmentsLast"
	REFUNDSTRATEGY_FUTURE_INSTALLMENTS_NOT_ALLOWED RefundStrategy = "FutureInstallmentsNotAllowed"
	REFUNDSTRATEGY_REDUCE_FROM_LAST_INSTALLMENT RefundStrategy = "ReduceFromLastInstallment"
)

// All allowed values of RefundStrategy enum
var AllowedRefundStrategyEnumValues = []RefundStrategy{
	"FutureInstallmentsFirst",
	"FutureInstallmentsLast",
	"FutureInstallmentsNotAllowed",
	"ReduceFromLastInstallment",
}

func (v *RefundStrategy) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RefundStrategy(value)
	for _, existing := range AllowedRefundStrategyEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RefundStrategy", value)
}

// NewRefundStrategyFromValue returns a pointer to a valid RefundStrategy
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRefundStrategyFromValue(v string) (*RefundStrategy, error) {
	ev := RefundStrategy(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RefundStrategy: valid values are %v", v, AllowedRefundStrategyEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RefundStrategy) IsValid() bool {
	for _, existing := range AllowedRefundStrategyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RefundStrategy value
func (v RefundStrategy) Ptr() *RefundStrategy {
	return &v
}

type NullableRefundStrategy struct {
	value *RefundStrategy
	isSet bool
}

func (v NullableRefundStrategy) Get() *RefundStrategy {
	return v.value
}

func (v *NullableRefundStrategy) Set(val *RefundStrategy) {
	v.value = val
	v.isSet = true
}

func (v NullableRefundStrategy) IsSet() bool {
	return v.isSet
}

func (v *NullableRefundStrategy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRefundStrategy(val *RefundStrategy) *NullableRefundStrategy {
	return &NullableRefundStrategy{value: val, isSet: true}
}

func (v NullableRefundStrategy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRefundStrategy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

