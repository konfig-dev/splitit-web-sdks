/*
splitit-web-api-v3

Splitit's Web API

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package splitit

import (
	"encoding/json"
)

// MockerShopperToken struct for MockerShopperToken
type MockerShopperToken struct {
	Token *string `json:"Token,omitempty"`
	Last4Digit *string `json:"Last4Digit,omitempty"`
}

// NewMockerShopperToken instantiates a new MockerShopperToken object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMockerShopperToken() *MockerShopperToken {
	this := MockerShopperToken{}
	return &this
}

// NewMockerShopperTokenWithDefaults instantiates a new MockerShopperToken object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMockerShopperTokenWithDefaults() *MockerShopperToken {
	this := MockerShopperToken{}
	return &this
}

// GetToken returns the Token field value if set, zero value otherwise.
func (o *MockerShopperToken) GetToken() string {
	if o == nil || isNil(o.Token) {
		var ret string
		return ret
	}
	return *o.Token
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MockerShopperToken) GetTokenOk() (*string, bool) {
	if o == nil || isNil(o.Token) {
    return nil, false
	}
	return o.Token, true
}

// HasToken returns a boolean if a field has been set.
func (o *MockerShopperToken) HasToken() bool {
	if o != nil && !isNil(o.Token) {
		return true
	}

	return false
}

// SetToken gets a reference to the given string and assigns it to the Token field.
func (o *MockerShopperToken) SetToken(v string) {
	o.Token = &v
}

// GetLast4Digit returns the Last4Digit field value if set, zero value otherwise.
func (o *MockerShopperToken) GetLast4Digit() string {
	if o == nil || isNil(o.Last4Digit) {
		var ret string
		return ret
	}
	return *o.Last4Digit
}

// GetLast4DigitOk returns a tuple with the Last4Digit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MockerShopperToken) GetLast4DigitOk() (*string, bool) {
	if o == nil || isNil(o.Last4Digit) {
    return nil, false
	}
	return o.Last4Digit, true
}

// HasLast4Digit returns a boolean if a field has been set.
func (o *MockerShopperToken) HasLast4Digit() bool {
	if o != nil && !isNil(o.Last4Digit) {
		return true
	}

	return false
}

// SetLast4Digit gets a reference to the given string and assigns it to the Last4Digit field.
func (o *MockerShopperToken) SetLast4Digit(v string) {
	o.Last4Digit = &v
}

func (o MockerShopperToken) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Token) {
		toSerialize["Token"] = o.Token
	}
	if !isNil(o.Last4Digit) {
		toSerialize["Last4Digit"] = o.Last4Digit
	}
	return json.Marshal(toSerialize)
}

type NullableMockerShopperToken struct {
	value *MockerShopperToken
	isSet bool
}

func (v NullableMockerShopperToken) Get() *MockerShopperToken {
	return v.value
}

func (v *NullableMockerShopperToken) Set(val *MockerShopperToken) {
	v.value = val
	v.isSet = true
}

func (v NullableMockerShopperToken) IsSet() bool {
	return v.isSet
}

func (v *NullableMockerShopperToken) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMockerShopperToken(val *MockerShopperToken) *NullableMockerShopperToken {
	return &NullableMockerShopperToken{value: val, isSet: true}
}

func (v NullableMockerShopperToken) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMockerShopperToken) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


