/*
splitit-web-api-v3

Splitit's Web API

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package splitit

import (
	"encoding/json"
	"fmt"
)

// MoneyFlows 
type MoneyFlows string

// List of MoneyFlows
const (
	MONEYFLOWS_NOT_DETERMINED MoneyFlows = "NotDetermined"
	MONEYFLOWS_MONTHLY MoneyFlows = "Monthly"
	MONEYFLOWS_SCP MoneyFlows = "SCP"
	MONEYFLOWS_CUSTOM MoneyFlows = "Custom"
	MONEYFLOWS_PENDING_FUNDING MoneyFlows = "PendingFunding"
	MONEYFLOWS_CHOOSE MoneyFlows = "Choose"
)

// All allowed values of MoneyFlows enum
var AllowedMoneyFlowsEnumValues = []MoneyFlows{
	"NotDetermined",
	"Monthly",
	"SCP",
	"Custom",
	"PendingFunding",
	"Choose",
}

func (v *MoneyFlows) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MoneyFlows(value)
	for _, existing := range AllowedMoneyFlowsEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MoneyFlows", value)
}

// NewMoneyFlowsFromValue returns a pointer to a valid MoneyFlows
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMoneyFlowsFromValue(v string) (*MoneyFlows, error) {
	ev := MoneyFlows(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MoneyFlows: valid values are %v", v, AllowedMoneyFlowsEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MoneyFlows) IsValid() bool {
	for _, existing := range AllowedMoneyFlowsEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MoneyFlows value
func (v MoneyFlows) Ptr() *MoneyFlows {
	return &v
}

type NullableMoneyFlows struct {
	value *MoneyFlows
	isSet bool
}

func (v NullableMoneyFlows) Get() *MoneyFlows {
	return v.value
}

func (v *NullableMoneyFlows) Set(val *MoneyFlows) {
	v.value = val
	v.isSet = true
}

func (v NullableMoneyFlows) IsSet() bool {
	return v.isSet
}

func (v *NullableMoneyFlows) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMoneyFlows(val *MoneyFlows) *NullableMoneyFlows {
	return &NullableMoneyFlows{value: val, isSet: true}
}

func (v NullableMoneyFlows) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMoneyFlows) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

