/*
splitit-web-api-v3

Splitit's Web API

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package splitit

import (
	"encoding/json"
)

// EventsEndpointsModel struct for EventsEndpointsModel
type EventsEndpointsModel struct {
	CreateSucceeded *string `json:"CreateSucceeded,omitempty"`
}

// NewEventsEndpointsModel instantiates a new EventsEndpointsModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventsEndpointsModel() *EventsEndpointsModel {
	this := EventsEndpointsModel{}
	return &this
}

// NewEventsEndpointsModelWithDefaults instantiates a new EventsEndpointsModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventsEndpointsModelWithDefaults() *EventsEndpointsModel {
	this := EventsEndpointsModel{}
	return &this
}

// GetCreateSucceeded returns the CreateSucceeded field value if set, zero value otherwise.
func (o *EventsEndpointsModel) GetCreateSucceeded() string {
	if o == nil || isNil(o.CreateSucceeded) {
		var ret string
		return ret
	}
	return *o.CreateSucceeded
}

// GetCreateSucceededOk returns a tuple with the CreateSucceeded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventsEndpointsModel) GetCreateSucceededOk() (*string, bool) {
	if o == nil || isNil(o.CreateSucceeded) {
    return nil, false
	}
	return o.CreateSucceeded, true
}

// HasCreateSucceeded returns a boolean if a field has been set.
func (o *EventsEndpointsModel) HasCreateSucceeded() bool {
	if o != nil && !isNil(o.CreateSucceeded) {
		return true
	}

	return false
}

// SetCreateSucceeded gets a reference to the given string and assigns it to the CreateSucceeded field.
func (o *EventsEndpointsModel) SetCreateSucceeded(v string) {
	o.CreateSucceeded = &v
}

func (o EventsEndpointsModel) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.CreateSucceeded) {
		toSerialize["CreateSucceeded"] = o.CreateSucceeded
	}
	return json.Marshal(toSerialize)
}

type NullableEventsEndpointsModel struct {
	value *EventsEndpointsModel
	isSet bool
}

func (v NullableEventsEndpointsModel) Get() *EventsEndpointsModel {
	return v.value
}

func (v *NullableEventsEndpointsModel) Set(val *EventsEndpointsModel) {
	v.value = val
	v.isSet = true
}

func (v NullableEventsEndpointsModel) IsSet() bool {
	return v.isSet
}

func (v *NullableEventsEndpointsModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventsEndpointsModel(val *EventsEndpointsModel) *NullableEventsEndpointsModel {
	return &NullableEventsEndpointsModel{value: val, isSet: true}
}

func (v NullableEventsEndpointsModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventsEndpointsModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


