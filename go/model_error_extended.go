/*
splitit-web-api-v3

Splitit's API

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package splitit

import (
	"encoding/json"
)

// ErrorExtended struct for ErrorExtended
type ErrorExtended struct {
	Code *string `json:"Code,omitempty"`
	Message *string `json:"Message,omitempty"`
	AdditionalInfo *string `json:"AdditionalInfo,omitempty"`
	ExtraData *map[string]string `json:"ExtraData,omitempty"`
}

// NewErrorExtended instantiates a new ErrorExtended object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewErrorExtended() *ErrorExtended {
	this := ErrorExtended{}
	return &this
}

// NewErrorExtendedWithDefaults instantiates a new ErrorExtended object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewErrorExtendedWithDefaults() *ErrorExtended {
	this := ErrorExtended{}
	return &this
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *ErrorExtended) GetCode() string {
	if o == nil || isNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorExtended) GetCodeOk() (*string, bool) {
	if o == nil || isNil(o.Code) {
    return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *ErrorExtended) HasCode() bool {
	if o != nil && !isNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *ErrorExtended) SetCode(v string) {
	o.Code = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *ErrorExtended) GetMessage() string {
	if o == nil || isNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorExtended) GetMessageOk() (*string, bool) {
	if o == nil || isNil(o.Message) {
    return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *ErrorExtended) HasMessage() bool {
	if o != nil && !isNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *ErrorExtended) SetMessage(v string) {
	o.Message = &v
}

// GetAdditionalInfo returns the AdditionalInfo field value if set, zero value otherwise.
func (o *ErrorExtended) GetAdditionalInfo() string {
	if o == nil || isNil(o.AdditionalInfo) {
		var ret string
		return ret
	}
	return *o.AdditionalInfo
}

// GetAdditionalInfoOk returns a tuple with the AdditionalInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorExtended) GetAdditionalInfoOk() (*string, bool) {
	if o == nil || isNil(o.AdditionalInfo) {
    return nil, false
	}
	return o.AdditionalInfo, true
}

// HasAdditionalInfo returns a boolean if a field has been set.
func (o *ErrorExtended) HasAdditionalInfo() bool {
	if o != nil && !isNil(o.AdditionalInfo) {
		return true
	}

	return false
}

// SetAdditionalInfo gets a reference to the given string and assigns it to the AdditionalInfo field.
func (o *ErrorExtended) SetAdditionalInfo(v string) {
	o.AdditionalInfo = &v
}

// GetExtraData returns the ExtraData field value if set, zero value otherwise.
func (o *ErrorExtended) GetExtraData() map[string]string {
	if o == nil || isNil(o.ExtraData) {
		var ret map[string]string
		return ret
	}
	return *o.ExtraData
}

// GetExtraDataOk returns a tuple with the ExtraData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorExtended) GetExtraDataOk() (*map[string]string, bool) {
	if o == nil || isNil(o.ExtraData) {
    return nil, false
	}
	return o.ExtraData, true
}

// HasExtraData returns a boolean if a field has been set.
func (o *ErrorExtended) HasExtraData() bool {
	if o != nil && !isNil(o.ExtraData) {
		return true
	}

	return false
}

// SetExtraData gets a reference to the given map[string]string and assigns it to the ExtraData field.
func (o *ErrorExtended) SetExtraData(v map[string]string) {
	o.ExtraData = &v
}

func (o ErrorExtended) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Code) {
		toSerialize["Code"] = o.Code
	}
	if !isNil(o.Message) {
		toSerialize["Message"] = o.Message
	}
	if !isNil(o.AdditionalInfo) {
		toSerialize["AdditionalInfo"] = o.AdditionalInfo
	}
	if !isNil(o.ExtraData) {
		toSerialize["ExtraData"] = o.ExtraData
	}
	return json.Marshal(toSerialize)
}

type NullableErrorExtended struct {
	value *ErrorExtended
	isSet bool
}

func (v NullableErrorExtended) Get() *ErrorExtended {
	return v.value
}

func (v *NullableErrorExtended) Set(val *ErrorExtended) {
	v.value = val
	v.isSet = true
}

func (v NullableErrorExtended) IsSet() bool {
	return v.isSet
}

func (v *NullableErrorExtended) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableErrorExtended(val *ErrorExtended) *NullableErrorExtended {
	return &NullableErrorExtended{value: val, isSet: true}
}

func (v NullableErrorExtended) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableErrorExtended) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


