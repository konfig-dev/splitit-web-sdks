/*
splitit-web-api-v3

Splitit's API

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package splitit

import (
	"encoding/json"
	"time"
)

// Installment struct for Installment
type Installment struct {
	InstallmentNumber int32 `json:"InstallmentNumber"`
	Amount float32 `json:"Amount"`
	ProcessDateTime *time.Time `json:"ProcessDateTime,omitempty"`
	Status InstallmentStatus `json:"Status"`
}

// NewInstallment instantiates a new Installment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstallment(installmentNumber int32, amount float32, status InstallmentStatus) *Installment {
	this := Installment{}
	this.InstallmentNumber = installmentNumber
	this.Amount = amount
	this.Status = status
	return &this
}

// NewInstallmentWithDefaults instantiates a new Installment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstallmentWithDefaults() *Installment {
	this := Installment{}
	return &this
}

// GetInstallmentNumber returns the InstallmentNumber field value
func (o *Installment) GetInstallmentNumber() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.InstallmentNumber
}

// GetInstallmentNumberOk returns a tuple with the InstallmentNumber field value
// and a boolean to check if the value has been set.
func (o *Installment) GetInstallmentNumberOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.InstallmentNumber, true
}

// SetInstallmentNumber sets field value
func (o *Installment) SetInstallmentNumber(v int32) {
	o.InstallmentNumber = v
}

// GetAmount returns the Amount field value
func (o *Installment) GetAmount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *Installment) GetAmountOk() (*float32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *Installment) SetAmount(v float32) {
	o.Amount = v
}

// GetProcessDateTime returns the ProcessDateTime field value if set, zero value otherwise.
func (o *Installment) GetProcessDateTime() time.Time {
	if o == nil || isNil(o.ProcessDateTime) {
		var ret time.Time
		return ret
	}
	return *o.ProcessDateTime
}

// GetProcessDateTimeOk returns a tuple with the ProcessDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Installment) GetProcessDateTimeOk() (*time.Time, bool) {
	if o == nil || isNil(o.ProcessDateTime) {
    return nil, false
	}
	return o.ProcessDateTime, true
}

// HasProcessDateTime returns a boolean if a field has been set.
func (o *Installment) HasProcessDateTime() bool {
	if o != nil && !isNil(o.ProcessDateTime) {
		return true
	}

	return false
}

// SetProcessDateTime gets a reference to the given time.Time and assigns it to the ProcessDateTime field.
func (o *Installment) SetProcessDateTime(v time.Time) {
	o.ProcessDateTime = &v
}

// GetStatus returns the Status field value
func (o *Installment) GetStatus() InstallmentStatus {
	if o == nil {
		var ret InstallmentStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *Installment) GetStatusOk() (*InstallmentStatus, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *Installment) SetStatus(v InstallmentStatus) {
	o.Status = v
}

func (o Installment) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["InstallmentNumber"] = o.InstallmentNumber
	}
	if true {
		toSerialize["Amount"] = o.Amount
	}
	if !isNil(o.ProcessDateTime) {
		toSerialize["ProcessDateTime"] = o.ProcessDateTime
	}
	if true {
		toSerialize["Status"] = o.Status
	}
	return json.Marshal(toSerialize)
}

type NullableInstallment struct {
	value *Installment
	isSet bool
}

func (v NullableInstallment) Get() *Installment {
	return v.value
}

func (v *NullableInstallment) Set(val *Installment) {
	v.value = val
	v.isSet = true
}

func (v NullableInstallment) IsSet() bool {
	return v.isSet
}

func (v *NullableInstallment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstallment(val *Installment) *NullableInstallment {
	return &NullableInstallment{value: val, isSet: true}
}

func (v NullableInstallment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstallment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


