/*
splitit-web-api-v3

Splitit's Web API

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package splitit

import (
	"encoding/json"
	"time"
)

// TransactionResult struct for TransactionResult
type TransactionResult struct {
	GatewayTransactionId *string `json:"GatewayTransactionId,omitempty"`
	SplititTransactionId int64 `json:"SplititTransactionId"`
	SplititGatewayTransactionId *string `json:"SplititGatewayTransactionId,omitempty"`
	GatewayResultCode *string `json:"GatewayResultCode,omitempty"`
	GatewayResultMessage *string `json:"GatewayResultMessage,omitempty"`
	OperationType *ReferenceEntityBase `json:"OperationType,omitempty"`
	GatewayResult bool `json:"GatewayResult"`
	GatewayTransactionDate time.Time `json:"GatewayTransactionDate"`
	IsChargeback bool `json:"IsChargeback"`
	AVSResult *CardResult `json:"AVSResult,omitempty"`
	CVCResult *CardResult `json:"CVCResult,omitempty"`
	IsInDispute *bool `json:"IsInDispute,omitempty"`
	DisputeStatus *DisputeStatus `json:"DisputeStatus,omitempty"`
}

// NewTransactionResult instantiates a new TransactionResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionResult(splititTransactionId int64, gatewayResult bool, gatewayTransactionDate time.Time, isChargeback bool) *TransactionResult {
	this := TransactionResult{}
	this.SplititTransactionId = splititTransactionId
	this.GatewayResult = gatewayResult
	this.GatewayTransactionDate = gatewayTransactionDate
	this.IsChargeback = isChargeback
	return &this
}

// NewTransactionResultWithDefaults instantiates a new TransactionResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionResultWithDefaults() *TransactionResult {
	this := TransactionResult{}
	return &this
}

// GetGatewayTransactionId returns the GatewayTransactionId field value if set, zero value otherwise.
func (o *TransactionResult) GetGatewayTransactionId() string {
	if o == nil || isNil(o.GatewayTransactionId) {
		var ret string
		return ret
	}
	return *o.GatewayTransactionId
}

// GetGatewayTransactionIdOk returns a tuple with the GatewayTransactionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionResult) GetGatewayTransactionIdOk() (*string, bool) {
	if o == nil || isNil(o.GatewayTransactionId) {
    return nil, false
	}
	return o.GatewayTransactionId, true
}

// HasGatewayTransactionId returns a boolean if a field has been set.
func (o *TransactionResult) HasGatewayTransactionId() bool {
	if o != nil && !isNil(o.GatewayTransactionId) {
		return true
	}

	return false
}

// SetGatewayTransactionId gets a reference to the given string and assigns it to the GatewayTransactionId field.
func (o *TransactionResult) SetGatewayTransactionId(v string) {
	o.GatewayTransactionId = &v
}

// GetSplititTransactionId returns the SplititTransactionId field value
func (o *TransactionResult) GetSplititTransactionId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.SplititTransactionId
}

// GetSplititTransactionIdOk returns a tuple with the SplititTransactionId field value
// and a boolean to check if the value has been set.
func (o *TransactionResult) GetSplititTransactionIdOk() (*int64, bool) {
	if o == nil {
    return nil, false
	}
	return &o.SplititTransactionId, true
}

// SetSplititTransactionId sets field value
func (o *TransactionResult) SetSplititTransactionId(v int64) {
	o.SplititTransactionId = v
}

// GetSplititGatewayTransactionId returns the SplititGatewayTransactionId field value if set, zero value otherwise.
func (o *TransactionResult) GetSplititGatewayTransactionId() string {
	if o == nil || isNil(o.SplititGatewayTransactionId) {
		var ret string
		return ret
	}
	return *o.SplititGatewayTransactionId
}

// GetSplititGatewayTransactionIdOk returns a tuple with the SplititGatewayTransactionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionResult) GetSplititGatewayTransactionIdOk() (*string, bool) {
	if o == nil || isNil(o.SplititGatewayTransactionId) {
    return nil, false
	}
	return o.SplititGatewayTransactionId, true
}

// HasSplititGatewayTransactionId returns a boolean if a field has been set.
func (o *TransactionResult) HasSplititGatewayTransactionId() bool {
	if o != nil && !isNil(o.SplititGatewayTransactionId) {
		return true
	}

	return false
}

// SetSplititGatewayTransactionId gets a reference to the given string and assigns it to the SplititGatewayTransactionId field.
func (o *TransactionResult) SetSplititGatewayTransactionId(v string) {
	o.SplititGatewayTransactionId = &v
}

// GetGatewayResultCode returns the GatewayResultCode field value if set, zero value otherwise.
func (o *TransactionResult) GetGatewayResultCode() string {
	if o == nil || isNil(o.GatewayResultCode) {
		var ret string
		return ret
	}
	return *o.GatewayResultCode
}

// GetGatewayResultCodeOk returns a tuple with the GatewayResultCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionResult) GetGatewayResultCodeOk() (*string, bool) {
	if o == nil || isNil(o.GatewayResultCode) {
    return nil, false
	}
	return o.GatewayResultCode, true
}

// HasGatewayResultCode returns a boolean if a field has been set.
func (o *TransactionResult) HasGatewayResultCode() bool {
	if o != nil && !isNil(o.GatewayResultCode) {
		return true
	}

	return false
}

// SetGatewayResultCode gets a reference to the given string and assigns it to the GatewayResultCode field.
func (o *TransactionResult) SetGatewayResultCode(v string) {
	o.GatewayResultCode = &v
}

// GetGatewayResultMessage returns the GatewayResultMessage field value if set, zero value otherwise.
func (o *TransactionResult) GetGatewayResultMessage() string {
	if o == nil || isNil(o.GatewayResultMessage) {
		var ret string
		return ret
	}
	return *o.GatewayResultMessage
}

// GetGatewayResultMessageOk returns a tuple with the GatewayResultMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionResult) GetGatewayResultMessageOk() (*string, bool) {
	if o == nil || isNil(o.GatewayResultMessage) {
    return nil, false
	}
	return o.GatewayResultMessage, true
}

// HasGatewayResultMessage returns a boolean if a field has been set.
func (o *TransactionResult) HasGatewayResultMessage() bool {
	if o != nil && !isNil(o.GatewayResultMessage) {
		return true
	}

	return false
}

// SetGatewayResultMessage gets a reference to the given string and assigns it to the GatewayResultMessage field.
func (o *TransactionResult) SetGatewayResultMessage(v string) {
	o.GatewayResultMessage = &v
}

// GetOperationType returns the OperationType field value if set, zero value otherwise.
func (o *TransactionResult) GetOperationType() ReferenceEntityBase {
	if o == nil || isNil(o.OperationType) {
		var ret ReferenceEntityBase
		return ret
	}
	return *o.OperationType
}

// GetOperationTypeOk returns a tuple with the OperationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionResult) GetOperationTypeOk() (*ReferenceEntityBase, bool) {
	if o == nil || isNil(o.OperationType) {
    return nil, false
	}
	return o.OperationType, true
}

// HasOperationType returns a boolean if a field has been set.
func (o *TransactionResult) HasOperationType() bool {
	if o != nil && !isNil(o.OperationType) {
		return true
	}

	return false
}

// SetOperationType gets a reference to the given ReferenceEntityBase and assigns it to the OperationType field.
func (o *TransactionResult) SetOperationType(v ReferenceEntityBase) {
	o.OperationType = &v
}

// GetGatewayResult returns the GatewayResult field value
func (o *TransactionResult) GetGatewayResult() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.GatewayResult
}

// GetGatewayResultOk returns a tuple with the GatewayResult field value
// and a boolean to check if the value has been set.
func (o *TransactionResult) GetGatewayResultOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return &o.GatewayResult, true
}

// SetGatewayResult sets field value
func (o *TransactionResult) SetGatewayResult(v bool) {
	o.GatewayResult = v
}

// GetGatewayTransactionDate returns the GatewayTransactionDate field value
func (o *TransactionResult) GetGatewayTransactionDate() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.GatewayTransactionDate
}

// GetGatewayTransactionDateOk returns a tuple with the GatewayTransactionDate field value
// and a boolean to check if the value has been set.
func (o *TransactionResult) GetGatewayTransactionDateOk() (*time.Time, bool) {
	if o == nil {
    return nil, false
	}
	return &o.GatewayTransactionDate, true
}

// SetGatewayTransactionDate sets field value
func (o *TransactionResult) SetGatewayTransactionDate(v time.Time) {
	o.GatewayTransactionDate = v
}

// GetIsChargeback returns the IsChargeback field value
func (o *TransactionResult) GetIsChargeback() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsChargeback
}

// GetIsChargebackOk returns a tuple with the IsChargeback field value
// and a boolean to check if the value has been set.
func (o *TransactionResult) GetIsChargebackOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return &o.IsChargeback, true
}

// SetIsChargeback sets field value
func (o *TransactionResult) SetIsChargeback(v bool) {
	o.IsChargeback = v
}

// GetAVSResult returns the AVSResult field value if set, zero value otherwise.
func (o *TransactionResult) GetAVSResult() CardResult {
	if o == nil || isNil(o.AVSResult) {
		var ret CardResult
		return ret
	}
	return *o.AVSResult
}

// GetAVSResultOk returns a tuple with the AVSResult field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionResult) GetAVSResultOk() (*CardResult, bool) {
	if o == nil || isNil(o.AVSResult) {
    return nil, false
	}
	return o.AVSResult, true
}

// HasAVSResult returns a boolean if a field has been set.
func (o *TransactionResult) HasAVSResult() bool {
	if o != nil && !isNil(o.AVSResult) {
		return true
	}

	return false
}

// SetAVSResult gets a reference to the given CardResult and assigns it to the AVSResult field.
func (o *TransactionResult) SetAVSResult(v CardResult) {
	o.AVSResult = &v
}

// GetCVCResult returns the CVCResult field value if set, zero value otherwise.
func (o *TransactionResult) GetCVCResult() CardResult {
	if o == nil || isNil(o.CVCResult) {
		var ret CardResult
		return ret
	}
	return *o.CVCResult
}

// GetCVCResultOk returns a tuple with the CVCResult field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionResult) GetCVCResultOk() (*CardResult, bool) {
	if o == nil || isNil(o.CVCResult) {
    return nil, false
	}
	return o.CVCResult, true
}

// HasCVCResult returns a boolean if a field has been set.
func (o *TransactionResult) HasCVCResult() bool {
	if o != nil && !isNil(o.CVCResult) {
		return true
	}

	return false
}

// SetCVCResult gets a reference to the given CardResult and assigns it to the CVCResult field.
func (o *TransactionResult) SetCVCResult(v CardResult) {
	o.CVCResult = &v
}

// GetIsInDispute returns the IsInDispute field value if set, zero value otherwise.
func (o *TransactionResult) GetIsInDispute() bool {
	if o == nil || isNil(o.IsInDispute) {
		var ret bool
		return ret
	}
	return *o.IsInDispute
}

// GetIsInDisputeOk returns a tuple with the IsInDispute field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionResult) GetIsInDisputeOk() (*bool, bool) {
	if o == nil || isNil(o.IsInDispute) {
    return nil, false
	}
	return o.IsInDispute, true
}

// HasIsInDispute returns a boolean if a field has been set.
func (o *TransactionResult) HasIsInDispute() bool {
	if o != nil && !isNil(o.IsInDispute) {
		return true
	}

	return false
}

// SetIsInDispute gets a reference to the given bool and assigns it to the IsInDispute field.
func (o *TransactionResult) SetIsInDispute(v bool) {
	o.IsInDispute = &v
}

// GetDisputeStatus returns the DisputeStatus field value if set, zero value otherwise.
func (o *TransactionResult) GetDisputeStatus() DisputeStatus {
	if o == nil || isNil(o.DisputeStatus) {
		var ret DisputeStatus
		return ret
	}
	return *o.DisputeStatus
}

// GetDisputeStatusOk returns a tuple with the DisputeStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionResult) GetDisputeStatusOk() (*DisputeStatus, bool) {
	if o == nil || isNil(o.DisputeStatus) {
    return nil, false
	}
	return o.DisputeStatus, true
}

// HasDisputeStatus returns a boolean if a field has been set.
func (o *TransactionResult) HasDisputeStatus() bool {
	if o != nil && !isNil(o.DisputeStatus) {
		return true
	}

	return false
}

// SetDisputeStatus gets a reference to the given DisputeStatus and assigns it to the DisputeStatus field.
func (o *TransactionResult) SetDisputeStatus(v DisputeStatus) {
	o.DisputeStatus = &v
}

func (o TransactionResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.GatewayTransactionId) {
		toSerialize["GatewayTransactionId"] = o.GatewayTransactionId
	}
	if true {
		toSerialize["SplititTransactionId"] = o.SplititTransactionId
	}
	if !isNil(o.SplititGatewayTransactionId) {
		toSerialize["SplititGatewayTransactionId"] = o.SplititGatewayTransactionId
	}
	if !isNil(o.GatewayResultCode) {
		toSerialize["GatewayResultCode"] = o.GatewayResultCode
	}
	if !isNil(o.GatewayResultMessage) {
		toSerialize["GatewayResultMessage"] = o.GatewayResultMessage
	}
	if !isNil(o.OperationType) {
		toSerialize["OperationType"] = o.OperationType
	}
	if true {
		toSerialize["GatewayResult"] = o.GatewayResult
	}
	if true {
		toSerialize["GatewayTransactionDate"] = o.GatewayTransactionDate
	}
	if true {
		toSerialize["IsChargeback"] = o.IsChargeback
	}
	if !isNil(o.AVSResult) {
		toSerialize["AVSResult"] = o.AVSResult
	}
	if !isNil(o.CVCResult) {
		toSerialize["CVCResult"] = o.CVCResult
	}
	if !isNil(o.IsInDispute) {
		toSerialize["IsInDispute"] = o.IsInDispute
	}
	if !isNil(o.DisputeStatus) {
		toSerialize["DisputeStatus"] = o.DisputeStatus
	}
	return json.Marshal(toSerialize)
}

type NullableTransactionResult struct {
	value *TransactionResult
	isSet bool
}

func (v NullableTransactionResult) Get() *TransactionResult {
	return v.value
}

func (v *NullableTransactionResult) Set(val *TransactionResult) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionResult) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionResult(val *TransactionResult) *NullableTransactionResult {
	return &NullableTransactionResult{value: val, isSet: true}
}

func (v NullableTransactionResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


