/*
splitit-web-api-v3

Splitit's Web API

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package splitit

import (
	"encoding/json"
	"fmt"
)

// DisputeStatus 
type DisputeStatus string

// List of DisputeStatus
const (
	DISPUTESTATUS_OPEN DisputeStatus = "Open"
	DISPUTESTATUS_WON DisputeStatus = "Won"
	DISPUTESTATUS_LOST DisputeStatus = "Lost"
	DISPUTESTATUS_CLOSED DisputeStatus = "Closed"
	DISPUTESTATUS_OTHER DisputeStatus = "Other"
	DISPUTESTATUS_PENDING DisputeStatus = "Pending"
)

// All allowed values of DisputeStatus enum
var AllowedDisputeStatusEnumValues = []DisputeStatus{
	"Open",
	"Won",
	"Lost",
	"Closed",
	"Other",
	"Pending",
}

func (v *DisputeStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DisputeStatus(value)
	for _, existing := range AllowedDisputeStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DisputeStatus", value)
}

// NewDisputeStatusFromValue returns a pointer to a valid DisputeStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDisputeStatusFromValue(v string) (*DisputeStatus, error) {
	ev := DisputeStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DisputeStatus: valid values are %v", v, AllowedDisputeStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DisputeStatus) IsValid() bool {
	for _, existing := range AllowedDisputeStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DisputeStatus value
func (v DisputeStatus) Ptr() *DisputeStatus {
	return &v
}

type NullableDisputeStatus struct {
	value *DisputeStatus
	isSet bool
}

func (v NullableDisputeStatus) Get() *DisputeStatus {
	return v.value
}

func (v *NullableDisputeStatus) Set(val *DisputeStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableDisputeStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableDisputeStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDisputeStatus(val *DisputeStatus) *NullableDisputeStatus {
	return &NullableDisputeStatus{value: val, isSet: true}
}

func (v NullableDisputeStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDisputeStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

