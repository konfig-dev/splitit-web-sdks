/*
splitit-web-api-v3

Splitit's API

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package splitit

import (
	"encoding/json"
)

// RedirectionEndpointsModel struct for RedirectionEndpointsModel
type RedirectionEndpointsModel struct {
	AuthorizeSucceeded *string `json:"AuthorizeSucceeded,omitempty"`
	Succeeded *string `json:"Succeeded,omitempty"`
	AuthorizeFailed *string `json:"AuthorizeFailed,omitempty"`
	Failed *string `json:"Failed,omitempty"`
}

// NewRedirectionEndpointsModel instantiates a new RedirectionEndpointsModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRedirectionEndpointsModel() *RedirectionEndpointsModel {
	this := RedirectionEndpointsModel{}
	return &this
}

// NewRedirectionEndpointsModelWithDefaults instantiates a new RedirectionEndpointsModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRedirectionEndpointsModelWithDefaults() *RedirectionEndpointsModel {
	this := RedirectionEndpointsModel{}
	return &this
}

// GetAuthorizeSucceeded returns the AuthorizeSucceeded field value if set, zero value otherwise.
func (o *RedirectionEndpointsModel) GetAuthorizeSucceeded() string {
	if o == nil || isNil(o.AuthorizeSucceeded) {
		var ret string
		return ret
	}
	return *o.AuthorizeSucceeded
}

// GetAuthorizeSucceededOk returns a tuple with the AuthorizeSucceeded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RedirectionEndpointsModel) GetAuthorizeSucceededOk() (*string, bool) {
	if o == nil || isNil(o.AuthorizeSucceeded) {
    return nil, false
	}
	return o.AuthorizeSucceeded, true
}

// HasAuthorizeSucceeded returns a boolean if a field has been set.
func (o *RedirectionEndpointsModel) HasAuthorizeSucceeded() bool {
	if o != nil && !isNil(o.AuthorizeSucceeded) {
		return true
	}

	return false
}

// SetAuthorizeSucceeded gets a reference to the given string and assigns it to the AuthorizeSucceeded field.
func (o *RedirectionEndpointsModel) SetAuthorizeSucceeded(v string) {
	o.AuthorizeSucceeded = &v
}

// GetSucceeded returns the Succeeded field value if set, zero value otherwise.
func (o *RedirectionEndpointsModel) GetSucceeded() string {
	if o == nil || isNil(o.Succeeded) {
		var ret string
		return ret
	}
	return *o.Succeeded
}

// GetSucceededOk returns a tuple with the Succeeded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RedirectionEndpointsModel) GetSucceededOk() (*string, bool) {
	if o == nil || isNil(o.Succeeded) {
    return nil, false
	}
	return o.Succeeded, true
}

// HasSucceeded returns a boolean if a field has been set.
func (o *RedirectionEndpointsModel) HasSucceeded() bool {
	if o != nil && !isNil(o.Succeeded) {
		return true
	}

	return false
}

// SetSucceeded gets a reference to the given string and assigns it to the Succeeded field.
func (o *RedirectionEndpointsModel) SetSucceeded(v string) {
	o.Succeeded = &v
}

// GetAuthorizeFailed returns the AuthorizeFailed field value if set, zero value otherwise.
func (o *RedirectionEndpointsModel) GetAuthorizeFailed() string {
	if o == nil || isNil(o.AuthorizeFailed) {
		var ret string
		return ret
	}
	return *o.AuthorizeFailed
}

// GetAuthorizeFailedOk returns a tuple with the AuthorizeFailed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RedirectionEndpointsModel) GetAuthorizeFailedOk() (*string, bool) {
	if o == nil || isNil(o.AuthorizeFailed) {
    return nil, false
	}
	return o.AuthorizeFailed, true
}

// HasAuthorizeFailed returns a boolean if a field has been set.
func (o *RedirectionEndpointsModel) HasAuthorizeFailed() bool {
	if o != nil && !isNil(o.AuthorizeFailed) {
		return true
	}

	return false
}

// SetAuthorizeFailed gets a reference to the given string and assigns it to the AuthorizeFailed field.
func (o *RedirectionEndpointsModel) SetAuthorizeFailed(v string) {
	o.AuthorizeFailed = &v
}

// GetFailed returns the Failed field value if set, zero value otherwise.
func (o *RedirectionEndpointsModel) GetFailed() string {
	if o == nil || isNil(o.Failed) {
		var ret string
		return ret
	}
	return *o.Failed
}

// GetFailedOk returns a tuple with the Failed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RedirectionEndpointsModel) GetFailedOk() (*string, bool) {
	if o == nil || isNil(o.Failed) {
    return nil, false
	}
	return o.Failed, true
}

// HasFailed returns a boolean if a field has been set.
func (o *RedirectionEndpointsModel) HasFailed() bool {
	if o != nil && !isNil(o.Failed) {
		return true
	}

	return false
}

// SetFailed gets a reference to the given string and assigns it to the Failed field.
func (o *RedirectionEndpointsModel) SetFailed(v string) {
	o.Failed = &v
}

func (o RedirectionEndpointsModel) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.AuthorizeSucceeded) {
		toSerialize["AuthorizeSucceeded"] = o.AuthorizeSucceeded
	}
	if !isNil(o.Succeeded) {
		toSerialize["Succeeded"] = o.Succeeded
	}
	if !isNil(o.AuthorizeFailed) {
		toSerialize["AuthorizeFailed"] = o.AuthorizeFailed
	}
	if !isNil(o.Failed) {
		toSerialize["Failed"] = o.Failed
	}
	return json.Marshal(toSerialize)
}

type NullableRedirectionEndpointsModel struct {
	value *RedirectionEndpointsModel
	isSet bool
}

func (v NullableRedirectionEndpointsModel) Get() *RedirectionEndpointsModel {
	return v.value
}

func (v *NullableRedirectionEndpointsModel) Set(val *RedirectionEndpointsModel) {
	v.value = val
	v.isSet = true
}

func (v NullableRedirectionEndpointsModel) IsSet() bool {
	return v.isSet
}

func (v *NullableRedirectionEndpointsModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRedirectionEndpointsModel(val *RedirectionEndpointsModel) *NullableRedirectionEndpointsModel {
	return &NullableRedirectionEndpointsModel{value: val, isSet: true}
}

func (v NullableRedirectionEndpointsModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRedirectionEndpointsModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


