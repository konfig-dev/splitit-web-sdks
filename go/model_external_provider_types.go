/*
splitit-web-api-v3

Splitit's Web API

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package splitit

import (
	"encoding/json"
	"fmt"
)

// ExternalProviderTypes 
type ExternalProviderTypes string

// List of ExternalProviderTypes
const (
	EXTERNALPROVIDERTYPES_MOCK ExternalProviderTypes = "Mock"
	EXTERNALPROVIDERTYPES_VISA ExternalProviderTypes = "Visa"
	EXTERNALPROVIDERTYPES_SPLITIT ExternalProviderTypes = "Splitit"
)

// All allowed values of ExternalProviderTypes enum
var AllowedExternalProviderTypesEnumValues = []ExternalProviderTypes{
	"Mock",
	"Visa",
	"Splitit",
}

func (v *ExternalProviderTypes) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ExternalProviderTypes(value)
	for _, existing := range AllowedExternalProviderTypesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ExternalProviderTypes", value)
}

// NewExternalProviderTypesFromValue returns a pointer to a valid ExternalProviderTypes
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewExternalProviderTypesFromValue(v string) (*ExternalProviderTypes, error) {
	ev := ExternalProviderTypes(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ExternalProviderTypes: valid values are %v", v, AllowedExternalProviderTypesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ExternalProviderTypes) IsValid() bool {
	for _, existing := range AllowedExternalProviderTypesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ExternalProviderTypes value
func (v ExternalProviderTypes) Ptr() *ExternalProviderTypes {
	return &v
}

type NullableExternalProviderTypes struct {
	value *ExternalProviderTypes
	isSet bool
}

func (v NullableExternalProviderTypes) Get() *ExternalProviderTypes {
	return v.value
}

func (v *NullableExternalProviderTypes) Set(val *ExternalProviderTypes) {
	v.value = val
	v.isSet = true
}

func (v NullableExternalProviderTypes) IsSet() bool {
	return v.isSet
}

func (v *NullableExternalProviderTypes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExternalProviderTypes(val *ExternalProviderTypes) *NullableExternalProviderTypes {
	return &NullableExternalProviderTypes{value: val, isSet: true}
}

func (v NullableExternalProviderTypes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExternalProviderTypes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

