/*
splitit-web-api-v3

Splitit's Web API

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package splitit

import (
	"encoding/json"
)

// InstallmentsEligibilityResponse struct for InstallmentsEligibilityResponse
type InstallmentsEligibilityResponse struct {
	PaymentPlanOptions []PaymentPlanOptionModel `json:"PaymentPlanOptions,omitempty"`
}

// NewInstallmentsEligibilityResponse instantiates a new InstallmentsEligibilityResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstallmentsEligibilityResponse() *InstallmentsEligibilityResponse {
	this := InstallmentsEligibilityResponse{}
	return &this
}

// NewInstallmentsEligibilityResponseWithDefaults instantiates a new InstallmentsEligibilityResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstallmentsEligibilityResponseWithDefaults() *InstallmentsEligibilityResponse {
	this := InstallmentsEligibilityResponse{}
	return &this
}

// GetPaymentPlanOptions returns the PaymentPlanOptions field value if set, zero value otherwise.
func (o *InstallmentsEligibilityResponse) GetPaymentPlanOptions() []PaymentPlanOptionModel {
	if o == nil || isNil(o.PaymentPlanOptions) {
		var ret []PaymentPlanOptionModel
		return ret
	}
	return o.PaymentPlanOptions
}

// GetPaymentPlanOptionsOk returns a tuple with the PaymentPlanOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstallmentsEligibilityResponse) GetPaymentPlanOptionsOk() ([]PaymentPlanOptionModel, bool) {
	if o == nil || isNil(o.PaymentPlanOptions) {
    return nil, false
	}
	return o.PaymentPlanOptions, true
}

// HasPaymentPlanOptions returns a boolean if a field has been set.
func (o *InstallmentsEligibilityResponse) HasPaymentPlanOptions() bool {
	if o != nil && !isNil(o.PaymentPlanOptions) {
		return true
	}

	return false
}

// SetPaymentPlanOptions gets a reference to the given []PaymentPlanOptionModel and assigns it to the PaymentPlanOptions field.
func (o *InstallmentsEligibilityResponse) SetPaymentPlanOptions(v []PaymentPlanOptionModel) {
	o.PaymentPlanOptions = v
}

func (o InstallmentsEligibilityResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.PaymentPlanOptions) {
		toSerialize["PaymentPlanOptions"] = o.PaymentPlanOptions
	}
	return json.Marshal(toSerialize)
}

type NullableInstallmentsEligibilityResponse struct {
	value *InstallmentsEligibilityResponse
	isSet bool
}

func (v NullableInstallmentsEligibilityResponse) Get() *InstallmentsEligibilityResponse {
	return v.value
}

func (v *NullableInstallmentsEligibilityResponse) Set(val *InstallmentsEligibilityResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableInstallmentsEligibilityResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableInstallmentsEligibilityResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstallmentsEligibilityResponse(val *InstallmentsEligibilityResponse) *NullableInstallmentsEligibilityResponse {
	return &NullableInstallmentsEligibilityResponse{value: val, isSet: true}
}

func (v NullableInstallmentsEligibilityResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstallmentsEligibilityResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


