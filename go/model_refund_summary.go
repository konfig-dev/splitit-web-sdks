/*
splitit-web-api-v3

Splitit's API

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package splitit

import (
	"encoding/json"
)

// RefundSummary struct for RefundSummary
type RefundSummary struct {
	TotalAmount *float32 `json:"TotalAmount,omitempty"`
	FailedAmount *float32 `json:"FailedAmount,omitempty"`
	SucceededAmount *float32 `json:"SucceededAmount,omitempty"`
	PendingAmount *float32 `json:"PendingAmount,omitempty"`
}

// NewRefundSummary instantiates a new RefundSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRefundSummary() *RefundSummary {
	this := RefundSummary{}
	return &this
}

// NewRefundSummaryWithDefaults instantiates a new RefundSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRefundSummaryWithDefaults() *RefundSummary {
	this := RefundSummary{}
	return &this
}

// GetTotalAmount returns the TotalAmount field value if set, zero value otherwise.
func (o *RefundSummary) GetTotalAmount() float32 {
	if o == nil || isNil(o.TotalAmount) {
		var ret float32
		return ret
	}
	return *o.TotalAmount
}

// GetTotalAmountOk returns a tuple with the TotalAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RefundSummary) GetTotalAmountOk() (*float32, bool) {
	if o == nil || isNil(o.TotalAmount) {
    return nil, false
	}
	return o.TotalAmount, true
}

// HasTotalAmount returns a boolean if a field has been set.
func (o *RefundSummary) HasTotalAmount() bool {
	if o != nil && !isNil(o.TotalAmount) {
		return true
	}

	return false
}

// SetTotalAmount gets a reference to the given float32 and assigns it to the TotalAmount field.
func (o *RefundSummary) SetTotalAmount(v float32) {
	o.TotalAmount = &v
}

// GetFailedAmount returns the FailedAmount field value if set, zero value otherwise.
func (o *RefundSummary) GetFailedAmount() float32 {
	if o == nil || isNil(o.FailedAmount) {
		var ret float32
		return ret
	}
	return *o.FailedAmount
}

// GetFailedAmountOk returns a tuple with the FailedAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RefundSummary) GetFailedAmountOk() (*float32, bool) {
	if o == nil || isNil(o.FailedAmount) {
    return nil, false
	}
	return o.FailedAmount, true
}

// HasFailedAmount returns a boolean if a field has been set.
func (o *RefundSummary) HasFailedAmount() bool {
	if o != nil && !isNil(o.FailedAmount) {
		return true
	}

	return false
}

// SetFailedAmount gets a reference to the given float32 and assigns it to the FailedAmount field.
func (o *RefundSummary) SetFailedAmount(v float32) {
	o.FailedAmount = &v
}

// GetSucceededAmount returns the SucceededAmount field value if set, zero value otherwise.
func (o *RefundSummary) GetSucceededAmount() float32 {
	if o == nil || isNil(o.SucceededAmount) {
		var ret float32
		return ret
	}
	return *o.SucceededAmount
}

// GetSucceededAmountOk returns a tuple with the SucceededAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RefundSummary) GetSucceededAmountOk() (*float32, bool) {
	if o == nil || isNil(o.SucceededAmount) {
    return nil, false
	}
	return o.SucceededAmount, true
}

// HasSucceededAmount returns a boolean if a field has been set.
func (o *RefundSummary) HasSucceededAmount() bool {
	if o != nil && !isNil(o.SucceededAmount) {
		return true
	}

	return false
}

// SetSucceededAmount gets a reference to the given float32 and assigns it to the SucceededAmount field.
func (o *RefundSummary) SetSucceededAmount(v float32) {
	o.SucceededAmount = &v
}

// GetPendingAmount returns the PendingAmount field value if set, zero value otherwise.
func (o *RefundSummary) GetPendingAmount() float32 {
	if o == nil || isNil(o.PendingAmount) {
		var ret float32
		return ret
	}
	return *o.PendingAmount
}

// GetPendingAmountOk returns a tuple with the PendingAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RefundSummary) GetPendingAmountOk() (*float32, bool) {
	if o == nil || isNil(o.PendingAmount) {
    return nil, false
	}
	return o.PendingAmount, true
}

// HasPendingAmount returns a boolean if a field has been set.
func (o *RefundSummary) HasPendingAmount() bool {
	if o != nil && !isNil(o.PendingAmount) {
		return true
	}

	return false
}

// SetPendingAmount gets a reference to the given float32 and assigns it to the PendingAmount field.
func (o *RefundSummary) SetPendingAmount(v float32) {
	o.PendingAmount = &v
}

func (o RefundSummary) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.TotalAmount) {
		toSerialize["TotalAmount"] = o.TotalAmount
	}
	if !isNil(o.FailedAmount) {
		toSerialize["FailedAmount"] = o.FailedAmount
	}
	if !isNil(o.SucceededAmount) {
		toSerialize["SucceededAmount"] = o.SucceededAmount
	}
	if !isNil(o.PendingAmount) {
		toSerialize["PendingAmount"] = o.PendingAmount
	}
	return json.Marshal(toSerialize)
}

type NullableRefundSummary struct {
	value *RefundSummary
	isSet bool
}

func (v NullableRefundSummary) Get() *RefundSummary {
	return v.value
}

func (v *NullableRefundSummary) Set(val *RefundSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableRefundSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableRefundSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRefundSummary(val *RefundSummary) *NullableRefundSummary {
	return &NullableRefundSummary{value: val, isSet: true}
}

func (v NullableRefundSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRefundSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


