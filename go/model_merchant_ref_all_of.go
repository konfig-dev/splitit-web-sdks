/*
splitit-web-api-v3

Splitit's Web API

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package splitit

import (
	"encoding/json"
)

// MerchantRefAllOf struct for MerchantRefAllOf
type MerchantRefAllOf struct {
	Name *string `json:"Name,omitempty"`
}

// NewMerchantRefAllOf instantiates a new MerchantRefAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMerchantRefAllOf() *MerchantRefAllOf {
	this := MerchantRefAllOf{}
	return &this
}

// NewMerchantRefAllOfWithDefaults instantiates a new MerchantRefAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMerchantRefAllOfWithDefaults() *MerchantRefAllOf {
	this := MerchantRefAllOf{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *MerchantRefAllOf) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MerchantRefAllOf) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
    return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *MerchantRefAllOf) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *MerchantRefAllOf) SetName(v string) {
	o.Name = &v
}

func (o MerchantRefAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Name) {
		toSerialize["Name"] = o.Name
	}
	return json.Marshal(toSerialize)
}

type NullableMerchantRefAllOf struct {
	value *MerchantRefAllOf
	isSet bool
}

func (v NullableMerchantRefAllOf) Get() *MerchantRefAllOf {
	return v.value
}

func (v *NullableMerchantRefAllOf) Set(val *MerchantRefAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableMerchantRefAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableMerchantRefAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMerchantRefAllOf(val *MerchantRefAllOf) *NullableMerchantRefAllOf {
	return &NullableMerchantRefAllOf{value: val, isSet: true}
}

func (v NullableMerchantRefAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMerchantRefAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


