/*
splitit-web-api-v3

Testing InstallmentPlanApiService

*/

// Code generated by Konfig (https://konfigthis.com);

package splitit

import (
    "testing"
    // "github.com/stretchr/testify/assert"
    // "github.com/stretchr/testify/require"
    // splitit "github.com/konfig-dev/splitit-web-sdks/go"
)

func Test_splitit_InstallmentPlanApiService(t *testing.T) {

    // configuration := splitit.NewConfiguration()
    // configuration.SetHost("http://127.0.0.1:4010")
    /* 
    client := splitit.NewAPIClient(configuration)
    */

    t.Run("Test InstallmentPlanApiService CheckEligibility", func(t *testing.T) {
        /* TODO: ENG-1367 Fix parameter values for Go SDK generated tests
        planData := *splitit.NewPlanData()
        cardDetails := *splitit.NewCardData()
        billingAddress := *splitit.NewAddressData()
        
        checkInstallmentsEligibilityRequest := *splitit.NewCheckInstallmentsEligibilityRequest()
        checkInstallmentsEligibilityRequest.SetPlanData(planData)
        checkInstallmentsEligibilityRequest.SetCardDetails(cardDetails)
        checkInstallmentsEligibilityRequest.SetBillingAddress(billingAddress)
        checkInstallmentsEligibilityRequest.SetShopperIdentifier("null")
        
        request := client.InstallmentPlanApi.CheckEligibility(
            "xSplititIdempotencyKey_example",
            """",
            checkInstallmentsEligibilityRequest,
        )
        
        resp, httpRes, err := request.Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)
        */
    })

    t.Run("Test InstallmentPlanApiService Get", func(t *testing.T) {
        /* TODO: ENG-1367 Fix parameter values for Go SDK generated tests
        request := client.InstallmentPlanApi.Get(
            "installmentPlanNumber_example",
            "xSplititIdempotencyKey_example",
            """",
        )
        
        resp, httpRes, err := request.Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)
        */
    })

    t.Run("Test InstallmentPlanApiService GetEligibilityTermsAndCondition", func(t *testing.T) {
        /* TODO: ENG-1367 Fix parameter values for Go SDK generated tests
        request := client.InstallmentPlanApi.GetEligibilityTermsAndCondition(
            "ipn_example",
            "xSplititIdempotencyKey_example",
            """",
        )
        
        resp, httpRes, err := request.Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)
        */
    })

    t.Run("Test InstallmentPlanApiService Post", func(t *testing.T) {
        /* TODO: ENG-1367 Fix parameter values for Go SDK generated tests
        shopper := *splitit.NewShopperData()
        planData := *splitit.NewPlanDataModel()
        billingAddress := *splitit.NewAddressDataModel()
        redirectUrls := *splitit.NewInitiateRedirectionEndpointsModel()
        uxSettings := *splitit.NewUxSettingsModel()
        eventsEndpoints := *splitit.NewEventsEndpointsModel()
        processingData := *splitit.NewProcessingData()
        
        installmentPlanInitiateRequest := *splitit.NewInstallmentPlanInitiateRequest()
        installmentPlanInitiateRequest.SetAutoCapture(null)
        installmentPlanInitiateRequest.SetAttempt3dSecure(null)
        installmentPlanInitiateRequest.SetShopper(shopper)
        installmentPlanInitiateRequest.SetPlanData(planData)
        installmentPlanInitiateRequest.SetBillingAddress(billingAddress)
        installmentPlanInitiateRequest.SetRedirectUrls(redirectUrls)
        installmentPlanInitiateRequest.SetUxSettings(uxSettings)
        installmentPlanInitiateRequest.SetEventsEndpoints(eventsEndpoints)
        installmentPlanInitiateRequest.SetProcessingData(processingData)
        
        request := client.InstallmentPlanApi.Post(
            "xSplititIdempotencyKey_example",
            """",
            installmentPlanInitiateRequest,
        )
        request.XSplititTestMode("xSplititTestMode_example")
        request.XSplititStrategy("xSplititStrategy_example")
        request.Splititclientinfo("splititclientinfo_example")
        
        resp, httpRes, err := request.Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)
        */
    })

    t.Run("Test InstallmentPlanApiService Post2", func(t *testing.T) {
        /* TODO: ENG-1367 Fix parameter values for Go SDK generated tests
        shopper := *splitit.NewShopperData()
        planData := *splitit.NewPlanDataModel()
        billingAddress := *splitit.NewAddressDataModel()
        paymentMethod := *splitit.NewPaymentMethodModel()
        redirectUrls := *splitit.NewRedirectionEndpointsModel()
        processingData := *splitit.NewProcessingData()
        eventsEndpoints := *splitit.NewEventsEndpointsModel()
        
        installmentPlanCreateRequest := *splitit.NewInstallmentPlanCreateRequest(
            null,
            null,
        )
        installmentPlanCreateRequest.SetAttempt3dSecure(null)
        installmentPlanCreateRequest.SetShopper(shopper)
        installmentPlanCreateRequest.SetPlanData(planData)
        installmentPlanCreateRequest.SetBillingAddress(billingAddress)
        installmentPlanCreateRequest.SetPaymentMethod(paymentMethod)
        installmentPlanCreateRequest.SetRedirectUrls(redirectUrls)
        installmentPlanCreateRequest.SetProcessingData(processingData)
        installmentPlanCreateRequest.SetEventsEndpoints(eventsEndpoints)
        
        request := client.InstallmentPlanApi.Post2(
            "xSplititIdempotencyKey_example",
            """",
            installmentPlanCreateRequest,
        )
        request.XSplititTestMode("xSplititTestMode_example")
        request.XSplititStrategy("xSplititStrategy_example")
        request.Splititclientinfo("splititclientinfo_example")
        
        resp, httpRes, err := request.Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)
        */
    })

    t.Run("Test InstallmentPlanApiService Refund", func(t *testing.T) {
        /* TODO: ENG-1367 Fix parameter values for Go SDK generated tests
        
        installmentPlanRefundRequest := *splitit.NewInstallmentPlanRefundRequest(
            null,
        )
        installmentPlanRefundRequest.SetRefundStrategy(null)
        installmentPlanRefundRequest.SetReferenceId("null")
        
        request := client.InstallmentPlanApi.Refund(
            "installmentPlanNumber_example",
            "xSplititIdempotencyKey_example",
            """",
            installmentPlanRefundRequest,
        )
        
        resp, httpRes, err := request.Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)
        */
    })

    t.Run("Test InstallmentPlanApiService Search", func(t *testing.T) {
        /* TODO: ENG-1367 Fix parameter values for Go SDK generated tests
        request := client.InstallmentPlanApi.Search(
            "xSplititIdempotencyKey_example",
            """",
        )
        request.InstallmentPlanNumber("installmentPlanNumber_example")
        request.RefOrderNumber("refOrderNumber_example")
        request.ExtendedParams()
        
        resp, httpRes, err := request.Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)
        */
    })

    t.Run("Test InstallmentPlanApiService UpdateOrder", func(t *testing.T) {
        /* TODO: ENG-1367 Fix parameter values for Go SDK generated tests
        
        installmentPlanUpdateRequest := *splitit.NewInstallmentPlanUpdateRequest()
        installmentPlanUpdateRequest.SetRefOrderNumber("null")
        installmentPlanUpdateRequest.SetTrackingNumber("null")
        installmentPlanUpdateRequest.SetCapture(null)
        installmentPlanUpdateRequest.SetShippingStatus(null)
        installmentPlanUpdateRequest.SetNewAmount(null)
        
        request := client.InstallmentPlanApi.UpdateOrder(
            "installmentPlanNumber_example",
            "xSplititIdempotencyKey_example",
            """",
            installmentPlanUpdateRequest,
        )
        
        resp, httpRes, err := request.Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)
        */
    })

    t.Run("Test InstallmentPlanApiService UpdateOrder2", func(t *testing.T) {
        /* TODO: ENG-1367 Fix parameter values for Go SDK generated tests
        
        installmentPlanUpdateRequestByIdentifier := *splitit.NewInstallmentPlanUpdateRequestByIdentifier()
        
        request := client.InstallmentPlanApi.UpdateOrder2(
            "xSplititIdempotencyKey_example",
            """",
            installmentPlanUpdateRequestByIdentifier,
        )
        
        resp, httpRes, err := request.Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)
        */
    })

    t.Run("Test InstallmentPlanApiService VerifyAuthorization", func(t *testing.T) {
        /* TODO: ENG-1367 Fix parameter values for Go SDK generated tests
        request := client.InstallmentPlanApi.VerifyAuthorization(
            "installmentPlanNumber_example",
            "xSplititIdempotencyKey_example",
            """",
        )
        
        resp, httpRes, err := request.Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)
        */
    })

}