/*
splitit-web-api-v3

Splitit's Web API

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package splitit

import (
	"encoding/json"
)

// EligibilityTermsAndConditionResponse struct for EligibilityTermsAndConditionResponse
type EligibilityTermsAndConditionResponse struct {
	TermsAndConditions *string `json:"TermsAndConditions,omitempty"`
	PrivacyPolicy *string `json:"PrivacyPolicy,omitempty"`
	Provider *string `json:"Provider,omitempty"`
}

// NewEligibilityTermsAndConditionResponse instantiates a new EligibilityTermsAndConditionResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEligibilityTermsAndConditionResponse() *EligibilityTermsAndConditionResponse {
	this := EligibilityTermsAndConditionResponse{}
	return &this
}

// NewEligibilityTermsAndConditionResponseWithDefaults instantiates a new EligibilityTermsAndConditionResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEligibilityTermsAndConditionResponseWithDefaults() *EligibilityTermsAndConditionResponse {
	this := EligibilityTermsAndConditionResponse{}
	return &this
}

// GetTermsAndConditions returns the TermsAndConditions field value if set, zero value otherwise.
func (o *EligibilityTermsAndConditionResponse) GetTermsAndConditions() string {
	if o == nil || isNil(o.TermsAndConditions) {
		var ret string
		return ret
	}
	return *o.TermsAndConditions
}

// GetTermsAndConditionsOk returns a tuple with the TermsAndConditions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EligibilityTermsAndConditionResponse) GetTermsAndConditionsOk() (*string, bool) {
	if o == nil || isNil(o.TermsAndConditions) {
    return nil, false
	}
	return o.TermsAndConditions, true
}

// HasTermsAndConditions returns a boolean if a field has been set.
func (o *EligibilityTermsAndConditionResponse) HasTermsAndConditions() bool {
	if o != nil && !isNil(o.TermsAndConditions) {
		return true
	}

	return false
}

// SetTermsAndConditions gets a reference to the given string and assigns it to the TermsAndConditions field.
func (o *EligibilityTermsAndConditionResponse) SetTermsAndConditions(v string) {
	o.TermsAndConditions = &v
}

// GetPrivacyPolicy returns the PrivacyPolicy field value if set, zero value otherwise.
func (o *EligibilityTermsAndConditionResponse) GetPrivacyPolicy() string {
	if o == nil || isNil(o.PrivacyPolicy) {
		var ret string
		return ret
	}
	return *o.PrivacyPolicy
}

// GetPrivacyPolicyOk returns a tuple with the PrivacyPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EligibilityTermsAndConditionResponse) GetPrivacyPolicyOk() (*string, bool) {
	if o == nil || isNil(o.PrivacyPolicy) {
    return nil, false
	}
	return o.PrivacyPolicy, true
}

// HasPrivacyPolicy returns a boolean if a field has been set.
func (o *EligibilityTermsAndConditionResponse) HasPrivacyPolicy() bool {
	if o != nil && !isNil(o.PrivacyPolicy) {
		return true
	}

	return false
}

// SetPrivacyPolicy gets a reference to the given string and assigns it to the PrivacyPolicy field.
func (o *EligibilityTermsAndConditionResponse) SetPrivacyPolicy(v string) {
	o.PrivacyPolicy = &v
}

// GetProvider returns the Provider field value if set, zero value otherwise.
func (o *EligibilityTermsAndConditionResponse) GetProvider() string {
	if o == nil || isNil(o.Provider) {
		var ret string
		return ret
	}
	return *o.Provider
}

// GetProviderOk returns a tuple with the Provider field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EligibilityTermsAndConditionResponse) GetProviderOk() (*string, bool) {
	if o == nil || isNil(o.Provider) {
    return nil, false
	}
	return o.Provider, true
}

// HasProvider returns a boolean if a field has been set.
func (o *EligibilityTermsAndConditionResponse) HasProvider() bool {
	if o != nil && !isNil(o.Provider) {
		return true
	}

	return false
}

// SetProvider gets a reference to the given string and assigns it to the Provider field.
func (o *EligibilityTermsAndConditionResponse) SetProvider(v string) {
	o.Provider = &v
}

func (o EligibilityTermsAndConditionResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.TermsAndConditions) {
		toSerialize["TermsAndConditions"] = o.TermsAndConditions
	}
	if !isNil(o.PrivacyPolicy) {
		toSerialize["PrivacyPolicy"] = o.PrivacyPolicy
	}
	if !isNil(o.Provider) {
		toSerialize["Provider"] = o.Provider
	}
	return json.Marshal(toSerialize)
}

type NullableEligibilityTermsAndConditionResponse struct {
	value *EligibilityTermsAndConditionResponse
	isSet bool
}

func (v NullableEligibilityTermsAndConditionResponse) Get() *EligibilityTermsAndConditionResponse {
	return v.value
}

func (v *NullableEligibilityTermsAndConditionResponse) Set(val *EligibilityTermsAndConditionResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableEligibilityTermsAndConditionResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableEligibilityTermsAndConditionResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEligibilityTermsAndConditionResponse(val *EligibilityTermsAndConditionResponse) *NullableEligibilityTermsAndConditionResponse {
	return &NullableEligibilityTermsAndConditionResponse{value: val, isSet: true}
}

func (v NullableEligibilityTermsAndConditionResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEligibilityTermsAndConditionResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


