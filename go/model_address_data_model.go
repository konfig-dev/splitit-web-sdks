/*
splitit-web-api-v3

Splitit's API

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package splitit

import (
	"encoding/json"
)

// AddressDataModel struct for AddressDataModel
type AddressDataModel struct {
	AddressLine1 *string `json:"AddressLine1,omitempty"`
	AddressLine2 *string `json:"AddressLine2,omitempty"`
	City *string `json:"City,omitempty"`
	Country *string `json:"Country,omitempty"`
	State *string `json:"State,omitempty"`
	Zip *string `json:"Zip,omitempty"`
}

// NewAddressDataModel instantiates a new AddressDataModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddressDataModel() *AddressDataModel {
	this := AddressDataModel{}
	return &this
}

// NewAddressDataModelWithDefaults instantiates a new AddressDataModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddressDataModelWithDefaults() *AddressDataModel {
	this := AddressDataModel{}
	return &this
}

// GetAddressLine1 returns the AddressLine1 field value if set, zero value otherwise.
func (o *AddressDataModel) GetAddressLine1() string {
	if o == nil || isNil(o.AddressLine1) {
		var ret string
		return ret
	}
	return *o.AddressLine1
}

// GetAddressLine1Ok returns a tuple with the AddressLine1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddressDataModel) GetAddressLine1Ok() (*string, bool) {
	if o == nil || isNil(o.AddressLine1) {
    return nil, false
	}
	return o.AddressLine1, true
}

// HasAddressLine1 returns a boolean if a field has been set.
func (o *AddressDataModel) HasAddressLine1() bool {
	if o != nil && !isNil(o.AddressLine1) {
		return true
	}

	return false
}

// SetAddressLine1 gets a reference to the given string and assigns it to the AddressLine1 field.
func (o *AddressDataModel) SetAddressLine1(v string) {
	o.AddressLine1 = &v
}

// GetAddressLine2 returns the AddressLine2 field value if set, zero value otherwise.
func (o *AddressDataModel) GetAddressLine2() string {
	if o == nil || isNil(o.AddressLine2) {
		var ret string
		return ret
	}
	return *o.AddressLine2
}

// GetAddressLine2Ok returns a tuple with the AddressLine2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddressDataModel) GetAddressLine2Ok() (*string, bool) {
	if o == nil || isNil(o.AddressLine2) {
    return nil, false
	}
	return o.AddressLine2, true
}

// HasAddressLine2 returns a boolean if a field has been set.
func (o *AddressDataModel) HasAddressLine2() bool {
	if o != nil && !isNil(o.AddressLine2) {
		return true
	}

	return false
}

// SetAddressLine2 gets a reference to the given string and assigns it to the AddressLine2 field.
func (o *AddressDataModel) SetAddressLine2(v string) {
	o.AddressLine2 = &v
}

// GetCity returns the City field value if set, zero value otherwise.
func (o *AddressDataModel) GetCity() string {
	if o == nil || isNil(o.City) {
		var ret string
		return ret
	}
	return *o.City
}

// GetCityOk returns a tuple with the City field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddressDataModel) GetCityOk() (*string, bool) {
	if o == nil || isNil(o.City) {
    return nil, false
	}
	return o.City, true
}

// HasCity returns a boolean if a field has been set.
func (o *AddressDataModel) HasCity() bool {
	if o != nil && !isNil(o.City) {
		return true
	}

	return false
}

// SetCity gets a reference to the given string and assigns it to the City field.
func (o *AddressDataModel) SetCity(v string) {
	o.City = &v
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *AddressDataModel) GetCountry() string {
	if o == nil || isNil(o.Country) {
		var ret string
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddressDataModel) GetCountryOk() (*string, bool) {
	if o == nil || isNil(o.Country) {
    return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *AddressDataModel) HasCountry() bool {
	if o != nil && !isNil(o.Country) {
		return true
	}

	return false
}

// SetCountry gets a reference to the given string and assigns it to the Country field.
func (o *AddressDataModel) SetCountry(v string) {
	o.Country = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *AddressDataModel) GetState() string {
	if o == nil || isNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddressDataModel) GetStateOk() (*string, bool) {
	if o == nil || isNil(o.State) {
    return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *AddressDataModel) HasState() bool {
	if o != nil && !isNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *AddressDataModel) SetState(v string) {
	o.State = &v
}

// GetZip returns the Zip field value if set, zero value otherwise.
func (o *AddressDataModel) GetZip() string {
	if o == nil || isNil(o.Zip) {
		var ret string
		return ret
	}
	return *o.Zip
}

// GetZipOk returns a tuple with the Zip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddressDataModel) GetZipOk() (*string, bool) {
	if o == nil || isNil(o.Zip) {
    return nil, false
	}
	return o.Zip, true
}

// HasZip returns a boolean if a field has been set.
func (o *AddressDataModel) HasZip() bool {
	if o != nil && !isNil(o.Zip) {
		return true
	}

	return false
}

// SetZip gets a reference to the given string and assigns it to the Zip field.
func (o *AddressDataModel) SetZip(v string) {
	o.Zip = &v
}

func (o AddressDataModel) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.AddressLine1) {
		toSerialize["AddressLine1"] = o.AddressLine1
	}
	if !isNil(o.AddressLine2) {
		toSerialize["AddressLine2"] = o.AddressLine2
	}
	if !isNil(o.City) {
		toSerialize["City"] = o.City
	}
	if !isNil(o.Country) {
		toSerialize["Country"] = o.Country
	}
	if !isNil(o.State) {
		toSerialize["State"] = o.State
	}
	if !isNil(o.Zip) {
		toSerialize["Zip"] = o.Zip
	}
	return json.Marshal(toSerialize)
}

type NullableAddressDataModel struct {
	value *AddressDataModel
	isSet bool
}

func (v NullableAddressDataModel) Get() *AddressDataModel {
	return v.value
}

func (v *NullableAddressDataModel) Set(val *AddressDataModel) {
	v.value = val
	v.isSet = true
}

func (v NullableAddressDataModel) IsSet() bool {
	return v.isSet
}

func (v *NullableAddressDataModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddressDataModel(val *AddressDataModel) *NullableAddressDataModel {
	return &NullableAddressDataModel{value: val, isSet: true}
}

func (v NullableAddressDataModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddressDataModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


