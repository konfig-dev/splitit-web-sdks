/*
splitit-web-api-v3

Splitit's Web API

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package splitit

import (
	"encoding/json"
)

// PlanErrorResponse struct for PlanErrorResponse
type PlanErrorResponse struct {
	TraceId *string `json:"TraceId,omitempty"`
	Error *ErrorExtended `json:"Error,omitempty"`
	InstallmentPlanNumber *string `json:"InstallmentPlanNumber,omitempty"`
}

// NewPlanErrorResponse instantiates a new PlanErrorResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlanErrorResponse() *PlanErrorResponse {
	this := PlanErrorResponse{}
	return &this
}

// NewPlanErrorResponseWithDefaults instantiates a new PlanErrorResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlanErrorResponseWithDefaults() *PlanErrorResponse {
	this := PlanErrorResponse{}
	return &this
}

// GetTraceId returns the TraceId field value if set, zero value otherwise.
func (o *PlanErrorResponse) GetTraceId() string {
	if o == nil || isNil(o.TraceId) {
		var ret string
		return ret
	}
	return *o.TraceId
}

// GetTraceIdOk returns a tuple with the TraceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanErrorResponse) GetTraceIdOk() (*string, bool) {
	if o == nil || isNil(o.TraceId) {
    return nil, false
	}
	return o.TraceId, true
}

// HasTraceId returns a boolean if a field has been set.
func (o *PlanErrorResponse) HasTraceId() bool {
	if o != nil && !isNil(o.TraceId) {
		return true
	}

	return false
}

// SetTraceId gets a reference to the given string and assigns it to the TraceId field.
func (o *PlanErrorResponse) SetTraceId(v string) {
	o.TraceId = &v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *PlanErrorResponse) GetError() ErrorExtended {
	if o == nil || isNil(o.Error) {
		var ret ErrorExtended
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanErrorResponse) GetErrorOk() (*ErrorExtended, bool) {
	if o == nil || isNil(o.Error) {
    return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *PlanErrorResponse) HasError() bool {
	if o != nil && !isNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given ErrorExtended and assigns it to the Error field.
func (o *PlanErrorResponse) SetError(v ErrorExtended) {
	o.Error = &v
}

// GetInstallmentPlanNumber returns the InstallmentPlanNumber field value if set, zero value otherwise.
func (o *PlanErrorResponse) GetInstallmentPlanNumber() string {
	if o == nil || isNil(o.InstallmentPlanNumber) {
		var ret string
		return ret
	}
	return *o.InstallmentPlanNumber
}

// GetInstallmentPlanNumberOk returns a tuple with the InstallmentPlanNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanErrorResponse) GetInstallmentPlanNumberOk() (*string, bool) {
	if o == nil || isNil(o.InstallmentPlanNumber) {
    return nil, false
	}
	return o.InstallmentPlanNumber, true
}

// HasInstallmentPlanNumber returns a boolean if a field has been set.
func (o *PlanErrorResponse) HasInstallmentPlanNumber() bool {
	if o != nil && !isNil(o.InstallmentPlanNumber) {
		return true
	}

	return false
}

// SetInstallmentPlanNumber gets a reference to the given string and assigns it to the InstallmentPlanNumber field.
func (o *PlanErrorResponse) SetInstallmentPlanNumber(v string) {
	o.InstallmentPlanNumber = &v
}

func (o PlanErrorResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.TraceId) {
		toSerialize["TraceId"] = o.TraceId
	}
	if !isNil(o.Error) {
		toSerialize["Error"] = o.Error
	}
	if !isNil(o.InstallmentPlanNumber) {
		toSerialize["InstallmentPlanNumber"] = o.InstallmentPlanNumber
	}
	return json.Marshal(toSerialize)
}

type NullablePlanErrorResponse struct {
	value *PlanErrorResponse
	isSet bool
}

func (v NullablePlanErrorResponse) Get() *PlanErrorResponse {
	return v.value
}

func (v *NullablePlanErrorResponse) Set(val *PlanErrorResponse) {
	v.value = val
	v.isSet = true
}

func (v NullablePlanErrorResponse) IsSet() bool {
	return v.isSet
}

func (v *NullablePlanErrorResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlanErrorResponse(val *PlanErrorResponse) *NullablePlanErrorResponse {
	return &NullablePlanErrorResponse{value: val, isSet: true}
}

func (v NullablePlanErrorResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlanErrorResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


