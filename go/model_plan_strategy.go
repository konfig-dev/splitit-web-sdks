/*
splitit-web-api-v3

Splitit's Web API

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package splitit

import (
	"encoding/json"
	"fmt"
)

// PlanStrategy 
type PlanStrategy string

// List of PlanStrategy
const (
	PLANSTRATEGY_SECURED_PLAN PlanStrategy = "SecuredPlan"
	PLANSTRATEGY_NON_SECURED_PLAN PlanStrategy = "NonSecuredPlan"
	PLANSTRATEGY_SECURED_PLAN_CAPTURE_EXISTING_SECURITY_AUTH PlanStrategy = "SecuredPlanCaptureExistingSecurityAuth"
	PLANSTRATEGY_SECURED_PLAN3 PlanStrategy = "SecuredPlan3"
	PLANSTRATEGY_SINGLE_PAYMENT PlanStrategy = "SinglePayment"
	PLANSTRATEGY_EXTERNAL_INSTALLMENT_PROVIDER PlanStrategy = "ExternalInstallmentProvider"
	PLANSTRATEGY_SECURED_PLAN3_A PlanStrategy = "SecuredPlan3A"
	PLANSTRATEGY_SECURED_PLAN3_B PlanStrategy = "SecuredPlan3B"
	PLANSTRATEGY_SECURED_PLAN2_A PlanStrategy = "SecuredPlan2A"
	PLANSTRATEGY_SECURED_PLAN2 PlanStrategy = "SecuredPlan2"
	PLANSTRATEGY_SECURED_PLAN4 PlanStrategy = "SecuredPlan4"
	PLANSTRATEGY_SECURED_PLAN4_A PlanStrategy = "SecuredPlan4A"
)

// All allowed values of PlanStrategy enum
var AllowedPlanStrategyEnumValues = []PlanStrategy{
	"SecuredPlan",
	"NonSecuredPlan",
	"SecuredPlanCaptureExistingSecurityAuth",
	"SecuredPlan3",
	"SinglePayment",
	"ExternalInstallmentProvider",
	"SecuredPlan3A",
	"SecuredPlan3B",
	"SecuredPlan2A",
	"SecuredPlan2",
	"SecuredPlan4",
	"SecuredPlan4A",
}

func (v *PlanStrategy) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PlanStrategy(value)
	for _, existing := range AllowedPlanStrategyEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PlanStrategy", value)
}

// NewPlanStrategyFromValue returns a pointer to a valid PlanStrategy
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPlanStrategyFromValue(v string) (*PlanStrategy, error) {
	ev := PlanStrategy(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PlanStrategy: valid values are %v", v, AllowedPlanStrategyEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PlanStrategy) IsValid() bool {
	for _, existing := range AllowedPlanStrategyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PlanStrategy value
func (v PlanStrategy) Ptr() *PlanStrategy {
	return &v
}

type NullablePlanStrategy struct {
	value *PlanStrategy
	isSet bool
}

func (v NullablePlanStrategy) Get() *PlanStrategy {
	return v.value
}

func (v *NullablePlanStrategy) Set(val *PlanStrategy) {
	v.value = val
	v.isSet = true
}

func (v NullablePlanStrategy) IsSet() bool {
	return v.isSet
}

func (v *NullablePlanStrategy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlanStrategy(val *PlanStrategy) *NullablePlanStrategy {
	return &NullablePlanStrategy{value: val, isSet: true}
}

func (v NullablePlanStrategy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlanStrategy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

