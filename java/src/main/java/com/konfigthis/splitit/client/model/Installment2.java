/*
 * splitit-web-api-v3
 * Splitit's Web API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.splitit.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.splitit.client.model.CardData2;
import com.konfigthis.splitit.client.model.Money;
import com.konfigthis.splitit.client.model.ReferenceEntityBase;
import com.konfigthis.splitit.client.model.TransactionResult;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.splitit.client.JSON;

/**
 * Installment2
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Installment2 {
  public static final String SERIALIZED_NAME_INSTALLMENT_ID = "InstallmentId";
  @SerializedName(SERIALIZED_NAME_INSTALLMENT_ID)
  private String installmentId;

  public static final String SERIALIZED_NAME_INSTALLMENT_NUMBER = "InstallmentNumber";
  @SerializedName(SERIALIZED_NAME_INSTALLMENT_NUMBER)
  private Integer installmentNumber;

  public static final String SERIALIZED_NAME_AMOUNT = "Amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Money amount;

  public static final String SERIALIZED_NAME_ORIGINAL_AMOUNT = "OriginalAmount";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_AMOUNT)
  private Money originalAmount;

  public static final String SERIALIZED_NAME_REFUND_AMOUNT = "RefundAmount";
  @SerializedName(SERIALIZED_NAME_REFUND_AMOUNT)
  private Money refundAmount;

  public static final String SERIALIZED_NAME_PROCESS_DATE_TIME = "ProcessDateTime";
  @SerializedName(SERIALIZED_NAME_PROCESS_DATE_TIME)
  private OffsetDateTime processDateTime;

  public static final String SERIALIZED_NAME_IS_REFUND = "IsRefund";
  @SerializedName(SERIALIZED_NAME_IS_REFUND)
  private Boolean isRefund;

  public static final String SERIALIZED_NAME_REQUIRED_CREDIT = "RequiredCredit";
  @SerializedName(SERIALIZED_NAME_REQUIRED_CREDIT)
  private Money requiredCredit;

  public static final String SERIALIZED_NAME_CREATED_DATE_TIME = "CreatedDateTime";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE_TIME)
  private OffsetDateTime createdDateTime;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private ReferenceEntityBase status;

  public static final String SERIALIZED_NAME_TRANSACTION_RESULTS = "TransactionResults";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_RESULTS)
  private List<TransactionResult> transactionResults = null;

  public static final String SERIALIZED_NAME_CARD_DETAILS = "CardDetails";
  @SerializedName(SERIALIZED_NAME_CARD_DETAILS)
  private CardData2 cardDetails;

  public static final String SERIALIZED_NAME_RESULT = "Result";
  @SerializedName(SERIALIZED_NAME_RESULT)
  private Boolean result;

  public static final String SERIALIZED_NAME_PAYMENT_METHOD = "PaymentMethod";
  @SerializedName(SERIALIZED_NAME_PAYMENT_METHOD)
  private String paymentMethod;

  public Installment2() {
  }

  public Installment2 installmentId(String installmentId) {
    
    
    
    
    this.installmentId = installmentId;
    return this;
  }

   /**
   * Get installmentId
   * @return installmentId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getInstallmentId() {
    return installmentId;
  }


  public void setInstallmentId(String installmentId) {
    
    
    
    this.installmentId = installmentId;
  }


  public Installment2 installmentNumber(Integer installmentNumber) {
    
    
    
    
    this.installmentNumber = installmentNumber;
    return this;
  }

   /**
   * Get installmentNumber
   * @return installmentNumber
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getInstallmentNumber() {
    return installmentNumber;
  }


  public void setInstallmentNumber(Integer installmentNumber) {
    
    
    
    this.installmentNumber = installmentNumber;
  }


  public Installment2 amount(Money amount) {
    
    
    
    
    this.amount = amount;
    return this;
  }

   /**
   * Get amount
   * @return amount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Money getAmount() {
    return amount;
  }


  public void setAmount(Money amount) {
    
    
    
    this.amount = amount;
  }


  public Installment2 originalAmount(Money originalAmount) {
    
    
    
    
    this.originalAmount = originalAmount;
    return this;
  }

   /**
   * Get originalAmount
   * @return originalAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Money getOriginalAmount() {
    return originalAmount;
  }


  public void setOriginalAmount(Money originalAmount) {
    
    
    
    this.originalAmount = originalAmount;
  }


  public Installment2 refundAmount(Money refundAmount) {
    
    
    
    
    this.refundAmount = refundAmount;
    return this;
  }

   /**
   * Get refundAmount
   * @return refundAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Money getRefundAmount() {
    return refundAmount;
  }


  public void setRefundAmount(Money refundAmount) {
    
    
    
    this.refundAmount = refundAmount;
  }


  public Installment2 processDateTime(OffsetDateTime processDateTime) {
    
    
    
    
    this.processDateTime = processDateTime;
    return this;
  }

   /**
   * Get processDateTime
   * @return processDateTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getProcessDateTime() {
    return processDateTime;
  }


  public void setProcessDateTime(OffsetDateTime processDateTime) {
    
    
    
    this.processDateTime = processDateTime;
  }


  public Installment2 isRefund(Boolean isRefund) {
    
    
    
    
    this.isRefund = isRefund;
    return this;
  }

   /**
   * Get isRefund
   * @return isRefund
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Boolean getIsRefund() {
    return isRefund;
  }


  public void setIsRefund(Boolean isRefund) {
    
    
    
    this.isRefund = isRefund;
  }


  public Installment2 requiredCredit(Money requiredCredit) {
    
    
    
    
    this.requiredCredit = requiredCredit;
    return this;
  }

   /**
   * Get requiredCredit
   * @return requiredCredit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Money getRequiredCredit() {
    return requiredCredit;
  }


  public void setRequiredCredit(Money requiredCredit) {
    
    
    
    this.requiredCredit = requiredCredit;
  }


  public Installment2 createdDateTime(OffsetDateTime createdDateTime) {
    
    
    
    
    this.createdDateTime = createdDateTime;
    return this;
  }

   /**
   * Get createdDateTime
   * @return createdDateTime
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public OffsetDateTime getCreatedDateTime() {
    return createdDateTime;
  }


  public void setCreatedDateTime(OffsetDateTime createdDateTime) {
    
    
    
    this.createdDateTime = createdDateTime;
  }


  public Installment2 status(ReferenceEntityBase status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ReferenceEntityBase getStatus() {
    return status;
  }


  public void setStatus(ReferenceEntityBase status) {
    
    
    
    this.status = status;
  }


  public Installment2 transactionResults(List<TransactionResult> transactionResults) {
    
    
    
    
    this.transactionResults = transactionResults;
    return this;
  }

  public Installment2 addTransactionResultsItem(TransactionResult transactionResultsItem) {
    if (this.transactionResults == null) {
      this.transactionResults = new ArrayList<>();
    }
    this.transactionResults.add(transactionResultsItem);
    return this;
  }

   /**
   * Get transactionResults
   * @return transactionResults
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<TransactionResult> getTransactionResults() {
    return transactionResults;
  }


  public void setTransactionResults(List<TransactionResult> transactionResults) {
    
    
    
    this.transactionResults = transactionResults;
  }


  public Installment2 cardDetails(CardData2 cardDetails) {
    
    
    
    
    this.cardDetails = cardDetails;
    return this;
  }

   /**
   * Get cardDetails
   * @return cardDetails
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CardData2 getCardDetails() {
    return cardDetails;
  }


  public void setCardDetails(CardData2 cardDetails) {
    
    
    
    this.cardDetails = cardDetails;
  }


  public Installment2 result(Boolean result) {
    
    
    
    
    this.result = result;
    return this;
  }

   /**
   * Get result
   * @return result
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getResult() {
    return result;
  }


  public void setResult(Boolean result) {
    
    
    
    this.result = result;
  }


  public Installment2 paymentMethod(String paymentMethod) {
    
    
    
    
    this.paymentMethod = paymentMethod;
    return this;
  }

   /**
   * Get paymentMethod
   * @return paymentMethod
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPaymentMethod() {
    return paymentMethod;
  }


  public void setPaymentMethod(String paymentMethod) {
    
    
    
    this.paymentMethod = paymentMethod;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Installment2 instance itself
   */
  public Installment2 putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Installment2 installment2 = (Installment2) o;
    return Objects.equals(this.installmentId, installment2.installmentId) &&
        Objects.equals(this.installmentNumber, installment2.installmentNumber) &&
        Objects.equals(this.amount, installment2.amount) &&
        Objects.equals(this.originalAmount, installment2.originalAmount) &&
        Objects.equals(this.refundAmount, installment2.refundAmount) &&
        Objects.equals(this.processDateTime, installment2.processDateTime) &&
        Objects.equals(this.isRefund, installment2.isRefund) &&
        Objects.equals(this.requiredCredit, installment2.requiredCredit) &&
        Objects.equals(this.createdDateTime, installment2.createdDateTime) &&
        Objects.equals(this.status, installment2.status) &&
        Objects.equals(this.transactionResults, installment2.transactionResults) &&
        Objects.equals(this.cardDetails, installment2.cardDetails) &&
        Objects.equals(this.result, installment2.result) &&
        Objects.equals(this.paymentMethod, installment2.paymentMethod)&&
        Objects.equals(this.additionalProperties, installment2.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(installmentId, installmentNumber, amount, originalAmount, refundAmount, processDateTime, isRefund, requiredCredit, createdDateTime, status, transactionResults, cardDetails, result, paymentMethod, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Installment2 {\n");
    sb.append("    installmentId: ").append(toIndentedString(installmentId)).append("\n");
    sb.append("    installmentNumber: ").append(toIndentedString(installmentNumber)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    originalAmount: ").append(toIndentedString(originalAmount)).append("\n");
    sb.append("    refundAmount: ").append(toIndentedString(refundAmount)).append("\n");
    sb.append("    processDateTime: ").append(toIndentedString(processDateTime)).append("\n");
    sb.append("    isRefund: ").append(toIndentedString(isRefund)).append("\n");
    sb.append("    requiredCredit: ").append(toIndentedString(requiredCredit)).append("\n");
    sb.append("    createdDateTime: ").append(toIndentedString(createdDateTime)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    transactionResults: ").append(toIndentedString(transactionResults)).append("\n");
    sb.append("    cardDetails: ").append(toIndentedString(cardDetails)).append("\n");
    sb.append("    result: ").append(toIndentedString(result)).append("\n");
    sb.append("    paymentMethod: ").append(toIndentedString(paymentMethod)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("InstallmentId");
    openapiFields.add("InstallmentNumber");
    openapiFields.add("Amount");
    openapiFields.add("OriginalAmount");
    openapiFields.add("RefundAmount");
    openapiFields.add("ProcessDateTime");
    openapiFields.add("IsRefund");
    openapiFields.add("RequiredCredit");
    openapiFields.add("CreatedDateTime");
    openapiFields.add("Status");
    openapiFields.add("TransactionResults");
    openapiFields.add("CardDetails");
    openapiFields.add("Result");
    openapiFields.add("PaymentMethod");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("InstallmentNumber");
    openapiRequiredFields.add("IsRefund");
    openapiRequiredFields.add("CreatedDateTime");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Installment2
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Installment2.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Installment2 is not found in the empty JSON string", Installment2.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Installment2.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("InstallmentId") != null && !jsonObj.get("InstallmentId").isJsonNull()) && !jsonObj.get("InstallmentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `InstallmentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("InstallmentId").toString()));
      }
      // validate the optional field `Amount`
      if (jsonObj.get("Amount") != null && !jsonObj.get("Amount").isJsonNull()) {
        Money.validateJsonObject(jsonObj.getAsJsonObject("Amount"));
      }
      // validate the optional field `OriginalAmount`
      if (jsonObj.get("OriginalAmount") != null && !jsonObj.get("OriginalAmount").isJsonNull()) {
        Money.validateJsonObject(jsonObj.getAsJsonObject("OriginalAmount"));
      }
      // validate the optional field `RefundAmount`
      if (jsonObj.get("RefundAmount") != null && !jsonObj.get("RefundAmount").isJsonNull()) {
        Money.validateJsonObject(jsonObj.getAsJsonObject("RefundAmount"));
      }
      // validate the optional field `RequiredCredit`
      if (jsonObj.get("RequiredCredit") != null && !jsonObj.get("RequiredCredit").isJsonNull()) {
        Money.validateJsonObject(jsonObj.getAsJsonObject("RequiredCredit"));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        ReferenceEntityBase.validateJsonObject(jsonObj.getAsJsonObject("Status"));
      }
      if (jsonObj.get("TransactionResults") != null && !jsonObj.get("TransactionResults").isJsonNull()) {
        JsonArray jsonArraytransactionResults = jsonObj.getAsJsonArray("TransactionResults");
        if (jsonArraytransactionResults != null) {
          // ensure the json data is an array
          if (!jsonObj.get("TransactionResults").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `TransactionResults` to be an array in the JSON string but got `%s`", jsonObj.get("TransactionResults").toString()));
          }

          // validate the optional field `TransactionResults` (array)
          for (int i = 0; i < jsonArraytransactionResults.size(); i++) {
            TransactionResult.validateJsonObject(jsonArraytransactionResults.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `CardDetails`
      if (jsonObj.get("CardDetails") != null && !jsonObj.get("CardDetails").isJsonNull()) {
        CardData2.validateJsonObject(jsonObj.getAsJsonObject("CardDetails"));
      }
      if ((jsonObj.get("PaymentMethod") != null && !jsonObj.get("PaymentMethod").isJsonNull()) && !jsonObj.get("PaymentMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PaymentMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PaymentMethod").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Installment2.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Installment2' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Installment2> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Installment2.class));

       return (TypeAdapter<T>) new TypeAdapter<Installment2>() {
           @Override
           public void write(JsonWriter out, Installment2 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Installment2 read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Installment2 instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Installment2 given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Installment2
  * @throws IOException if the JSON string is invalid with respect to Installment2
  */
  public static Installment2 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Installment2.class);
  }

 /**
  * Convert an instance of Installment2 to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

