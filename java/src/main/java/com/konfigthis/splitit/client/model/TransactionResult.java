/*
 * splitit-web-api-v3
 * Splitit's Web API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.splitit.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.splitit.client.model.CardResult;
import com.konfigthis.splitit.client.model.DisputeStatus;
import com.konfigthis.splitit.client.model.ReferenceEntityBase;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.splitit.client.JSON;

/**
 * TransactionResult
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class TransactionResult {
  public static final String SERIALIZED_NAME_GATEWAY_TRANSACTION_ID = "GatewayTransactionId";
  @SerializedName(SERIALIZED_NAME_GATEWAY_TRANSACTION_ID)
  private String gatewayTransactionId;

  public static final String SERIALIZED_NAME_SPLITIT_TRANSACTION_ID = "SplititTransactionId";
  @SerializedName(SERIALIZED_NAME_SPLITIT_TRANSACTION_ID)
  private Long splititTransactionId;

  public static final String SERIALIZED_NAME_SPLITIT_GATEWAY_TRANSACTION_ID = "SplititGatewayTransactionId";
  @SerializedName(SERIALIZED_NAME_SPLITIT_GATEWAY_TRANSACTION_ID)
  private String splititGatewayTransactionId;

  public static final String SERIALIZED_NAME_GATEWAY_RESULT_CODE = "GatewayResultCode";
  @SerializedName(SERIALIZED_NAME_GATEWAY_RESULT_CODE)
  private String gatewayResultCode;

  public static final String SERIALIZED_NAME_GATEWAY_RESULT_MESSAGE = "GatewayResultMessage";
  @SerializedName(SERIALIZED_NAME_GATEWAY_RESULT_MESSAGE)
  private String gatewayResultMessage;

  public static final String SERIALIZED_NAME_OPERATION_TYPE = "OperationType";
  @SerializedName(SERIALIZED_NAME_OPERATION_TYPE)
  private ReferenceEntityBase operationType;

  public static final String SERIALIZED_NAME_GATEWAY_RESULT = "GatewayResult";
  @SerializedName(SERIALIZED_NAME_GATEWAY_RESULT)
  private Boolean gatewayResult;

  public static final String SERIALIZED_NAME_GATEWAY_TRANSACTION_DATE = "GatewayTransactionDate";
  @SerializedName(SERIALIZED_NAME_GATEWAY_TRANSACTION_DATE)
  private OffsetDateTime gatewayTransactionDate;

  public static final String SERIALIZED_NAME_IS_CHARGEBACK = "IsChargeback";
  @SerializedName(SERIALIZED_NAME_IS_CHARGEBACK)
  private Boolean isChargeback;

  public static final String SERIALIZED_NAME_AV_S_RESULT = "AVSResult";
  @SerializedName(SERIALIZED_NAME_AV_S_RESULT)
  private CardResult avSResult;

  public static final String SERIALIZED_NAME_CV_C_RESULT = "CVCResult";
  @SerializedName(SERIALIZED_NAME_CV_C_RESULT)
  private CardResult cvCResult;

  public static final String SERIALIZED_NAME_IS_IN_DISPUTE = "IsInDispute";
  @SerializedName(SERIALIZED_NAME_IS_IN_DISPUTE)
  private Boolean isInDispute;

  public static final String SERIALIZED_NAME_DISPUTE_STATUS = "DisputeStatus";
  @SerializedName(SERIALIZED_NAME_DISPUTE_STATUS)
  private DisputeStatus disputeStatus;

  public TransactionResult() {
  }

  public TransactionResult gatewayTransactionId(String gatewayTransactionId) {
    
    
    
    
    this.gatewayTransactionId = gatewayTransactionId;
    return this;
  }

   /**
   * Get gatewayTransactionId
   * @return gatewayTransactionId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getGatewayTransactionId() {
    return gatewayTransactionId;
  }


  public void setGatewayTransactionId(String gatewayTransactionId) {
    
    
    
    this.gatewayTransactionId = gatewayTransactionId;
  }


  public TransactionResult splititTransactionId(Long splititTransactionId) {
    
    
    
    
    this.splititTransactionId = splititTransactionId;
    return this;
  }

   /**
   * Get splititTransactionId
   * @return splititTransactionId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Long getSplititTransactionId() {
    return splititTransactionId;
  }


  public void setSplititTransactionId(Long splititTransactionId) {
    
    
    
    this.splititTransactionId = splititTransactionId;
  }


  public TransactionResult splititGatewayTransactionId(String splititGatewayTransactionId) {
    
    
    
    
    this.splititGatewayTransactionId = splititGatewayTransactionId;
    return this;
  }

   /**
   * Get splititGatewayTransactionId
   * @return splititGatewayTransactionId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSplititGatewayTransactionId() {
    return splititGatewayTransactionId;
  }


  public void setSplititGatewayTransactionId(String splititGatewayTransactionId) {
    
    
    
    this.splititGatewayTransactionId = splititGatewayTransactionId;
  }


  public TransactionResult gatewayResultCode(String gatewayResultCode) {
    
    
    
    
    this.gatewayResultCode = gatewayResultCode;
    return this;
  }

   /**
   * Get gatewayResultCode
   * @return gatewayResultCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getGatewayResultCode() {
    return gatewayResultCode;
  }


  public void setGatewayResultCode(String gatewayResultCode) {
    
    
    
    this.gatewayResultCode = gatewayResultCode;
  }


  public TransactionResult gatewayResultMessage(String gatewayResultMessage) {
    
    
    
    
    this.gatewayResultMessage = gatewayResultMessage;
    return this;
  }

   /**
   * Get gatewayResultMessage
   * @return gatewayResultMessage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getGatewayResultMessage() {
    return gatewayResultMessage;
  }


  public void setGatewayResultMessage(String gatewayResultMessage) {
    
    
    
    this.gatewayResultMessage = gatewayResultMessage;
  }


  public TransactionResult operationType(ReferenceEntityBase operationType) {
    
    
    
    
    this.operationType = operationType;
    return this;
  }

   /**
   * Get operationType
   * @return operationType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ReferenceEntityBase getOperationType() {
    return operationType;
  }


  public void setOperationType(ReferenceEntityBase operationType) {
    
    
    
    this.operationType = operationType;
  }


  public TransactionResult gatewayResult(Boolean gatewayResult) {
    
    
    
    
    this.gatewayResult = gatewayResult;
    return this;
  }

   /**
   * Get gatewayResult
   * @return gatewayResult
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Boolean getGatewayResult() {
    return gatewayResult;
  }


  public void setGatewayResult(Boolean gatewayResult) {
    
    
    
    this.gatewayResult = gatewayResult;
  }


  public TransactionResult gatewayTransactionDate(OffsetDateTime gatewayTransactionDate) {
    
    
    
    
    this.gatewayTransactionDate = gatewayTransactionDate;
    return this;
  }

   /**
   * Get gatewayTransactionDate
   * @return gatewayTransactionDate
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public OffsetDateTime getGatewayTransactionDate() {
    return gatewayTransactionDate;
  }


  public void setGatewayTransactionDate(OffsetDateTime gatewayTransactionDate) {
    
    
    
    this.gatewayTransactionDate = gatewayTransactionDate;
  }


  public TransactionResult isChargeback(Boolean isChargeback) {
    
    
    
    
    this.isChargeback = isChargeback;
    return this;
  }

   /**
   * Get isChargeback
   * @return isChargeback
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Boolean getIsChargeback() {
    return isChargeback;
  }


  public void setIsChargeback(Boolean isChargeback) {
    
    
    
    this.isChargeback = isChargeback;
  }


  public TransactionResult avSResult(CardResult avSResult) {
    
    
    
    
    this.avSResult = avSResult;
    return this;
  }

   /**
   * Get avSResult
   * @return avSResult
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CardResult getAvSResult() {
    return avSResult;
  }


  public void setAvSResult(CardResult avSResult) {
    
    
    
    this.avSResult = avSResult;
  }


  public TransactionResult cvCResult(CardResult cvCResult) {
    
    
    
    
    this.cvCResult = cvCResult;
    return this;
  }

   /**
   * Get cvCResult
   * @return cvCResult
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CardResult getCvCResult() {
    return cvCResult;
  }


  public void setCvCResult(CardResult cvCResult) {
    
    
    
    this.cvCResult = cvCResult;
  }


  public TransactionResult isInDispute(Boolean isInDispute) {
    
    
    
    
    this.isInDispute = isInDispute;
    return this;
  }

   /**
   * Get isInDispute
   * @return isInDispute
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getIsInDispute() {
    return isInDispute;
  }


  public void setIsInDispute(Boolean isInDispute) {
    
    
    
    this.isInDispute = isInDispute;
  }


  public TransactionResult disputeStatus(DisputeStatus disputeStatus) {
    
    
    
    
    this.disputeStatus = disputeStatus;
    return this;
  }

   /**
   * Get disputeStatus
   * @return disputeStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public DisputeStatus getDisputeStatus() {
    return disputeStatus;
  }


  public void setDisputeStatus(DisputeStatus disputeStatus) {
    
    
    
    this.disputeStatus = disputeStatus;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the TransactionResult instance itself
   */
  public TransactionResult putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransactionResult transactionResult = (TransactionResult) o;
    return Objects.equals(this.gatewayTransactionId, transactionResult.gatewayTransactionId) &&
        Objects.equals(this.splititTransactionId, transactionResult.splititTransactionId) &&
        Objects.equals(this.splititGatewayTransactionId, transactionResult.splititGatewayTransactionId) &&
        Objects.equals(this.gatewayResultCode, transactionResult.gatewayResultCode) &&
        Objects.equals(this.gatewayResultMessage, transactionResult.gatewayResultMessage) &&
        Objects.equals(this.operationType, transactionResult.operationType) &&
        Objects.equals(this.gatewayResult, transactionResult.gatewayResult) &&
        Objects.equals(this.gatewayTransactionDate, transactionResult.gatewayTransactionDate) &&
        Objects.equals(this.isChargeback, transactionResult.isChargeback) &&
        Objects.equals(this.avSResult, transactionResult.avSResult) &&
        Objects.equals(this.cvCResult, transactionResult.cvCResult) &&
        Objects.equals(this.isInDispute, transactionResult.isInDispute) &&
        Objects.equals(this.disputeStatus, transactionResult.disputeStatus)&&
        Objects.equals(this.additionalProperties, transactionResult.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(gatewayTransactionId, splititTransactionId, splititGatewayTransactionId, gatewayResultCode, gatewayResultMessage, operationType, gatewayResult, gatewayTransactionDate, isChargeback, avSResult, cvCResult, isInDispute, disputeStatus, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransactionResult {\n");
    sb.append("    gatewayTransactionId: ").append(toIndentedString(gatewayTransactionId)).append("\n");
    sb.append("    splititTransactionId: ").append(toIndentedString(splititTransactionId)).append("\n");
    sb.append("    splititGatewayTransactionId: ").append(toIndentedString(splititGatewayTransactionId)).append("\n");
    sb.append("    gatewayResultCode: ").append(toIndentedString(gatewayResultCode)).append("\n");
    sb.append("    gatewayResultMessage: ").append(toIndentedString(gatewayResultMessage)).append("\n");
    sb.append("    operationType: ").append(toIndentedString(operationType)).append("\n");
    sb.append("    gatewayResult: ").append(toIndentedString(gatewayResult)).append("\n");
    sb.append("    gatewayTransactionDate: ").append(toIndentedString(gatewayTransactionDate)).append("\n");
    sb.append("    isChargeback: ").append(toIndentedString(isChargeback)).append("\n");
    sb.append("    avSResult: ").append(toIndentedString(avSResult)).append("\n");
    sb.append("    cvCResult: ").append(toIndentedString(cvCResult)).append("\n");
    sb.append("    isInDispute: ").append(toIndentedString(isInDispute)).append("\n");
    sb.append("    disputeStatus: ").append(toIndentedString(disputeStatus)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("GatewayTransactionId");
    openapiFields.add("SplititTransactionId");
    openapiFields.add("SplititGatewayTransactionId");
    openapiFields.add("GatewayResultCode");
    openapiFields.add("GatewayResultMessage");
    openapiFields.add("OperationType");
    openapiFields.add("GatewayResult");
    openapiFields.add("GatewayTransactionDate");
    openapiFields.add("IsChargeback");
    openapiFields.add("AVSResult");
    openapiFields.add("CVCResult");
    openapiFields.add("IsInDispute");
    openapiFields.add("DisputeStatus");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("SplititTransactionId");
    openapiRequiredFields.add("GatewayResult");
    openapiRequiredFields.add("GatewayTransactionDate");
    openapiRequiredFields.add("IsChargeback");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TransactionResult
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!TransactionResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TransactionResult is not found in the empty JSON string", TransactionResult.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TransactionResult.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("GatewayTransactionId") != null && !jsonObj.get("GatewayTransactionId").isJsonNull()) && !jsonObj.get("GatewayTransactionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `GatewayTransactionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("GatewayTransactionId").toString()));
      }
      if ((jsonObj.get("SplititGatewayTransactionId") != null && !jsonObj.get("SplititGatewayTransactionId").isJsonNull()) && !jsonObj.get("SplititGatewayTransactionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SplititGatewayTransactionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SplititGatewayTransactionId").toString()));
      }
      if ((jsonObj.get("GatewayResultCode") != null && !jsonObj.get("GatewayResultCode").isJsonNull()) && !jsonObj.get("GatewayResultCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `GatewayResultCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("GatewayResultCode").toString()));
      }
      if ((jsonObj.get("GatewayResultMessage") != null && !jsonObj.get("GatewayResultMessage").isJsonNull()) && !jsonObj.get("GatewayResultMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `GatewayResultMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("GatewayResultMessage").toString()));
      }
      // validate the optional field `OperationType`
      if (jsonObj.get("OperationType") != null && !jsonObj.get("OperationType").isJsonNull()) {
        ReferenceEntityBase.validateJsonObject(jsonObj.getAsJsonObject("OperationType"));
      }
      // validate the optional field `AVSResult`
      if (jsonObj.get("AVSResult") != null && !jsonObj.get("AVSResult").isJsonNull()) {
        CardResult.validateJsonObject(jsonObj.getAsJsonObject("AVSResult"));
      }
      // validate the optional field `CVCResult`
      if (jsonObj.get("CVCResult") != null && !jsonObj.get("CVCResult").isJsonNull()) {
        CardResult.validateJsonObject(jsonObj.getAsJsonObject("CVCResult"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TransactionResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TransactionResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TransactionResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TransactionResult.class));

       return (TypeAdapter<T>) new TypeAdapter<TransactionResult>() {
           @Override
           public void write(JsonWriter out, TransactionResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public TransactionResult read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             TransactionResult instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TransactionResult given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TransactionResult
  * @throws IOException if the JSON string is invalid with respect to TransactionResult
  */
  public static TransactionResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TransactionResult.class);
  }

 /**
  * Convert an instance of TransactionResult to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

