/*
 * splitit-web-api-v3
 * Splitit's API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.splitit.client.api;

import com.konfigthis.splitit.client.ApiCallback;
import com.konfigthis.splitit.client.ApiClient;
import com.konfigthis.splitit.client.ApiException;
import com.konfigthis.splitit.client.ApiResponse;
import com.konfigthis.splitit.client.Configuration;
import com.konfigthis.splitit.client.Pair;
import com.konfigthis.splitit.client.ProgressRequestBody;
import com.konfigthis.splitit.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.splitit.client.model.FailedResponse;
import com.konfigthis.splitit.client.model.InstallmentPlanCancelResponse;
import com.konfigthis.splitit.client.model.InstallmentPlanCreateRequest;
import com.konfigthis.splitit.client.model.InstallmentPlanGetResponse;
import com.konfigthis.splitit.client.model.InstallmentPlanModel;
import com.konfigthis.splitit.client.model.InstallmentPlanRefundRequest;
import com.konfigthis.splitit.client.model.InstallmentPlanRefundResponse;
import com.konfigthis.splitit.client.model.InstallmentPlanUpdateRequestByIdentifier;
import com.konfigthis.splitit.client.model.InstallmentPlanUpdateResponse;
import com.konfigthis.splitit.client.model.PlanErrorResponse;
import com.konfigthis.splitit.client.model.UpdateOrderRequest;
import com.konfigthis.splitit.client.model.VerifyAuthorizationResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class InstallmentPlanApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public InstallmentPlanApi() {
        this(Configuration.getDefaultApiClient());
    }

    public InstallmentPlanApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for cancel
     * @param installmentPlanNumber  (required)
     * @param xSplititIdempotencyKey  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelCall(String installmentPlanNumber, String xSplititIdempotencyKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/installmentplans/{installmentPlanNumber}/cancel"
            .replace("{" + "installmentPlanNumber" + "}", localVarApiClient.escapeString(installmentPlanNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xSplititIdempotencyKey != null) {
            localVarHeaderParams.put("X-Splitit-IdempotencyKey", localVarApiClient.parameterToString(xSplititIdempotencyKey));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelValidateBeforeCall(String installmentPlanNumber, String xSplititIdempotencyKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'installmentPlanNumber' is set
        if (installmentPlanNumber == null) {
            throw new ApiException("Missing the required parameter 'installmentPlanNumber' when calling cancel(Async)");
        }

        // verify the required parameter 'xSplititIdempotencyKey' is set
        if (xSplititIdempotencyKey == null) {
            throw new ApiException("Missing the required parameter 'xSplititIdempotencyKey' when calling cancel(Async)");
        }

        return cancelCall(installmentPlanNumber, xSplititIdempotencyKey, _callback);

    }

    /**
     * 
     * 
     * @param installmentPlanNumber  (required)
     * @param xSplititIdempotencyKey  (required)
     * @return InstallmentPlanCancelResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public InstallmentPlanCancelResponse cancel(String installmentPlanNumber, String xSplititIdempotencyKey) throws ApiException {
        ApiResponse<InstallmentPlanCancelResponse> localVarResp = cancelWithHttpInfo(installmentPlanNumber, xSplititIdempotencyKey);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param installmentPlanNumber  (required)
     * @param xSplititIdempotencyKey  (required)
     * @return ApiResponse&lt;InstallmentPlanCancelResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InstallmentPlanCancelResponse> cancelWithHttpInfo(String installmentPlanNumber, String xSplititIdempotencyKey) throws ApiException {
        okhttp3.Call localVarCall = cancelValidateBeforeCall(installmentPlanNumber, xSplititIdempotencyKey, null);
        Type localVarReturnType = new TypeToken<InstallmentPlanCancelResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param installmentPlanNumber  (required)
     * @param xSplititIdempotencyKey  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelAsync(String installmentPlanNumber, String xSplititIdempotencyKey, final ApiCallback<InstallmentPlanCancelResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = cancelValidateBeforeCall(installmentPlanNumber, xSplititIdempotencyKey, _callback);
        Type localVarReturnType = new TypeToken<InstallmentPlanCancelResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for get
     * @param installmentPlanNumber  (required)
     * @param xSplititIdempotencyKey  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCall(String installmentPlanNumber, String xSplititIdempotencyKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/installmentplans/{installmentPlanNumber}"
            .replace("{" + "installmentPlanNumber" + "}", localVarApiClient.escapeString(installmentPlanNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xSplititIdempotencyKey != null) {
            localVarHeaderParams.put("X-Splitit-IdempotencyKey", localVarApiClient.parameterToString(xSplititIdempotencyKey));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getValidateBeforeCall(String installmentPlanNumber, String xSplititIdempotencyKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'installmentPlanNumber' is set
        if (installmentPlanNumber == null) {
            throw new ApiException("Missing the required parameter 'installmentPlanNumber' when calling get(Async)");
        }

        // verify the required parameter 'xSplititIdempotencyKey' is set
        if (xSplititIdempotencyKey == null) {
            throw new ApiException("Missing the required parameter 'xSplititIdempotencyKey' when calling get(Async)");
        }

        return getCall(installmentPlanNumber, xSplititIdempotencyKey, _callback);

    }

    /**
     * 
     * 
     * @param installmentPlanNumber  (required)
     * @param xSplititIdempotencyKey  (required)
     * @return InstallmentPlanModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public InstallmentPlanModel get(String installmentPlanNumber, String xSplititIdempotencyKey) throws ApiException {
        ApiResponse<InstallmentPlanModel> localVarResp = getWithHttpInfo(installmentPlanNumber, xSplititIdempotencyKey);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param installmentPlanNumber  (required)
     * @param xSplititIdempotencyKey  (required)
     * @return ApiResponse&lt;InstallmentPlanModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InstallmentPlanModel> getWithHttpInfo(String installmentPlanNumber, String xSplititIdempotencyKey) throws ApiException {
        okhttp3.Call localVarCall = getValidateBeforeCall(installmentPlanNumber, xSplititIdempotencyKey, null);
        Type localVarReturnType = new TypeToken<InstallmentPlanModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param installmentPlanNumber  (required)
     * @param xSplititIdempotencyKey  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAsync(String installmentPlanNumber, String xSplititIdempotencyKey, final ApiCallback<InstallmentPlanModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = getValidateBeforeCall(installmentPlanNumber, xSplititIdempotencyKey, _callback);
        Type localVarReturnType = new TypeToken<InstallmentPlanModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for post
     * @param xSplititIdempotencyKey  (required)
     * @param installmentPlanCreateRequest  (required)
     * @param xSplititTestMode  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postCall(String xSplititIdempotencyKey, InstallmentPlanCreateRequest installmentPlanCreateRequest, String xSplititTestMode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = installmentPlanCreateRequest;

        // create path and map variables
        String localVarPath = "/api/installmentplans";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xSplititTestMode != null) {
            localVarHeaderParams.put("X-Splitit-TestMode", localVarApiClient.parameterToString(xSplititTestMode));
        }

        if (xSplititIdempotencyKey != null) {
            localVarHeaderParams.put("X-Splitit-IdempotencyKey", localVarApiClient.parameterToString(xSplititIdempotencyKey));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postValidateBeforeCall(String xSplititIdempotencyKey, InstallmentPlanCreateRequest installmentPlanCreateRequest, String xSplititTestMode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xSplititIdempotencyKey' is set
        if (xSplititIdempotencyKey == null) {
            throw new ApiException("Missing the required parameter 'xSplititIdempotencyKey' when calling post(Async)");
        }

        // verify the required parameter 'installmentPlanCreateRequest' is set
        if (installmentPlanCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'installmentPlanCreateRequest' when calling post(Async)");
        }

        return postCall(xSplititIdempotencyKey, installmentPlanCreateRequest, xSplititTestMode, _callback);

    }

    /**
     * 
     * 
     * @param xSplititIdempotencyKey  (required)
     * @param installmentPlanCreateRequest  (required)
     * @param xSplititTestMode  (optional)
     * @return InstallmentPlanModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public InstallmentPlanModel post(String xSplititIdempotencyKey, InstallmentPlanCreateRequest installmentPlanCreateRequest, String xSplititTestMode) throws ApiException {
        ApiResponse<InstallmentPlanModel> localVarResp = postWithHttpInfo(xSplititIdempotencyKey, installmentPlanCreateRequest, xSplititTestMode);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param xSplititIdempotencyKey  (required)
     * @param installmentPlanCreateRequest  (required)
     * @param xSplititTestMode  (optional)
     * @return ApiResponse&lt;InstallmentPlanModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InstallmentPlanModel> postWithHttpInfo(String xSplititIdempotencyKey, InstallmentPlanCreateRequest installmentPlanCreateRequest, String xSplititTestMode) throws ApiException {
        okhttp3.Call localVarCall = postValidateBeforeCall(xSplititIdempotencyKey, installmentPlanCreateRequest, xSplititTestMode, null);
        Type localVarReturnType = new TypeToken<InstallmentPlanModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param xSplititIdempotencyKey  (required)
     * @param installmentPlanCreateRequest  (required)
     * @param xSplititTestMode  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postAsync(String xSplititIdempotencyKey, InstallmentPlanCreateRequest installmentPlanCreateRequest, String xSplititTestMode, final ApiCallback<InstallmentPlanModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = postValidateBeforeCall(xSplititIdempotencyKey, installmentPlanCreateRequest, xSplititTestMode, _callback);
        Type localVarReturnType = new TypeToken<InstallmentPlanModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for refund
     * @param installmentPlanNumber  (required)
     * @param xSplititIdempotencyKey  (required)
     * @param installmentPlanRefundRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call refundCall(String installmentPlanNumber, String xSplititIdempotencyKey, InstallmentPlanRefundRequest installmentPlanRefundRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = installmentPlanRefundRequest;

        // create path and map variables
        String localVarPath = "/api/installmentplans/{installmentPlanNumber}/refund"
            .replace("{" + "installmentPlanNumber" + "}", localVarApiClient.escapeString(installmentPlanNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xSplititIdempotencyKey != null) {
            localVarHeaderParams.put("X-Splitit-IdempotencyKey", localVarApiClient.parameterToString(xSplititIdempotencyKey));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call refundValidateBeforeCall(String installmentPlanNumber, String xSplititIdempotencyKey, InstallmentPlanRefundRequest installmentPlanRefundRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'installmentPlanNumber' is set
        if (installmentPlanNumber == null) {
            throw new ApiException("Missing the required parameter 'installmentPlanNumber' when calling refund(Async)");
        }

        // verify the required parameter 'xSplititIdempotencyKey' is set
        if (xSplititIdempotencyKey == null) {
            throw new ApiException("Missing the required parameter 'xSplititIdempotencyKey' when calling refund(Async)");
        }

        // verify the required parameter 'installmentPlanRefundRequest' is set
        if (installmentPlanRefundRequest == null) {
            throw new ApiException("Missing the required parameter 'installmentPlanRefundRequest' when calling refund(Async)");
        }

        return refundCall(installmentPlanNumber, xSplititIdempotencyKey, installmentPlanRefundRequest, _callback);

    }

    /**
     * 
     * 
     * @param installmentPlanNumber  (required)
     * @param xSplititIdempotencyKey  (required)
     * @param installmentPlanRefundRequest  (required)
     * @return InstallmentPlanRefundResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public InstallmentPlanRefundResponse refund(String installmentPlanNumber, String xSplititIdempotencyKey, InstallmentPlanRefundRequest installmentPlanRefundRequest) throws ApiException {
        ApiResponse<InstallmentPlanRefundResponse> localVarResp = refundWithHttpInfo(installmentPlanNumber, xSplititIdempotencyKey, installmentPlanRefundRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param installmentPlanNumber  (required)
     * @param xSplititIdempotencyKey  (required)
     * @param installmentPlanRefundRequest  (required)
     * @return ApiResponse&lt;InstallmentPlanRefundResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InstallmentPlanRefundResponse> refundWithHttpInfo(String installmentPlanNumber, String xSplititIdempotencyKey, InstallmentPlanRefundRequest installmentPlanRefundRequest) throws ApiException {
        okhttp3.Call localVarCall = refundValidateBeforeCall(installmentPlanNumber, xSplititIdempotencyKey, installmentPlanRefundRequest, null);
        Type localVarReturnType = new TypeToken<InstallmentPlanRefundResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param installmentPlanNumber  (required)
     * @param xSplititIdempotencyKey  (required)
     * @param installmentPlanRefundRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call refundAsync(String installmentPlanNumber, String xSplititIdempotencyKey, InstallmentPlanRefundRequest installmentPlanRefundRequest, final ApiCallback<InstallmentPlanRefundResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = refundValidateBeforeCall(installmentPlanNumber, xSplititIdempotencyKey, installmentPlanRefundRequest, _callback);
        Type localVarReturnType = new TypeToken<InstallmentPlanRefundResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for search
     * @param xSplititIdempotencyKey  (required)
     * @param installmentPlanNumber  (optional)
     * @param refOrderNumber  (optional)
     * @param extendedParams  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchCall(String xSplititIdempotencyKey, String installmentPlanNumber, String refOrderNumber, Map<String, String> extendedParams, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/installmentplans/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (installmentPlanNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("installmentPlanNumber", installmentPlanNumber));
        }

        if (refOrderNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("refOrderNumber", refOrderNumber));
        }

        if (extendedParams != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("extendedParams", extendedParams));
        }

        if (xSplititIdempotencyKey != null) {
            localVarHeaderParams.put("X-Splitit-IdempotencyKey", localVarApiClient.parameterToString(xSplititIdempotencyKey));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchValidateBeforeCall(String xSplititIdempotencyKey, String installmentPlanNumber, String refOrderNumber, Map<String, String> extendedParams, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xSplititIdempotencyKey' is set
        if (xSplititIdempotencyKey == null) {
            throw new ApiException("Missing the required parameter 'xSplititIdempotencyKey' when calling search(Async)");
        }

        return searchCall(xSplititIdempotencyKey, installmentPlanNumber, refOrderNumber, extendedParams, _callback);

    }

    /**
     * 
     * 
     * @param xSplititIdempotencyKey  (required)
     * @param installmentPlanNumber  (optional)
     * @param refOrderNumber  (optional)
     * @param extendedParams  (optional)
     * @return InstallmentPlanGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public InstallmentPlanGetResponse search(String xSplititIdempotencyKey, String installmentPlanNumber, String refOrderNumber, Map<String, String> extendedParams) throws ApiException {
        ApiResponse<InstallmentPlanGetResponse> localVarResp = searchWithHttpInfo(xSplititIdempotencyKey, installmentPlanNumber, refOrderNumber, extendedParams);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param xSplititIdempotencyKey  (required)
     * @param installmentPlanNumber  (optional)
     * @param refOrderNumber  (optional)
     * @param extendedParams  (optional)
     * @return ApiResponse&lt;InstallmentPlanGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InstallmentPlanGetResponse> searchWithHttpInfo(String xSplititIdempotencyKey, String installmentPlanNumber, String refOrderNumber, Map<String, String> extendedParams) throws ApiException {
        okhttp3.Call localVarCall = searchValidateBeforeCall(xSplititIdempotencyKey, installmentPlanNumber, refOrderNumber, extendedParams, null);
        Type localVarReturnType = new TypeToken<InstallmentPlanGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param xSplititIdempotencyKey  (required)
     * @param installmentPlanNumber  (optional)
     * @param refOrderNumber  (optional)
     * @param extendedParams  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchAsync(String xSplititIdempotencyKey, String installmentPlanNumber, String refOrderNumber, Map<String, String> extendedParams, final ApiCallback<InstallmentPlanGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchValidateBeforeCall(xSplititIdempotencyKey, installmentPlanNumber, refOrderNumber, extendedParams, _callback);
        Type localVarReturnType = new TypeToken<InstallmentPlanGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateOrder
     * @param installmentPlanNumber  (required)
     * @param xSplititIdempotencyKey  (required)
     * @param updateOrderRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrderCall(String installmentPlanNumber, String xSplititIdempotencyKey, UpdateOrderRequest updateOrderRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateOrderRequest;

        // create path and map variables
        String localVarPath = "/api/installmentplans/{installmentPlanNumber}/updateorder"
            .replace("{" + "installmentPlanNumber" + "}", localVarApiClient.escapeString(installmentPlanNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xSplititIdempotencyKey != null) {
            localVarHeaderParams.put("X-Splitit-IdempotencyKey", localVarApiClient.parameterToString(xSplititIdempotencyKey));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateOrderValidateBeforeCall(String installmentPlanNumber, String xSplititIdempotencyKey, UpdateOrderRequest updateOrderRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'installmentPlanNumber' is set
        if (installmentPlanNumber == null) {
            throw new ApiException("Missing the required parameter 'installmentPlanNumber' when calling updateOrder(Async)");
        }

        // verify the required parameter 'xSplititIdempotencyKey' is set
        if (xSplititIdempotencyKey == null) {
            throw new ApiException("Missing the required parameter 'xSplititIdempotencyKey' when calling updateOrder(Async)");
        }

        // verify the required parameter 'updateOrderRequest' is set
        if (updateOrderRequest == null) {
            throw new ApiException("Missing the required parameter 'updateOrderRequest' when calling updateOrder(Async)");
        }

        return updateOrderCall(installmentPlanNumber, xSplititIdempotencyKey, updateOrderRequest, _callback);

    }

    /**
     * 
     * 
     * @param installmentPlanNumber  (required)
     * @param xSplititIdempotencyKey  (required)
     * @param updateOrderRequest  (required)
     * @return InstallmentPlanUpdateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public InstallmentPlanUpdateResponse updateOrder(String installmentPlanNumber, String xSplititIdempotencyKey, UpdateOrderRequest updateOrderRequest) throws ApiException {
        ApiResponse<InstallmentPlanUpdateResponse> localVarResp = updateOrderWithHttpInfo(installmentPlanNumber, xSplititIdempotencyKey, updateOrderRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param installmentPlanNumber  (required)
     * @param xSplititIdempotencyKey  (required)
     * @param updateOrderRequest  (required)
     * @return ApiResponse&lt;InstallmentPlanUpdateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InstallmentPlanUpdateResponse> updateOrderWithHttpInfo(String installmentPlanNumber, String xSplititIdempotencyKey, UpdateOrderRequest updateOrderRequest) throws ApiException {
        okhttp3.Call localVarCall = updateOrderValidateBeforeCall(installmentPlanNumber, xSplititIdempotencyKey, updateOrderRequest, null);
        Type localVarReturnType = new TypeToken<InstallmentPlanUpdateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param installmentPlanNumber  (required)
     * @param xSplititIdempotencyKey  (required)
     * @param updateOrderRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrderAsync(String installmentPlanNumber, String xSplititIdempotencyKey, UpdateOrderRequest updateOrderRequest, final ApiCallback<InstallmentPlanUpdateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateOrderValidateBeforeCall(installmentPlanNumber, xSplititIdempotencyKey, updateOrderRequest, _callback);
        Type localVarReturnType = new TypeToken<InstallmentPlanUpdateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateOrder2
     * @param xSplititIdempotencyKey  (required)
     * @param installmentPlanUpdateRequestByIdentifier  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrder2Call(String xSplititIdempotencyKey, InstallmentPlanUpdateRequestByIdentifier installmentPlanUpdateRequestByIdentifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = installmentPlanUpdateRequestByIdentifier;

        // create path and map variables
        String localVarPath = "/api/installmentplans/updateorder";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xSplititIdempotencyKey != null) {
            localVarHeaderParams.put("X-Splitit-IdempotencyKey", localVarApiClient.parameterToString(xSplititIdempotencyKey));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateOrder2ValidateBeforeCall(String xSplititIdempotencyKey, InstallmentPlanUpdateRequestByIdentifier installmentPlanUpdateRequestByIdentifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xSplititIdempotencyKey' is set
        if (xSplititIdempotencyKey == null) {
            throw new ApiException("Missing the required parameter 'xSplititIdempotencyKey' when calling updateOrder2(Async)");
        }

        // verify the required parameter 'installmentPlanUpdateRequestByIdentifier' is set
        if (installmentPlanUpdateRequestByIdentifier == null) {
            throw new ApiException("Missing the required parameter 'installmentPlanUpdateRequestByIdentifier' when calling updateOrder2(Async)");
        }

        return updateOrder2Call(xSplititIdempotencyKey, installmentPlanUpdateRequestByIdentifier, _callback);

    }

    /**
     * 
     * 
     * @param xSplititIdempotencyKey  (required)
     * @param installmentPlanUpdateRequestByIdentifier  (required)
     * @return InstallmentPlanUpdateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public InstallmentPlanUpdateResponse updateOrder2(String xSplititIdempotencyKey, InstallmentPlanUpdateRequestByIdentifier installmentPlanUpdateRequestByIdentifier) throws ApiException {
        ApiResponse<InstallmentPlanUpdateResponse> localVarResp = updateOrder2WithHttpInfo(xSplititIdempotencyKey, installmentPlanUpdateRequestByIdentifier);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param xSplititIdempotencyKey  (required)
     * @param installmentPlanUpdateRequestByIdentifier  (required)
     * @return ApiResponse&lt;InstallmentPlanUpdateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InstallmentPlanUpdateResponse> updateOrder2WithHttpInfo(String xSplititIdempotencyKey, InstallmentPlanUpdateRequestByIdentifier installmentPlanUpdateRequestByIdentifier) throws ApiException {
        okhttp3.Call localVarCall = updateOrder2ValidateBeforeCall(xSplititIdempotencyKey, installmentPlanUpdateRequestByIdentifier, null);
        Type localVarReturnType = new TypeToken<InstallmentPlanUpdateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param xSplititIdempotencyKey  (required)
     * @param installmentPlanUpdateRequestByIdentifier  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrder2Async(String xSplititIdempotencyKey, InstallmentPlanUpdateRequestByIdentifier installmentPlanUpdateRequestByIdentifier, final ApiCallback<InstallmentPlanUpdateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateOrder2ValidateBeforeCall(xSplititIdempotencyKey, installmentPlanUpdateRequestByIdentifier, _callback);
        Type localVarReturnType = new TypeToken<InstallmentPlanUpdateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for verifyAuthorization
     * @param installmentPlanNumber  (required)
     * @param xSplititIdempotencyKey  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyAuthorizationCall(String installmentPlanNumber, String xSplititIdempotencyKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/installmentplans/{installmentPlanNumber}/verifyauthorization"
            .replace("{" + "installmentPlanNumber" + "}", localVarApiClient.escapeString(installmentPlanNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xSplititIdempotencyKey != null) {
            localVarHeaderParams.put("X-Splitit-IdempotencyKey", localVarApiClient.parameterToString(xSplititIdempotencyKey));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verifyAuthorizationValidateBeforeCall(String installmentPlanNumber, String xSplititIdempotencyKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'installmentPlanNumber' is set
        if (installmentPlanNumber == null) {
            throw new ApiException("Missing the required parameter 'installmentPlanNumber' when calling verifyAuthorization(Async)");
        }

        // verify the required parameter 'xSplititIdempotencyKey' is set
        if (xSplititIdempotencyKey == null) {
            throw new ApiException("Missing the required parameter 'xSplititIdempotencyKey' when calling verifyAuthorization(Async)");
        }

        return verifyAuthorizationCall(installmentPlanNumber, xSplititIdempotencyKey, _callback);

    }

    /**
     * 
     * 
     * @param installmentPlanNumber  (required)
     * @param xSplititIdempotencyKey  (required)
     * @return VerifyAuthorizationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public VerifyAuthorizationResponse verifyAuthorization(String installmentPlanNumber, String xSplititIdempotencyKey) throws ApiException {
        ApiResponse<VerifyAuthorizationResponse> localVarResp = verifyAuthorizationWithHttpInfo(installmentPlanNumber, xSplititIdempotencyKey);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param installmentPlanNumber  (required)
     * @param xSplititIdempotencyKey  (required)
     * @return ApiResponse&lt;VerifyAuthorizationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VerifyAuthorizationResponse> verifyAuthorizationWithHttpInfo(String installmentPlanNumber, String xSplititIdempotencyKey) throws ApiException {
        okhttp3.Call localVarCall = verifyAuthorizationValidateBeforeCall(installmentPlanNumber, xSplititIdempotencyKey, null);
        Type localVarReturnType = new TypeToken<VerifyAuthorizationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param installmentPlanNumber  (required)
     * @param xSplititIdempotencyKey  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyAuthorizationAsync(String installmentPlanNumber, String xSplititIdempotencyKey, final ApiCallback<VerifyAuthorizationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = verifyAuthorizationValidateBeforeCall(installmentPlanNumber, xSplititIdempotencyKey, _callback);
        Type localVarReturnType = new TypeToken<VerifyAuthorizationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
